{"version":3,"sources":["webpack:///./src/main/js/apps/quality-profiles/details/ProfileHeader.tsx","webpack:///./src/main/js/apps/quality-profiles/components/ProfileNotFound.tsx","webpack:///./src/main/js/apps/quality-profiles/components/ProfileContainer.tsx"],"names":["organization","profile","this","props","className","to","language","languageName","ProfileLink","name","isBuiltIn","BuiltInQualityProfileBadge","tooltip","style","lineHeight","date","rulesUpdatedAt","lastUsed","ProfileActions","updateProfiles","ProfileNotFound","location","profiles","router","query","key","find","replace","pathname","other","child","children","id","defer","title"],"mappings":"wOAmCe,MAAM,UAAsB,gBACzC,SACE,MAAM,aAAEA,EAAF,QAAgBC,GAAYC,KAAKC,MAEvC,OACE,0BAAQC,UAAU,sCAChB,uBAAKA,UAAU,sBACb,gBAAC,YAAS,CAACA,UAAU,aAAaC,GAAI,YAAgBL,IACnD,oBAAU,0BAEZ,MACD,gBAAC,OAAI,CACHI,UAAU,aACVC,GAAI,YAA2BJ,EAAQK,SAAUN,IAChDC,EAAQM,eAIb,sBAAIH,UAAU,cACZ,gBAACI,EAAA,EAAW,CACVJ,UAAU,kBACVE,SAAUL,EAAQK,SAClBG,KAAMR,EAAQQ,KACdT,aAAcA,GACd,4BAAOC,EAAQQ,OAEhBR,EAAQS,WACP,gBAACC,EAAA,EAA0B,CAACP,UAAU,cAAcQ,SAAS,KAIjE,uBAAKR,UAAU,cACb,sBAAIA,UAAU,cAAcS,MAAO,CAAEC,WAAY,SAC/C,sBAAIV,UAAU,sBACX,oBAAU,6B,IAA8B,gBAAC,IAAW,CAACW,KAAMd,EAAQe,kBAEtE,sBAAIZ,UAAU,0BACX,oBAAU,0B,IAA2B,gBAAC,IAAW,CAACW,KAAMd,EAAQgB,YAEnE,0BACE,gBAAC,OAAI,CACHb,UAAU,SACVC,GAAI,YAAwBJ,EAAQQ,KAAMR,EAAQK,SAAUN,IAC3D,oBAAU,eAGf,0BACE,gBAACkB,EAAA,EAAc,CACbd,UAAU,YACVJ,aAAcA,EACdC,QAASA,EACTkB,eAAgBjB,KAAKC,MAAMgB,oBAMlClB,EAAQS,WACP,uBAAKN,UAAU,oBACZ,oBAAU,4CClER,SAASgB,EAAgBjB,GACtC,OACE,uBAAKC,UAAU,6BACb,uBAAKA,UAAU,sBACb,gBAAC,YAAS,CAACA,UAAU,aAAaC,GAAI,YAAgBF,EAAMH,eACzD,oBAAU,2BAIf,2BAAM,oBAAU,gC,0sBCAP,MAAM,UAAyB,gBAC5C,oBACE,MAAM,SAAEqB,EAAF,SAAYC,EAAZ,OAAsBC,GAAWrB,KAAKC,MAC5C,GAAIkB,EAASG,MAAMC,IAAK,CAItB,MAAMxB,EAAUqB,EAASI,KAAKzB,GAAWA,EAAQwB,MAAQJ,EAASG,MAAMC,KACpExB,GACFsB,EAAOI,QAAQ,CACbC,SAAUP,EAASO,SACnBJ,MAAO,CAAElB,SAAUL,EAAQK,SAAUG,KAAMR,EAAQQ,SAM3D,SACE,MAAM,EAAiDP,KAAKC,OAAtD,aAAEH,EAAF,SAAgBsB,EAAhB,SAA0BD,GAAhC,EAA6CQ,EAA7C,6CACM,IAAEJ,EAAF,SAAOnB,EAAP,KAAiBG,GAASY,EAASG,MAEzC,GAAIC,EAAK,CAMP,OADgBH,EAASI,KAAKzB,GAAWA,EAAQwB,MAAQJ,EAASG,MAAMC,KACvD,KAAO,gBAACL,EAAe,CAACpB,aAAcA,IAGzD,MAAMC,EAAUqB,EAASI,KACvBzB,GAAWA,EAAQK,WAAaA,GAAYL,EAAQQ,OAASA,GAG/D,IAAKR,EACH,OAAO,gBAACmB,EAAe,CAACpB,aAAcA,IAGxC,MAAM8B,EAAQ,eAAmB5B,KAAKC,MAAM4B,S,+VAA9B,EACZ/B,eACAC,UACAqB,YACGO,IAGL,OACE,uBAAKG,GAAG,mBACN,gBAAC,IAAM,CAACC,OAAO,EAAOC,MAAOjC,EAAQQ,OACrC,gBAAC,EAAa,CACZT,aAAcA,EACdC,QAASA,EACTkB,eAAgBjB,KAAKC,MAAMgB,iBAE5BW","file":"js/361.m.30e95b92.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { IndexLink, Link } from 'react-router';\nimport DateFromNow from 'sonar-ui-common/components/intl/DateFromNow';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport BuiltInQualityProfileBadge from '../components/BuiltInQualityProfileBadge';\nimport ProfileActions from '../components/ProfileActions';\nimport ProfileLink from '../components/ProfileLink';\nimport { Profile } from '../types';\nimport { getProfileChangelogPath, getProfilesForLanguagePath, getProfilesPath } from '../utils';\n\ninterface Props {\n  profile: Profile;\n  organization: string | null;\n  updateProfiles: () => Promise<void>;\n}\n\nexport default class ProfileHeader extends React.PureComponent<Props> {\n  render() {\n    const { organization, profile } = this.props;\n\n    return (\n      <header className=\"page-header quality-profile-header\">\n        <div className=\"note spacer-bottom\">\n          <IndexLink className=\"text-muted\" to={getProfilesPath(organization)}>\n            {translate('quality_profiles.page')}\n          </IndexLink>\n          {' / '}\n          <Link\n            className=\"text-muted\"\n            to={getProfilesForLanguagePath(profile.language, organization)}>\n            {profile.languageName}\n          </Link>\n        </div>\n\n        <h1 className=\"page-title\">\n          <ProfileLink\n            className=\"link-base-color\"\n            language={profile.language}\n            name={profile.name}\n            organization={organization}>\n            <span>{profile.name}</span>\n          </ProfileLink>\n          {profile.isBuiltIn && (\n            <BuiltInQualityProfileBadge className=\"spacer-left\" tooltip={false} />\n          )}\n        </h1>\n\n        <div className=\"pull-right\">\n          <ul className=\"list-inline\" style={{ lineHeight: '24px' }}>\n            <li className=\"small spacer-right\">\n              {translate('quality_profiles.updated_')} <DateFromNow date={profile.rulesUpdatedAt} />\n            </li>\n            <li className=\"small big-spacer-right\">\n              {translate('quality_profiles.used_')} <DateFromNow date={profile.lastUsed} />\n            </li>\n            <li>\n              <Link\n                className=\"button\"\n                to={getProfileChangelogPath(profile.name, profile.language, organization)}>\n                {translate('changelog')}\n              </Link>\n            </li>\n            <li>\n              <ProfileActions\n                className=\"pull-left\"\n                organization={organization}\n                profile={profile}\n                updateProfiles={this.props.updateProfiles}\n              />\n            </li>\n          </ul>\n        </div>\n\n        {profile.isBuiltIn && (\n          <div className=\"page-description\">\n            {translate('quality_profiles.built_in.description')}\n          </div>\n        )}\n      </header>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { IndexLink } from 'react-router';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getProfilesPath } from '../utils';\n\ninterface Props {\n  organization: string | null;\n}\n\nexport default function ProfileNotFound(props: Props) {\n  return (\n    <div className=\"quality-profile-not-found\">\n      <div className=\"note spacer-bottom\">\n        <IndexLink className=\"text-muted\" to={getProfilesPath(props.organization)}>\n          {translate('quality_profiles.page')}\n        </IndexLink>\n      </div>\n\n      <div>{translate('quality_profiles.not_found')}</div>\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { WithRouterProps } from 'react-router';\nimport ProfileHeader from '../details/ProfileHeader';\nimport { Profile } from '../types';\nimport ProfileNotFound from './ProfileNotFound';\n\ninterface Props {\n  children: React.ReactElement<any>;\n  location: {\n    pathname: string;\n    query: { key?: string; language: string; name: string };\n  };\n  organization: string | null;\n  profiles: Profile[];\n  updateProfiles: () => Promise<void>;\n}\n\nexport default class ProfileContainer extends React.PureComponent<Props & WithRouterProps> {\n  componentDidMount() {\n    const { location, profiles, router } = this.props;\n    if (location.query.key) {\n      // try to find a quality profile with the given key\n      // if managed to find one, redirect to a new version\n      // otherwise do nothing, `render` will show not found page\n      const profile = profiles.find(profile => profile.key === location.query.key);\n      if (profile) {\n        router.replace({\n          pathname: location.pathname,\n          query: { language: profile.language, name: profile.name }\n        });\n      }\n    }\n  }\n\n  render() {\n    const { organization, profiles, location, ...other } = this.props;\n    const { key, language, name } = location.query;\n\n    if (key) {\n      // if there is a `key` parameter,\n      // then if we managed to find a quality profile with this key\n      // then we will be redirected in `componentDidMount`\n      // otherwise show `ProfileNotFound`\n      const profile = profiles.find(profile => profile.key === location.query.key);\n      return profile ? null : <ProfileNotFound organization={organization} />;\n    }\n\n    const profile = profiles.find(\n      profile => profile.language === language && profile.name === name\n    );\n\n    if (!profile) {\n      return <ProfileNotFound organization={organization} />;\n    }\n\n    const child = React.cloneElement(this.props.children, {\n      organization,\n      profile,\n      profiles,\n      ...other\n    });\n\n    return (\n      <div id=\"quality-profile\">\n        <Helmet defer={false} title={profile.name} />\n        <ProfileHeader\n          organization={organization}\n          profile={profile}\n          updateProfiles={this.props.updateProfiles}\n        />\n        {child}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}