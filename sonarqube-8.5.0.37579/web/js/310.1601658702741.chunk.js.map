{"version":3,"sources":["webpack:///./src/main/js/components/common/ProjectKeyInput.tsx","webpack:///./src/main/js/helpers/projects.ts","webpack:///./src/main/js/components/hoc/whenLoggedIn.tsx","webpack:///./src/main/js/apps/create/project/ManualProjectCreate.css?95f7","webpack:///./src/main/js/apps/create/project/ManualProjectCreate.css","webpack:///./src/main/js/apps/create/project/style.css?00fe","webpack:///./src/main/js/apps/create/project/style.css","webpack:///./src/main/js/api/alm-integrations.ts","webpack:///./src/main/js/apps/create/project/types.ts","webpack:///./src/main/js/apps/create/project/BitbucketProjectAccordion.tsx","webpack:///./src/main/js/apps/create/project/BitbucketRepositories.tsx","webpack:///./src/main/js/apps/create/project/BitbucketSearchResults.tsx","webpack:///./src/main/js/apps/create/project/BitbucketImportRepositoryForm.tsx","webpack:///./src/main/js/apps/create/project/CreateProjectPageHeader.tsx","webpack:///./src/main/js/apps/create/project/PersonalAccessTokenForm.tsx","webpack:///./src/main/js/apps/create/project/WrongBindingCountAlert.tsx","webpack:///./src/main/js/apps/create/project/BitbucketProjectCreateRenderer.tsx","webpack:///./src/main/js/apps/create/project/constants.ts","webpack:///./src/main/js/apps/create/project/BitbucketProjectCreate.tsx","webpack:///./src/main/js/apps/create/project/CreateProjectModeSelection.tsx","webpack:///./src/main/js/apps/create/project/GitHubProjectCreateRenderer.tsx","webpack:///./src/main/js/apps/create/project/GitHubProjectCreate.tsx","webpack:///./src/main/js/apps/create/project/GitlabProjectSelectionForm.tsx","webpack:///./src/main/js/apps/create/project/GitlabProjectCreateRenderer.tsx","webpack:///./src/main/js/apps/create/project/GitlabProjectCreate.tsx","webpack:///./src/main/js/apps/create/project/ManualProjectCreate.tsx","webpack:///./src/main/js/apps/create/project/CreateProjectPage.tsx","webpack:///./src/main/js/app/components/a11y/A11ySkipTarget.tsx","webpack:///./src/main/js/types/alm-settings.ts","webpack:///./src/main/js/api/alm-settings.ts","webpack:///./src/main/js/apps/settings/components/AdditionalCategoryKeys.ts"],"names":["ProjectKeyInput","props","error","help","label","placeholder","projectKey","touched","validating","isInvalid","undefined","isValid","className","description","id","required","autoFocus","maxLength","minLength","onChange","onProjectKeyChange","type","value","validateProjectKey","length","Empty","TooLong","test","Valid","OnlyDigits","InvalidChar","whenLoggedIn","WrappedComponent","componentDidMount","this","currentUser","render","displayName","Wrapper","api","content","__esModule","default","module","i","options","exported","locals","exports","___CSS_LOADER_API_IMPORT___","push","setAlmPersonalAccessToken","almSetting","pat","catch","throwGlobalError","checkPersonalAccessTokenIsValid","then","response","status","getGithubOrganizations","token","getGithubRepositories","data","organization","pageSize","page","query","p","ps","q","getGitlabProjects","projectName","projects","repositories","projectsPaging","paging","importGitlabProject","gitlabProjectId","CreateProjectModes","BitbucketProjectAccordion","disableRepositories","open","project","selectedRepository","showingAllRepositories","repositoryCount","title","name","onClick","Alert","variant","defaultMessage","values","link","to","pathname","mode","BitbucketServer","resetPat","map","repo","sqProjectKey","key","fill","green","size","checked","disabled","onCheck","onSelectRepository","String","BitbucketRepositories","projectRepositories","openProjectKeys","setOpenProjectKeys","allAreExpanded","isOpen","includes","allShown","handleClick","BitbucketSearchResults","searching","searchResults","filteredProjects","r","find","filter","loading","BitbucketImportRepositoryForm","onSearch","CreateProjectPageHeader","additionalActions","getPatUrl","alm","url","Bitbucket","replace","endsWith","PersonalAccessTokenForm","submitting","validationFailed","setTouched","onSubmit","e","preventDefault","FormData","currentTarget","get","onPersonalAccessTokenCreate","display","alt","height","src","href","rel","target","perm","GitLab","WrongBindingCountAlert","canAdmin","category","BitbucketProjectCreateRenderer","bitbucketSetting","importing","showPersonalAccessTokenForm","submittingToken","tokenValidationFailed","onImportRepository","mounted","fetchInitialData","setState","checkPersonalAccessToken","patIsValid","fetchBitbucketProjects","fetchBitbucketRepositories","Promise","resolve","all","isLastPage","filteredRepositories","results","reduce","acc","handlePersonalAccessTokenCreate","handleImportRepository","repositorySlug","slug","onProjectCreate","handleSearch","repositoryName","handleSelectRepository","state","bitbucketSettings","componentDidUpdate","prevProps","componentWillUnmount","loadingBindings","location","Boolean","renderAlmOption","almCounts","count","onSelectMode","style","lineHeight","overlay","CreateProjectModeSelection","GitHub","orgToOption","organizations","o","GitHubProjectCreateRenderer","loadingOrganizations","selectedOrganization","defaultOptions","minimumQueryLength","onSelect","onSelectOrganization","loadingRepositories","repositoryPaging","searchQuery","isDisabled","repository","total","loadMore","onLoadMore","renderRepositoryList","triggerSearch","fetchRepositories","organizationKey","handleSelectOrganization","handleLoadMore","pageIndex","settings","repositoryKey","initialize","router","code","redirectToGithub","fetchOrganizations","clientId","queryParams","param","join","instanceRootUrl","window","params","GitlabProjectSelectionForm","importingGitlabProjectId","loadingMore","pathSlug","pathName","qualifier","Project","sqProjectName","colSpan","onImport","GitlabProjectCreateRenderer","tokenIsValid","fetchProjects","result","handleError","doImport","handleImport","cleanUrl","checkFreeKey","component","alreadyExist","projectKeyError","handleFormSubmit","event","canSubmit","trim","handleProjectKeyChange","validateKey","prevState","projectNameChanged","projectNameError","validateName","handleProjectNameChange","projectNameIsInvalid","projectNameIsValid","githubSettings","gitlabSettings","fetchAlmBindings","almSettings","s","handleModeSelect","handleProjectCreate","projectKeys","branchesEnabled","renderForm","Manual","Azure","titleTemplate","A11ySkipTarget","anchor","withAppState","Consumer","addA11ySkipLink","removeA11ySkipLink","A11ySkipTargetInner","getLink","weight","AlmKeys","getAlmDefinitions","getAlmDefinitionsNoCatch","getAlmSettings","createGithubConfiguration","updateGithubConfiguration","createAzureConfiguration","updateAzureConfiguration","createBitbucketConfiguration","updateBitbucketConfiguration","createGitlabConfiguration","updateGitlabConfiguration","deleteConfiguration","countBindedProjects","getProjectAlmBinding","deleteProjectAlmBinding","setProjectAzureBinding","setProjectBitbucketBinding","setProjectGithubBinding","setProjectGitlabBinding","ALM_INTEGRATION","ANALYSIS_SCOPE_CATEGORY","LANGUAGES_CATEGORY","NEW_CODE_PERIOD_CATEGORY","PULL_REQUEST_DECORATION_BINDING_CATEGORY"],"mappings":"6FAAA,2FAqCc,SAAUA,EAAgBC,GAC9B,IAAAC,EAAA,EAAAA,MAAOC,EAAA,EAAAA,KAAMC,EAAA,EAAAA,MAAOC,EAAA,EAAAA,YAAaC,EAAA,EAAAA,WAAYC,EAAA,EAAAA,QAASC,EAAA,EAAAA,WAExDC,EAAYF,QAAqBG,IAAVR,EACvBS,EAAUJ,IAAYC,QAAwBE,IAAVR,EAE1C,OACE,gBAAC,IAAe,CACdU,UAAU,aACVC,YAAa,oBAAU,qDACvBX,MAAOA,EACPC,KAAMA,EACNW,GAAG,cACHL,UAAWA,EACXE,QAASA,EACTP,MAAOA,EACPW,cAAoBL,IAAVN,GACV,yBACEY,WAAW,EACXJ,UAAW,EAAW,oBAAqB,CACzC,aAAcH,EACd,WAAYE,IAEdG,GAAG,cACHG,UAAW,IACXC,UAAW,EACXC,SAAUlB,EAAMmB,mBAChBf,YAAaA,EACbgB,KAAK,OACLC,MAAOhB,O,kCClEf,wDAsBM,SAAUiB,EAAmBjB,GAKjC,OAA0B,IAAtBA,EAAWkB,OACN,IAA2BC,MACzBnB,EAAWkB,OAAS,IACtB,IAA2BE,QAJtB,mCAKGC,KAAKrB,GACb,IAA2BsB,MAE3B,WAAWD,KAAKrB,GACnB,IAA2BuB,WAC3B,IAA2BC,c,koBCX7B,SAAUC,EAAgBC,GAC9B,+B,+CAgBA,OAhBsB,OAGpB,YAAAC,kBAAA,WACO,YAAWC,KAAKjC,MAAMkC,cACzB,OAIJ,YAAAC,OAAA,WACE,OAAI,YAAWF,KAAKjC,MAAMkC,aACjB,gBAACH,EAAgB,KAAKE,KAAKjC,QAE3B,MAZJ,EAAAoC,YAAc,YAAsBL,EAAkB,gBAe/D,EAhBA,CAAsB,aAkBtB,OAAO,YAAgBM,K,qBC5CzB,IAAIC,EAAM,EAAQ,KACFC,EAAU,EAAQ,MAIC,iBAFvBA,EAAUA,EAAQC,WAAaD,EAAQE,QAAUF,KAG/CA,EAAU,CAAC,CAACG,EAAOC,EAAIJ,EAAS,MAG9C,IAAIK,EAAU,CAEd,OAAiB,OACjB,WAAoB,GAIhBC,GAFSP,EAAIC,EAASK,GAEXL,EAAQO,OAASP,EAAQO,OAAS,IAIjDJ,EAAOK,QAAUF,G,sBClBjBE,EADkC,EAAQ,IAChCC,EAA4B,IAE9BC,KAAK,CAACP,EAAOC,EAAI,wFAAyF,KAElHD,EAAOK,QAAUA,G,qBCNjB,IAAIT,EAAM,EAAQ,KACFC,EAAU,EAAQ,MAIC,iBAFvBA,EAAUA,EAAQC,WAAaD,EAAQE,QAAUF,KAG/CA,EAAU,CAAC,CAACG,EAAOC,EAAIJ,EAAS,MAG9C,IAAIK,EAAU,CAEd,OAAiB,OACjB,WAAoB,GAIhBC,GAFSP,EAAIC,EAASK,GAEXL,EAAQO,OAASP,EAAQO,OAAS,IAIjDJ,EAAOK,QAAUF,G,sBClBjBE,EADkC,EAAQ,IAChCC,EAA4B,IAE9BC,KAAK,CAACP,EAAOC,EAAI,s7BAAu7B,KAEh9BD,EAAOK,QAAUA,G,kMCwBX,SAAUG,EAA0BC,EAAoBC,GAC5D,OAAO,eAAK,gCAAiC,CAAED,WAAU,EAAEC,IAAG,IAAIC,MAAMC,EAAA,GAGpE,SAAUC,EAAgCJ,GAC9C,OAAO,cAAI,kCAAmC,CAAEA,WAAU,IACvDK,MAAK,WAAM,YACXH,OAAM,SAACI,GACN,OAAwB,MAApBA,EAASC,QAGJ,OAAAJ,EAAA,GAAiBG,MAiE1B,SAAUE,EACdR,EACAS,GAEA,OAAO,kBAAQ,kDAAmD,CAChET,WAAU,EACVS,MAAK,IACJP,OAAM,SAACI,GACJA,GAAgC,MAApBA,EAASC,QACvB,OAAAJ,EAAA,GAAiBG,MAKjB,SAAUI,EAAsBC,GAO5B,IAAAX,EAAA,EAAAA,WAAYY,EAAA,EAAAA,aAAcC,EAAA,EAAAA,SAAU,IAAAC,YAAA,IAAO,EAAP,IAAUC,EAAA,EAAAA,MACtD,OAAO,kBAAQ,iDAAkD,CAC/Df,WAAU,EACVY,aAAY,EACZI,EAAGF,EACHG,GAAIJ,EACJK,EAAGH,QAASzD,IACX4C,MAAMC,EAAA,GAGL,SAAUgB,EAAkBR,GAMxB,IAAAX,EAAA,EAAAA,WAAYa,EAAA,EAAAA,SAAUC,EAAA,EAAAA,KAAMC,EAAA,EAAAA,MACpC,OAAO,kBAAQ,4CAA6C,CAC1Df,WAAU,EACVoB,YAAaL,QAASzD,EACtB0D,EAAGF,EACHG,GAAIJ,IAEHR,MAAK,SAAC,GAA6B,MAAC,CAAEgB,SAA9B,EAAAC,aAAsDC,eAAxC,EAAAC,WACtBtB,MAAMC,EAAA,GAGL,SAAUsB,EAAoBd,GAI1B,IAAAX,EAAA,EAAAA,WAAY0B,EAAA,EAAAA,gBACpB,OAAO,mBAAS,8CAA+C,CAC7D1B,WAAU,EACV0B,gBAAe,IACdxB,MAAMC,EAAA,G,IC/ICwB,E,6LCyBE,SAAUC,EAA0B/E,G,MAE9CgF,EAAA,EAAAA,oBACAC,EAAA,EAAAA,KACAC,EAAA,EAAAA,QACAT,EAAA,EAAAA,aACAU,EAAA,EAAAA,mBACAC,EAAA,EAAAA,uBAGIC,EAAkBZ,EAAalD,OAE/B+D,EAAqB,QAAhB,EAAGJ,aAAO,EAAPA,EAASK,YAAI,QAAI,oBAAU,kBAEzC,OACE,gBAAC,IAAmB,CAClB5E,UAAW,EAAW,oBAAqB,CACzCsE,KAAI,EACJ,iBAAkBjF,EAAMwF,QACxB,YAAaxF,EAAMwF,UAErBA,QACExF,EAAMwF,QACFxF,EAAMwF,QACN,aAINP,KAAMA,EACNK,MAAO,0BAAKA,IACXL,GACC,gCACE,uBAAKtE,UAAU,qBACQ,IAApB0E,GACC,gBAACI,EAAA,MAAK,CAACC,QAAQ,WACb,gBAAC,mBAAgB,CACfC,eAAgB,oBAAU,0CAC1B9E,GAAG,yCACH+E,OAAQ,CACNC,KACE,gBAAC,OAAI,CACHC,GAAI,CACFC,SAAU,mBACV7B,MAAO,CAAE8B,KAAMlB,EAAmBmB,gBAAiBC,SAAU,KAE9D,oBAAU,oDAQtBzB,EAAa0B,KAAI,SAAAC,GAChB,OAAAA,EAAKC,aACH,uBACE1F,UAAU,+EACV2F,IAAKF,EAAKvF,IACV,gBAAC,IAAS,CAACF,UAAU,eAAe4F,KAAM,SAAOC,MAAOC,KAAM,KAC9D,uBAAK9F,UAAU,mBACb,uBAAKA,UAAU,sCACb,0BAAQ2E,MAAOc,EAAKb,MAClB,gBAAC,OAAI,CAACO,GAAI,YAAcM,EAAKC,eAAgBD,EAAKb,QAGtD,0BAAK,oBAAU,oDAInB,gBAAC,IAAK,CACJmB,SAASvB,aAAkB,EAAlBA,EAAoBtE,MAAOuF,EAAKvF,GACzCF,UAAW,EACT,+FACA,CACEgG,SAAU3B,EACV,aAAcA,EACd,oBAAqBA,IAGzBsB,IAAKF,EAAKvF,GACV+F,QAAS,WAAM,OAAA5G,EAAM6G,mBAAN,IACfxF,MAAOyF,OAAOV,EAAKvF,KACnB,0BAAQF,UAAU,gBAAgB2E,MAAOc,EAAKb,MAC3Ca,EAAKb,YAOdH,GAA0BC,EAAkB,GAC5C,gBAACI,EAAA,MAAK,CAACC,QAAQ,WACZ,kCACC,uDACAL,ODvHhB,SAAYP,GACV,kBACA,8BACA,kBACA,kBAJF,CAAYA,MAAkB,K,4LEmBhB,SAAUiC,EAAsB/G,GACpC,IAAAgF,EAAA,EAAAA,oBAAqBR,EAAA,EAAAA,SAAUwC,EAAA,EAAAA,oBAAqB7B,EAAA,EAAAA,mBAEtD,uCAAC8B,EAAA,KAAiBC,EAAA,KAIlBC,EAAiB3C,EAASjD,QAAU0F,EAAgB1F,OAQ1D,OACE,gCACE,uBAAKZ,UAAU,iCACb,gBAAC,aAAU,CACTA,UAAU,aACV6E,QAAS,WAAM,OAAA0B,EAAmBC,EAAiB,GAAK3C,EAAS2B,KAAI,SAAAhC,GAAK,OAAAA,EAAA,UACzEgD,EAAiB,oBAAU,gBAAkB,oBAAU,gBAI3D3C,EAAS2B,KAAI,SAAAjB,GACZ,IAAMkC,EAASH,EAAgBI,SAASnC,EAAQoB,KAC1C,eAAEgB,EAAA,EAAAA,SAAU,IAAA7C,oBAAA,IAAe,EAAf,KAElB,OACE,gBAACM,EAAyB,CACxBC,oBAAqBA,EACrBsB,IAAKpB,EAAQoB,IACbd,QAAS,WAAM,OAxBL,SAAC4B,EAAiB/G,GACpC6G,EACEE,EAAS,IAAQH,EAAiB5G,GAAc,IAAI,EAAK4G,EAAe,CAAE5G,MAsBrDkH,CAAYH,EAAQlC,EAApB,MACf2B,mBAAoB7G,EAAM6G,mBAC1B5B,KAAMmC,EACNlC,QAASA,EACTT,aAAcA,EACdU,mBAAoBA,EACpBC,uBAAwBkC,Q,aCxCtB,SAAUE,EAAuBxH,GAE3C,IAAAgF,EAAA,EAAAA,oBACAR,EAAA,EAAAA,SACAiD,EAAA,EAAAA,UACA,IAAAC,qBAAA,IAAgB,EAAhB,KACAvC,EAAA,EAAAA,mBAGF,GAA6B,IAAzBuC,EAAcnG,SAAiBkG,EACjC,OACE,gBAAChC,EAAA,MAAK,CAAC9E,UAAU,iBAAiB+E,QAAQ,WACvC,oBAAU,kDAKjB,IAAMiC,EAAmB,IACvBD,EAAcvB,KAAI,SAAAyB,GAAK,OAAApD,EAASqD,MAAK,SAAA1D,GAAK,OAAAA,EAAEmC,MAAQsB,EAAV,iBAAyBE,OAAO,cAG5E,OACE,uBAAKnH,UAAU,kBACb,gBAAC,IAAe,CAACoH,QAASN,GACK,IAA5BE,EAAiBpG,QAAgBmG,EAAcnG,OAAS,GACvD,gBAACwD,EAAyB,CACxBC,oBAAqBA,EACrB6B,mBAAoB7G,EAAM6G,mBAC1B5B,MAAM,EACNR,aAAciD,EACdvC,mBAAoBA,EACpBC,wBAAwB,IAI3BuC,EAAiBxB,KAAI,SAAAjB,GACpB,IAAMT,EAAeiD,EAAcI,QAAO,SAAAF,GAAK,OAAAA,EAAEvH,aAAe6E,EAAjB,OAE/C,OACE,gBAACH,EAAyB,CACxBC,oBAAqBA,EACrBsB,IAAKpB,EAAQoB,IACbO,mBAAoB7G,EAAM6G,mBAC1B5B,MAAM,EACNC,QAASA,EACTT,aAAcA,EACdU,mBAAoBA,EACpBC,wBAAwB,SCvCxB,SAAU4C,EAA8BhI,GAElD,IAAAgF,EAAA,EAAAA,oBACA,IAAAR,gBAAA,IAAW,EAAX,KACA,IAAAwC,2BAAA,IAAsB,EAAtB,KACAU,EAAA,EAAAA,cACAD,EAAA,EAAAA,UACAtC,EAAA,EAAAA,mBAGF,OAAwB,IAApBX,EAASjD,OAET,gBAACkE,EAAA,MAAK,CAAC9E,UAAU,aAAa+E,QAAQ,WACpC,gBAAC,mBAAgB,CACfC,eAAgB,oBAAU,6CAC1B9E,GAAG,4CACH+E,OAAQ,CACNC,KACE,gBAAC,OAAI,CACHC,GAAI,CACFC,SAAU,mBACV7B,MAAO,CAAE8B,KAAMlB,EAAmBmB,gBAAiBC,SAAU,KAE9D,oBAAU,oDAUvB,uBAAKvF,UAAU,6BACb,gBAAC,IAAS,CACRO,SAAUlB,EAAMiI,SAChB7H,YAAa,oBAAU,2DAGxBqH,GAAaC,EACZ,gBAACF,EAAsB,CACrBxC,oBAAqBA,EACrB6B,mBAAoB7G,EAAM6G,mBAC1BrC,SAAUA,EACVkD,cAAeA,EACfD,UAAWA,EACXtC,mBAAoBA,IAGtB,gBAAC4B,EAAqB,CACpB/B,oBAAqBA,EACrB6B,mBAAoB7G,EAAM6G,mBAC1BG,oBAAqBA,EACrBxC,SAAUA,EACVW,mBAAoBA,KCzEhB,SAAU+C,EAAwBlI,GACtC,IAAAmI,EAAA,EAAAA,kBAAmB7C,EAAA,EAAAA,MAE3B,OACE,0BAAQ3E,UAAU,sDAChB,sBAAIA,UAAU,oCAAoC2E,GAEjD6C,G,sBCIP,SAASC,EAAUC,EAAcC,GAC/B,OAAID,IAAQ,IAAQE,UACRD,EAAIE,QAAQ,MAAO,IAAG,qCAGzBF,EAAIG,SAAS,WACbH,EAAIE,QAAQ,UAAW,IAAIA,QAAQ,MAAO,IAAG,kCAChD,uGAIM,SAAUE,EAAwB1I,GAE5C,QAAAmD,WAAckF,EAAA,EAAAA,IAAKC,EAAA,EAAAA,IACnB,IAAAK,kBAAA,IAAa,GAAb,EACAC,EAAA,EAAAA,iBAEI,iBAACtI,EAAA,KAASuI,EAAA,KAEhB,aAAgB,WACdA,GAAW,KACV,CAACF,IAEJ,IAAMnI,EAAYoI,IAAqBtI,EAEvC,OACE,uBAAKK,UAAU,sBACb,wBACEA,UAAU,WACVmI,SAAU,SAACC,GACTA,EAAEC,iBACF,IAAM3H,EAAQ,IAAI4H,SAASF,EAAEG,eAAeC,IAAI,yBAChDnJ,EAAMoJ,4BAA4B/H,KAEpC,sBAAIV,UAAU,OAAO,oBAAU,2CAA4C0H,IAC3E,qBAAG1H,UAAU,oCACV,oBAAU,0CAA2C0H,IAGxD,gBAAC,IAAe,CACdpI,MAAOO,EAAY,oBAAU,0CAA2C6H,QAAO5H,EAC/EI,GAAG,wBACHL,UAAWA,EACXE,SAAS,EACTP,MAAO,oBAAU,uCACjBW,UAAU,GACV,yBACEC,WAAW,EACXJ,UAAW,EAAW,oBAAqB,CACzC,aAAcH,IAEhBK,GAAG,wBACHI,UAAW,EACXsE,KAAK,wBACLrE,SAAU,WACR2H,GAAW,IAEbzH,KAAK,UAIT,gBAAC,eAAY,CAACuF,SAAUnG,GAAamI,IAAerI,GACjD,oBAAU,SAEb,gBAAC,IAAe,CAACK,UAAU,cAAcoH,QAASY,KAGpD,gBAAClD,EAAA,MAAK,CAAC9E,UAAU,2BAA2B0I,QAAQ,QAAQ3D,QAAQ,QAClE,0BAAK,oBAAU,6CAEf,qBAAG/E,UAAU,oCACX,gBAAC,mBAAgB,CACfE,GAAG,kDACH8E,eAAgB,oBAAU,mDAC1BC,OAAQ,CAAEyC,IAAK,oBAAU,iBAAkBA,OAI9CC,GACC,uBAAK3H,UAAU,eACb,uBACE2I,IAAI,GACJ3I,UAAU,eACV4I,OAAO,KACPC,IAAQ,uBAAY,eAAenB,EAAG,SAExC,qBAAGoB,KAAMrB,EAAUC,EAAKC,GAAMoB,IAAI,sBAAsBC,OAAO,UAC5D,oBAAU,6CAKjB,qBAAGhJ,UAAU,oCACV,oBAAU,mDAAoD0H,IAGjE,0BACGA,IAAQ,IAAQE,WACf,gCACE,0BACE,gBAAC,mBAAgB,CACf5C,eAAgB,oBACd,8DAEF9E,GAAG,6DACH+E,OAAQ,CACNgE,KACE,8BACG,oBAAU,2DAMrB,0BACE,gBAAC,mBAAgB,CACfjE,eAAgB,oBACd,2DAEF9E,GAAG,0DACH+E,OAAQ,CACNgE,KACE,8BACG,oBAAU,4DAQxBvB,IAAQ,IAAQwB,QACf,sBAAIlJ,UAAU,iBACZ,8BACG,oBAAU,sE,aC3Ib,SAAUmJ,GAAuB9J,GACrC,IAAAqI,EAAA,EAAAA,IAAK0B,EAAA,EAAAA,SAEb,OACE,gBAACtE,EAAA,MAAK,CAACC,QAAQ,SACZqE,EACC,gBAAC,mBAAgB,CACfpE,eAAgB,oBAAU,uDAC1B9E,GAAG,sDACH+E,OAAQ,CACNyC,IAAK,oBAAU,iBAAkBA,GACjCC,IACE,gBAAC,OAAI,CACHxC,GAAI,CACFC,SAAU,kBACV7B,MAAO,CAAE8F,SAAU,OAEpB,oBAAU,qBAMnB,gBAAC,mBAAgB,CACfrE,eAAgB,oBAAU,iDAC1B9E,GAAG,gDACH+E,OAAQ,CACNyC,IAAK,oBAAU,iBAAkBA,OCJ/B,SAAU4B,GAA+BjK,GAEnD,IAAAkK,EAAA,EAAAA,iBACAH,EAAA,EAAAA,SACAI,EAAA,EAAAA,UACApC,EAAA,EAAAA,QACAvD,EAAA,EAAAA,SACAwC,EAAA,EAAAA,oBACA7B,EAAA,EAAAA,mBACAsC,EAAA,EAAAA,UACAC,EAAA,EAAAA,cACA0C,EAAA,EAAAA,4BACAC,EAAA,EAAAA,gBACAC,EAAA,EAAAA,sBAGF,OACE,gCACE,gBAACpC,EAAuB,CACtBC,mBACGiC,GACC,uBAAKzJ,UAAU,kCACb,gBAAC,IAAe,CAACA,UAAU,eAAeoH,QAASoC,IACnD,gBAAC,SAAM,CACLxJ,UAAU,8BACVgG,UAAWxB,GAAsBgF,EACjC3E,QAASxF,EAAMuK,oBACd,oBAAU,oDAKnBjF,MACE,wBAAM3E,UAAU,eACd,uBACE2I,IAAI,GACJ3I,UAAU,eACV4I,OAAO,KACPC,IAAQ,uBAAY,8BAErB,oBAAU,yCAKhBzB,GAAW,qBAAGpH,UAAU,aAEvBoH,IAAYmC,GACZ,gBAACJ,GAAsB,CAACzB,IAAK,IAAQE,UAAWwB,WAAYA,KAG5DhC,GACAmC,IACCE,EACC,gBAAC1B,EAAuB,CACtBvF,WAAY+G,EACZd,4BAA6BpJ,EAAMoJ,4BACnCT,WAAY0B,EACZzB,iBAAkB0B,IAGpB,gBAACtC,EAA6B,CAC5BhD,oBAAqBmF,EACrBlC,SAAUjI,EAAMiI,SAChBpB,mBAAoB7G,EAAM6G,mBAC1BG,oBAAqBA,EACrBxC,SAAUA,EACVkD,cAAeA,EACfD,UAAWA,EACXtC,mBAAoBA,MCxGzB,I,81DCuCP,YAGE,WAAYnF,GAAZ,MACE,YAAMA,IAAM,K,OAHd,EAAAwK,SAAU,EAgCV,EAAAC,iBAAmB,iD,6DAGE,OAFnBxI,KAAKyI,SAAS,CAAE3C,SAAS,IAEN,GAAM9F,KAAK0I,2BAA2BtH,OAAM,WAAM,a,cAA/DuH,EAAa,UAIN,GAAM3I,KAAK4I,yBAAyBxH,OAAM,gBADnD,M,OACFmB,EAAW,S,wBAITA,GAAYA,EAASjD,OAAS,EACV,GAAMU,KAAK6I,2BAA2BtG,GAAUnB,OAAM,gBAD1E,M,OACF2D,EAAsB,S,wBAGpB/E,KAAKuI,SACPvI,KAAKyI,SAAS,CACZE,WAAU,EACVpG,SAAQ,EACRwC,oBAAmB,EACnBe,SAAS,I,YAKf,EAAA4C,yBAA2B,WACjB,IAAAT,EAAA,QAAAA,iBAER,OAAKA,EAIE3G,EAAgC2G,EAAiB5D,KAH/CyE,QAAQC,SAAQ,IAM3B,EAAAH,uBAAyB,WACf,IXjFV1H,EWiFU+G,EAAA,QAAAA,iBAER,OAAKA,GXnFP/G,EWuFoC+G,EAAiB5D,IXrF9C,kBAAQ,sDAAuD,CAAEnD,WAAU,KWqFxBK,MAAK,SAAC,GAAiB,OAAf,EAAAgB,YAHvDuG,QAAQC,aAAQvK,IAM3B,EAAAqK,2BAA6B,SAC3BtG,GAEQ,IAAA0F,EAAA,QAAAA,iBAER,OAAKA,EAIEa,QAAQE,IACbzG,EAAS2B,KAAI,SAAAhC,GACX,OX/FNhB,EW+F4C+G,EAAiB5D,IX9F7D/B,EW8FkEJ,EAAEoB,KXzF7D,kBAAQ,qDAAsD,CACnEpC,WAAU,EACVoB,YAAW,KWuF6Df,MAClE,SAAC,G,IAAE0H,EAAA,EAAAA,WAMKC,EANO,EAAA1G,aAM6BqD,QAAO,SAAAF,GAAK,OAAAA,EAAEvH,aAAe8D,EAAjB,OAatD,MAAO,CACLM,aAAc0G,EACdD,WAJAA,GAAcC,EAAqB5J,ODhJZ,GCqJvBlB,WAAY8D,EAAEmC,QXvHtB,IACJnD,EACAoB,MW0HIf,MAAK,SAAA4H,GACL,OAAOA,EAAQC,QACb,SAACC,EAAmC,G,MAAEJ,EAAA,EAAAA,WAAY7K,EAAA,EAAAA,WAAYoE,EAAA,EAAAA,aAC5D,gBAAY6G,KAAG,MAAGjL,GAAa,CAAEiH,SAAU4D,EAAYzG,aAAY,GAAE,MAEvE,OAtCKsG,QAAQC,aAAQvK,IA2C3B,EAAA8K,gCAAkC,SAAC3H,GACzB,IAAAsG,EAAA,QAAAA,kBAEHA,GAAoBtG,EAAMrC,OAAS,IAIxC,EAAKmJ,SAAS,CAAEL,iBAAiB,EAAMC,uBAAuB,IAC9DpH,EAA0BgH,EAAiB5D,IAAK1C,GAC7CJ,KAAK,EAAKmH,0BACVnH,MAAK,SAAAoH,GACA,EAAKJ,UACP,EAAKE,SAAS,CAAEL,iBAAiB,EAAOO,WAAU,EAAEN,uBAAwBM,IACxEA,GACF,EAAKH,uBAIVpH,OAAM,WACD,EAAKmH,SACP,EAAKE,SAAS,CAAEL,iBAAiB,SAKzC,EAAAmB,uBAAyB,WACjB,IXlJRrI,EACA9C,EACAoL,EWgJQ,UAAEvB,EAAA,EAAAA,iBAAkB/E,EAAA,EAAAA,mBAErB+E,GAAqB/E,IAI1B,EAAKuF,SAAS,CAAEP,WAAW,KXxJ7BhH,EW0JI+G,EAAiB5D,IXzJrBjG,EW0JI8E,EAAmB9E,WXzJvBoL,EW0JItG,EAAmBuG,KXxJhB,mBAAS,uDAAwD,CACtEvI,WAAU,EACV9C,WAAU,EACVoL,eAAc,IACbpI,MAAMC,EAAA,IWsJJE,MAAK,SAAC,G,IAAa8C,EAAA,UAAAA,IACd,EAAKkE,UACP,EAAKE,SAAS,CAAEP,WAAW,IAC3B,EAAKnK,MAAM2L,gBAAgB,CAACrF,QAG/BjD,OAAM,WACD,EAAKmH,SACP,EAAKE,SAAS,CAAEP,WAAW,SAKnC,EAAAyB,aAAe,SAAC1H,GACN,IXhKVf,EACA0I,EW+JU3B,EAAA,QAAAA,iBAEHA,IAIAhG,GAKL,EAAKwG,SAAS,CAAEjD,WAAW,EAAMtC,wBAAoB1E,KX3KvD0C,EW4KuC+G,EAAiB5D,IX3KxDuF,EW2K6D3H,EXtKtD,kBAAQ,qDAAsD,CACnEf,WAAU,EACV0I,eAAc,KWqKXrI,MAAK,SAAC,G,IAAEiB,EAAA,EAAAA,aACH,EAAK+F,SACP,EAAKE,SAAS,CAAEjD,WAAW,EAAOC,cAAejD,OAGpDpB,OAAM,WACD,EAAKmH,SACP,EAAKE,SAAS,CAAEjD,WAAW,QAb/B,EAAKiD,SAAS,CAAEjD,WAAW,EAAOC,mBAAejH,EAAW0E,wBAAoB1E,MAkBpF,EAAAqL,uBAAyB,SAAC3G,GACxB,EAAKuF,SAAS,CAAEvF,mBAAkB,KAxMlC,EAAK4G,MAAQ,CAGX7B,iBAAkBlK,EAAMgM,kBAAkB,GAC1C7B,WAAW,EACXpC,SAAS,EACTN,WAAW,EACX6C,uBAAuB,G,EA0O7B,OAtPoD,QAgBlD,YAAAtI,kBAAA,WACEC,KAAKuI,SAAU,EACfvI,KAAKwI,oBAGP,YAAAwB,mBAAA,SAAmBC,GAAnB,WAC6C,IAAvCA,EAAUF,kBAAkBzK,QAAgBU,KAAKjC,MAAMgM,kBAAkBzK,OAAS,GACpFU,KAAKyI,SAAS,CAAER,iBAAkBjI,KAAKjC,MAAMgM,kBAAkB,KAAM,WACnE,SAAKvB,uBAKX,YAAA0B,qBAAA,WACElK,KAAKuI,SAAU,GAkLjB,YAAArI,OAAA,WACQ,iBAAE4H,EAAA,EAAAA,SAAUqC,EAAA,EAAAA,gBAAiBC,EAAA,EAAAA,SAC7B,aACJnC,EAAA,EAAAA,iBACAC,EAAA,EAAAA,UACApC,EAAA,EAAAA,QACA6C,EAAA,EAAAA,WACA5D,EAAA,EAAAA,oBACAxC,EAAA,EAAAA,SACAiD,EAAA,EAAAA,UACAC,EAAA,EAAAA,cACAvC,EAAA,EAAAA,mBACAkF,EAAA,EAAAA,gBACAC,EAAA,EAAAA,sBAGF,OACE,gBAAC,GAA8B,CAC7BJ,iBAAkBA,EAClBH,SAAUA,EACVI,UAAWA,EACXpC,QAASA,GAAWqE,EACpB7B,mBAAoBtI,KAAKuJ,uBACzBpC,4BAA6BnH,KAAKsJ,gCAClCI,gBAAiB1J,KAAKjC,MAAM2L,gBAC5B1D,SAAUhG,KAAK2J,aACf/E,mBAAoB5E,KAAK6J,uBACzB9E,oBAAqBA,EACrBxC,SAAUA,EACVkD,cAAeA,EACfD,UAAWA,EACXtC,mBAAoBA,EACpBiF,6BAA8BQ,GAAc0B,QAAQD,EAASnI,MAAMgC,UACnEmE,gBAAiBA,EACjBC,sBAAuBA,KAI/B,EAtPA,CAAoD,iB,qBC1BpD,SAASiC,GACPvM,EACAqI,EACArC,GAEQ,IAAAwG,EAAA,EAAAA,UAAWJ,EAAA,EAAAA,gBAEbK,EAAQD,EAAUnE,GAClB1B,EAAqB,IAAV8F,GAAeL,EAEhC,OACE,0BACEzL,UAAW,EACT,sFACA,CAAEgG,SAAQ,IAEZA,SAAUA,EACVnB,QAAS,WAAM,OAAAxF,EAAM0M,aAAN,IACftL,KAAK,UACL,uBACEkI,IAAI,GACJC,OAAQ,GACRC,IAAQ,uBAAY,eAAenB,EAAG,SAExC,uBAAK1H,UAAU,yBACZ,oBAAU,0CAA2C0H,IAGvD+D,GACC,4BACG,oBAAU,iDACX,qBAAGzL,UAAU,iCAIfyL,GAAmBzF,GACnB,uBAAKhG,UAAU,8BAA8BgM,MAAO,CAAEC,WAAY,MAC/D,oBAAU,gDACX,gBAAC,KAAW,CACVjM,UAAU,qBACVkM,QACY,IAAVJ,EACI,oBAAU,+CAAgDpE,GACvD,oBAAU,mDAAoDA,GAAI,wBACnE,kCACA,kDACAoE,OAUN,SAAUK,GAA2B9M,GACjD,OACE,gCACE,0BAAQW,UAAU,4CAChB,sBAAIA,UAAU,sCACX,oBAAU,8BAEb,qBAAGA,UAAU,mBAAmB,oBAAU,6CAG5C,uBAAKA,UAAU,oEACb,0BACEA,UAAU,yEACV6E,QAAS,WAAM,OAAAxF,EAAM0M,aAAa5H,EAAnB,SACf1D,KAAK,UACL,uBACEkI,IAAI,GACJC,OAAQ,GACRC,IAAQ,uBAAY,2CAEtB,uBAAK7I,UAAU,yBACZ,oBAAU,oDAId4L,GAAgBvM,EAAO,IAAQuI,UAAWzD,EAAmBmB,iBAC7DsG,GAAgBvM,EAAO,IAAQ+M,OAAQjI,EAAmBiI,QAC1DR,GAAgBvM,EAAO,IAAQ6J,OAAQ/E,EAAmB+E,U,4EC7DnE,SAASmD,GAAY,GACnB,MAAO,CAAE3L,MADY,EAAAiF,IACAnG,MADK,EAAAoF,MAI5B,IAAMqG,GAAe,SAACqB,GAAwC,gBAAC5I,GAC7D,OAAA0G,QAAQC,QAAQiC,EAAcnF,QAAO,SAAAoF,GAAK,OAAC7I,GAAK6I,EAAE3H,KAAK8B,SAAb,MAA0BlB,IAAI6G,OA0E5D,SAAUG,GAA4BnN,GAEhD,IAAA+J,EAAA,EAAAA,SACA9J,EAAA,EAAAA,MACAkK,EAAA,EAAAA,UACAiC,EAAA,EAAAA,gBACAgB,EAAA,EAAAA,qBACAH,EAAA,EAAAA,cACAI,EAAA,EAAAA,qBACAlI,EAAA,EAAAA,mBAGF,OAAIiH,EACK,gBAAC,IAAe,MAIvB,2BACE,gBAAClE,EAAuB,CACtBC,kBACEkF,GACE,uBAAK1M,UAAU,kCACb,gBAAC,IAAe,CAACA,UAAU,eAAeoH,QAASoC,IACnD,gBAAC,SAAM,CACLxJ,UAAU,8BACVgG,UAAWxB,GAAsBgF,EACjC3E,QAASxF,EAAMuK,oBACd,oBAAU,oDAKnBjF,MACE,wBAAM3E,UAAU,mCACd,uBACE2I,IAAI,GACJ3I,UAAU,eACV4I,OAAQ,GACRC,IAAQ,wBAAY,2BAErB,oBAAU,6CAKhBvJ,EACC,uBAAKU,UAAU,+BACb,uBAAKA,UAAU,+CACb,sBAAIA,UAAU,qBACX,oBAAU,mDAEb,gBAAC8E,EAAA,MAAK,CAACC,QAAQ,WACZqE,EACC,gBAAC,mBAAgB,CACflJ,GAAG,yDACH8E,eAAgB,oBACd,0DAEFC,OAAQ,CACNC,KACE,gBAAC,OAAI,CAACC,GAAG,2CACN,oBAAU,mEAMnB,oBAAU,uDAMlB,gBAAC,IAAe,CAACiC,QAASqF,GACxB,uBAAKzM,UAAU,cACb,6BAAQ,oBAAU,yDACjBsM,EAAc1L,OAAS,EACtB,gBAAC,KAAY,CACX+L,eAAgBL,EAAc9G,IAAI6G,IAClC/E,SAAU2D,GAAaqB,GACvBM,mBAAoB,EACpBC,SAAU,SAAC,G,IAAEnM,EAAA,EAAAA,MAAY,OAAArB,EAAMyN,qBAAqBpM,IACpDA,MAAOgM,GAAwBL,GAAYK,MAG5CD,GACC,gBAAC3H,EAAA,MAAK,CAAC9E,UAAU,aAAa+E,QAAQ,SACnCqE,EACC,gBAAC,mBAAgB,CACflJ,GAAG,iDACH8E,eAAgB,oBAAU,kDAC1BC,OAAQ,CACNC,KACE,gBAAC,OAAI,CAACC,GAAG,2CACN,oBACC,mEAOV,oBAAU,+CA9K9B,SAA8B9F,GAE1B,IAAAmK,EAAA,EAAAA,UACAuD,EAAA,EAAAA,oBACAjJ,EAAA,EAAAA,aACAkJ,EAAA,EAAAA,iBACAC,EAAA,EAAAA,YACAP,EAAA,EAAAA,qBACAlI,EAAA,EAAAA,mBAOI0I,EAAa,SAACC,GAClB,QAAEA,EAAWzH,cAAgBqH,GAAuBvD,GAEtD,OACEkD,GACA5I,GACE,uBAAK9D,UAAU,wCACb,uBAAKA,UAAU,aACb,gBAAC,IAAS,CACRA,UAAU,oBACVO,SAAUlB,EAAMiI,SAChB7H,YAAa,oBAAU,iDACvBiB,MAAOuM,KAIc,IAAxBnJ,EAAalD,OACZ,uBAAKZ,UAAU,UACb,gBAAC,IAAe,CAACoH,QAAS2F,GACvB,oBAAU,gBAIfjJ,EAAa0B,KAAI,SAAAyB,GAAK,OACpB,gBAAC,IAAK,CACJjH,UAAU,mEACV2F,IAAKsB,EAAEtB,IACPI,SA/BOoH,EA+BYlG,IA9B3BkG,EAAWzH,gBACVlB,GAAsBA,EAAmBmB,MAAQwH,EAAWxH,KA8BrDK,SAAUkH,EAAWjG,GACrBvG,MAAOuG,EAAEtB,IACTM,QAAS5G,EAAM6G,oBACf,uBAAKlG,UAAU,sBAAsB2E,MAAOsC,EAAErC,MAC5C,uBAAK5E,UAAU,iBAAiBiH,EAAErC,MACjCqC,EAAEvB,cACD,sBAAI1F,UAAU,iDACX,oBAAU,iDACX,gBAAC,IAAS,CAACA,UAAU,qBAAqB8F,KAb9B,QA3BZ,IAACqH,KAgDb,uBAAKnN,UAAU,yCACb,gBAAC,KAAU,CACT8L,MAAOhI,EAAalD,OACpBwM,MAAOJ,EAAiBI,MACxBC,SAAUhO,EAAMiO,WAChBlG,QAAS2F,MAuHdQ,CAAqBlO,I,21DC7L5B,YAGE,WAAYA,GAAZ,MACE,YAAMA,IAAM,K,OAHd,EAAAwK,SAAU,EAgJV,EAAA2D,cAAgB,SAACjK,GACP,IAAAmJ,EAAA,QAAAA,qBACJA,IACF,EAAK3C,SAAS,CAAEvF,wBAAoB1E,IACpC,EAAK2N,kBAAkB,CAAEC,gBAAiBhB,EAAqB/G,IAAKpC,MAAK,MAI7E,EAAAoK,yBAA2B,SAAChI,GAC1B,EAAKoE,UAAS,SAAC,GAAsB,MAAC,CACpCkD,YAAa,GACbzI,wBAAoB1E,EACpB4M,qBAHe,EAAAJ,cAGqBpF,MAAK,SAAAqF,GAAK,OAAAA,EAAE5G,MAAF,SAEhD,EAAK8H,kBAAkB,CAAEC,gBAAiB/H,KAG5C,EAAAwF,uBAAyB,SAACxF,GACxB,EAAKoE,UAAS,SAAC,G,IAAEjG,EAAA,EAAAA,aAAmB,MAAC,CACnCU,mBAAoBV,aAAY,EAAZA,EAAcoD,MAAK,SAAAD,GAAK,OAAAA,EAAEtB,MAAF,UAIhD,EAAAsF,aAAe,SAACgC,GACd,EAAKlD,SAAS,CAAEkD,YAAW,IAC3B,EAAKO,cAAcP,IAGrB,EAAAW,eAAiB,WACT,cAAEZ,EAAA,EAAAA,iBAAkBC,EAAA,EAAAA,YAAaP,EAAA,EAAAA,qBAEnCA,GACF,EAAKe,kBAAkB,CACrBC,gBAAiBhB,EAAqB/G,IACtCrC,KAAM0J,EAAiBa,UAAY,EACnCtK,MAAO0J,KAKb,EAAApC,uBAAyB,iD,oEACjB,EAAyDvJ,KAAK8J,MAA5DsB,EAAoB,uBAAElI,EAAkB,wBAAEsJ,EAAQ,aAE1CpB,GAAwBlI,GAApC,YACFlD,KAAKyI,SAAS,CAAEP,WAAW,I,iBAGL,O,sBAAA,IdzJ1BhH,Ec0JQsL,EAASnI,IdzJjBvC,Ec0JQsJ,EAAqB/G,IdzJ7BoI,Ec0JQvJ,EAAmBmB,IdxJpB,mBAAS,8CAA+C,CAC7DnD,WAAU,EACVY,aAAY,EACZ2K,cAAa,IACZrL,MAAMC,EAAA,K,cciJK4B,EAAY,SAAL,QAMfjD,KAAKjC,MAAM2L,gBAAgB,CAACzG,EAAQoB,M,oBAEhCrE,KAAKuI,SACPvI,KAAKyI,SAAS,CAAEP,WAAW,I,qBdnK/B,IACJhH,EACAY,EACA2K,ScnCE,EAAK3C,MAAQ,CACX9L,OAAO,EACPkK,WAAW,EACXiD,sBAAsB,EACtBM,qBAAqB,EACrBT,cAAe,GACfxI,aAAc,GACdkJ,iBAAkB,CAAE3J,SAfG,GAe6B+J,MAAO,EAAGS,UAAW,GACzEZ,YAAa,GACba,SAAUzO,EAAMyO,SAAS,IAG3B,EAAKN,cAAgB,KAAS,EAAKA,cAAe,K,EAkOtD,OApPiD,QAqB/C,YAAAnM,kBAAA,WACEC,KAAKuI,SAAU,EAEfvI,KAAK0M,cAGP,YAAA1C,mBAAA,SAAmBC,GAAnB,WACoC,IAA9BA,EAAUuC,SAASlN,QAAgBU,KAAKjC,MAAMyO,SAASlN,OAAS,GAClEU,KAAKyI,SAAS,CAAE+D,SAAUxM,KAAKjC,MAAMyO,SAAS,KAAM,WAAM,0BAI9D,YAAAtC,qBAAA,WACElK,KAAKuI,SAAU,GAGX,YAAAmE,WAAN,W,gHAIE,GAHM,EAAuB1M,KAAKjC,MAA1BqM,EAAQ,WAAEuC,EAAM,WAChBH,EAAaxM,KAAK8J,MAAV,YAEE0C,EAASnG,IAEzB,OADArG,KAAKyI,SAAS,CAAEzK,OAAO,IACvB,IAEAgC,KAAKyI,SAAS,CAAEzK,OAAO,IAGnB4O,EAAqB,QAAjB,EAAGxC,EAASnI,aAAK,eAAE2K,K,8CAGtBA,EAAD,MACF,GAAM5M,KAAK6M,iBAAiBL,I,cAA5B,S,aAIA,cAFOpC,EAASnI,MAAM2K,KACtBD,EAAOpG,QAAQ6D,GACf,GAAMpK,KAAK8M,mBAAmBN,EAAUI,I,OAAxC,S,oDAGE5M,KAAKuI,SACPvI,KAAKyI,SAAS,CAAEzK,OAAO,I,+BAKvB,YAAA6O,iBAAN,SAAuBL,G,sGACrB,OAAKA,EAASnG,IAIO,IdpCSnF,EcoCesL,EAASnI,IdnCjD,kBAAQ,6CAA8C,CAAEnD,WAAU,McgCrE,I,OAKF,OAFQ6L,EAAa,SAAL,WAOVC,EAAc,CAClB,CAAEC,MAAO,YAAa7N,MAAO2N,GAC7B,CAAEE,MAAO,eAAgB7N,MAAU,uBAAY,yBAAyB,IAAQ0L,SAE/E5G,KAAI,SAAC,GAAqB,OAAnB,EAAA+I,MAA2B,IAApB,EAAA7N,SACd8N,KAAK,KAaRC,GAPEA,EAFEX,EAASnG,IAAIjB,SAAS,WAENoH,EAASnG,IAAIE,QAAQ,UAAW,IAGhCiG,EAASnG,IAAIE,QAAQ,OAAQ,KAIfA,QAAQ,MAAO,IACjD6G,OAAOhD,SAAS7D,QAAW4G,EAAe,0BAA0BH,G,MAvBlEhN,KAAKyI,SAAS,CAAEzK,OAAO,IACvB,KdxCA,IAA4BkD,SciE1B,YAAA4L,mBAAN,SAAyBN,EAA+B7K,G,kGAC5B,SAAMD,EAAuB8K,EAASnI,IAAK1C,I,cAA7DqJ,EAAkB,SAAL,cAEjBhL,KAAKuI,SACPvI,KAAKyI,SAAS,CAAE0C,sBAAsB,EAAOH,cAAa,I,YAIxD,YAAAmB,kBAAN,SAAwBkB,G,4GAItB,GAHQjB,EAAqCiB,EAAtB,gBAAE,EAAoBA,EAAZ,KAARrL,OAAI,IAAG,IAAC,EAAEC,EAAUoL,EAAL,QAChCb,EAAaxM,KAAK8J,MAAV,UAId,OADA9J,KAAKyI,SAAS,CAAEzK,OAAO,IACvB,IAGFgC,KAAKyI,SAAS,CAAEgD,qBAAqB,I,iBAGtB,O,sBAAA,GAAM7J,EAAsB,CACvCV,WAAYsL,EAASnI,IACrBvC,aAAcsK,EACdrK,SA5HqB,GA6HrBC,KAAI,EACJC,MAAK,K,cALD,EAAO,SAQTjC,KAAKuI,SACPvI,KAAKyI,UAAS,SAAC,G,IAAEjG,EAAA,EAAAA,aAAmB,MAAC,CACnCiJ,qBAAqB,EACrBC,iBAAkB,EAAKhJ,OACvBF,aAAuB,IAATR,EAAa,EAAKQ,aAAc,GAAKA,EAAiB,EAAKA,kB,6BAIzExC,KAAKuI,SACPvI,KAAKyI,SAAS,CACZgD,qBAAqB,EACrBC,iBAAkB,CAAEa,UAAW,EAAGxK,SA5If,GA4I+C+J,MAAO,GACzEtJ,aAAc,K,+BAoEtB,YAAAtC,OAAA,WACQ,iBAAE4H,EAAA,EAAAA,SAAUqC,EAAA,EAAAA,gBACZ,aACJnM,EAAA,EAAAA,MACAkK,EAAA,EAAAA,UACAiD,EAAA,EAAAA,qBACAM,EAAA,EAAAA,oBACAT,EAAA,EAAAA,cACAU,EAAA,EAAAA,iBACAlJ,EAAA,EAAAA,aACAmJ,EAAA,EAAAA,YACAP,EAAA,EAAAA,qBACAlI,EAAA,EAAAA,mBAGF,OACE,gBAACgI,GAA2B,CAC1BpD,SAAUA,EACV9J,MAAOA,EACPkK,UAAWA,EACXiC,gBAAiBA,EACjBgB,qBAAsBA,EACtBM,oBAAqBA,EACrBnD,mBAAoBtI,KAAKuJ,uBACzByC,WAAYhM,KAAKsM,eACjBtG,SAAUhG,KAAK2J,aACf6B,qBAAsBxL,KAAKqM,yBAC3BzH,mBAAoB5E,KAAK6J,uBACzBmB,cAAeA,EACfU,iBAAkBA,EAClBC,YAAaA,EACbnJ,aAAcA,EACd4I,qBAAsBA,EACtBlI,mBAAoBA,KAI5B,EApPA,CAAiD,a,yECPnC,SAAUoK,GAA2BvP,GAE/C,IAAAwP,EAAA,EAAAA,yBACAC,EAAA,EAAAA,YACA,IAAAjL,gBAAA,IAAW,EAAX,KACAE,EAAA,EAAAA,eACA+C,EAAA,EAAAA,UACAmG,EAAA,EAAAA,YAGF,OAAwB,IAApBpJ,EAASjD,QAAuC,IAAvBqM,EAAYrM,QAAiBkG,EAuBxD,uBAAK9G,UAAU,uDACb,gBAAC,IAAS,CACRA,UAAU,SACVoH,QAASN,EACTxG,UAAW,EACXC,SAAUlB,EAAMiI,SAChB7H,YAAa,oBAAU,oDAGzB,2BAEqB,IAApBoE,EAASjD,OACR,uBAAKZ,UAAU,UAAU,oBAAU,eAEnC,yBAAOA,UAAU,0BACf,6BACG6D,EAAS2B,KAAI,SAAAjB,GAAW,OACvB,sBAAIoB,IAAKpB,EAAQrE,IACf,0BACE,gBAAC,KAAO,CAACgM,QAAS3H,EAAQwG,MACxB,0BAAQ/K,UAAU,mDACfuE,EAAQK,OAGb,2BACA,gBAAC,KAAO,CAACsH,QAAS3H,EAAQwK,UACxB,wBAAM/O,UAAU,8DACbuE,EAAQyK,YAIf,0BACE,qBACEhP,UAAU,8CACV8I,KAAMvE,EAAQoD,IACdoB,IAAI,sBACJC,OAAO,UACP,gBAAC,KAAU,CAAChJ,UAAU,wBACrB,oBAAU,2CAGduE,EAAQmB,aACP,gCACE,0BACE,wBAAM1F,UAAU,+DACd,gBAAC,IAAS,CAACA,UAAU,sBAAsB8F,KAAM,KAChD,oBAAU,iDACN,MAET,0BACE,uBAAK9F,UAAU,iCACb,gBAAC,OAAI,CAACmF,GAAI,YAAcZ,EAAQmB,eAC9B,gBAAC,KAAa,CACZ1F,UAAU,eACViP,UAAW,KAAmBC,UAE/B3K,EAAQ4K,kBAMjB,sBAAIC,QAAS,EAAGpP,UAAU,cACxB,gBAAC,SAAM,CACLgG,WAAY6I,EACZhK,QAAS,WAAM,OAAAxF,EAAMgQ,SAAS9K,EAAf,MACd,oBAAU,2CACVsK,IAA6BtK,EAAQrE,IACpC,gBAAC,IAAe,CAACF,UApDJ,wBA8D/B,gBAAC,KAAU,CACT8L,MAAOjI,EAASjD,OAChByM,SAAUhO,EAAMiO,WAChBlG,QAAS0H,EACT1B,MAAOrJ,EAAeqJ,SAvGxB,gBAACtI,EAAA,MAAK,CAAC9E,UAAU,aAAa+E,QAAQ,WACpC,gBAAC,mBAAgB,CACfC,eAAgB,oBAAU,gDAC1B9E,GAAG,+CACH+E,OAAQ,CACNC,KACE,gBAAC,OAAI,CACHC,GAAI,CACFC,SAAU,mBACV7B,MAAO,CAAE8B,KAAMlB,EAAmB+E,OAAQ3D,SAAU,KAErD,oBAAU,oDCxBb,SAAU+J,GAA4BjQ,GAEhD,IAAA+J,EAAA,EAAAA,SACAyF,EAAA,EAAAA,yBACAzH,EAAA,EAAAA,QACA0H,EAAA,EAAAA,YACAjL,EAAA,EAAAA,SACAE,EAAA,EAAAA,eACA+C,EAAA,EAAAA,UACAmG,EAAA,EAAAA,YACAa,EAAA,EAAAA,SACArE,EAAA,EAAAA,4BACAC,EAAA,EAAAA,gBACAC,EAAA,EAAAA,sBAGF,OACE,gCACE,gBAACpC,EAAuB,CACtB5C,MACE,wBAAM3E,UAAU,eACd,uBACE2I,IAAI,GACJ3I,UAAU,eACV4I,OAAO,KACPC,IAAQ,uBAAY,2BAErB,oBAAU,6CAKhBzB,GAAW,qBAAGpH,UAAU,aAEvBoH,IAAY0G,GACZ,gBAAC3E,GAAsB,CAACzB,IAAK,IAAQwB,OAAQE,WAAYA,KAGzDhC,GACA0G,IACCrE,EACC,gBAAC1B,EAAuB,CACtBvF,WAAYsL,EACZrF,4BAA6BpJ,EAAMoJ,4BACnCT,WAAY0B,EACZzB,iBAAkB0B,IAGpB,gBAACiF,GAA0B,CACzBC,yBAA0BA,EAC1BC,YAAaA,EACbO,SAAUhQ,EAAMgQ,SAChB/B,WAAYjO,EAAMiO,WAClBhG,SAAUjI,EAAMiI,SAChBzD,SAAUA,EACVE,eAAgBA,EAChB+C,UAAWA,EACXmG,YAAaA,M,21DCnDzB,YAGE,WAAY5N,GAAZ,MACE,YAAMA,IAAM,K,OAHd,EAAAwK,SAAU,EAoCV,EAAAC,iBAAmB,iD,+DAGI,OAFrBxI,KAAKyI,SAAS,CAAE3C,SAAS,IAEJ,GAAM9F,KAAK0I,4B,cAA1BuF,EAAe,UAIV,GAAMjO,KAAKkO,iBADlB,M,OACFC,EAAS,S,wBAGPnO,KAAKuI,UACH4F,GACM5L,EAA6B4L,EAArB,SAAE1L,EAAmB0L,EAAL,eAEhCnO,KAAKyI,SAAS,CACZwF,aAAY,EACZnI,SAAS,EACTvD,SAAQ,EACRE,eAAc,KAGhBzC,KAAKyI,SAAS,CACZ3C,SAAS,K,YAMjB,EAAA4C,yBAA2B,WACjB,IAAA8D,EAAA,QAAAA,SAER,OAAKA,EAIElL,EAAgCkL,EAASnI,KAAKjD,OAAM,WAAM,YAHxD0H,QAAQC,SAAQ,IAM3B,EAAAqF,YAAc,WACR,EAAK7F,SACP,EAAKE,SAAS,CAAEwF,cAAc,KAMlC,EAAAC,cAAgB,SAAO3B,EAAetK,G,YAAf,IAAAsK,MAAA,G,wFAGrB,KAFQC,EAAaxM,KAAK8J,MAAV,UAGd,SAAOhB,QAAQC,aAAQvK,I,iBAIhB,O,sBAAA,GAAM6D,EAAkB,CAC7BnB,WAAYsL,EAASnI,IACrBrC,KAAMuK,EACNxK,SAhGyB,GAiGzBE,MAAK,K,OAJP,SAAO,U,OAOP,O,SAAA,GAAOjC,KAAKoO,e,yBAIhB,EAAAC,SAAW,SAAOzL,GAAuB,sC,yDAGvC,KAFQ4J,EAAaxM,KAAK8J,MAAV,UAGd,SAAOhB,QAAQC,aAAQvK,I,iBAIhB,O,sBAAA,GAAMmE,EAAoB,CAC/BzB,WAAYsL,EAASnI,IACrBzB,gBAAe,K,OAFjB,SAAO,U,OAKP,O,SAAA,GAAO5C,KAAKoO,e,yBAIhB,EAAAE,aAAe,SAAO1L,GAAuB,sC,yDAG5B,OAFf5C,KAAKyI,SAAS,CAAE8E,yBAA0B3K,IAE3B,GAAM5C,KAAKqO,SAASzL,I,cAA7BuL,EAAS,SAEXnO,KAAKuI,UACPvI,KAAKyI,SAAS,CAAE8E,8BAA0B/O,IAEtC2P,GACFnO,KAAKjC,MAAM2L,gBAAgB,CAACyE,EAAOlL,QAAQoB,O,YAKjD,EAAAiI,eAAiB,iD,+DAQA,OAPftM,KAAKyI,SAAS,CAAE+E,aAAa,IAEvB,EAGFxN,KAAK8J,MAFWyC,EAAS,2BAC3BZ,EAAW,cAGE,GAAM3L,KAAKkO,cAAc3B,EAAY,EAAGZ,I,cAAjDwC,EAAS,SAEXnO,KAAKuI,SACPvI,KAAKyI,UAAS,SAAC,G,IAAE,IAAAlG,gBAAA,IAAW,EAAX,KAAeE,EAAA,EAAAA,eAAqB,MAAC,CACpD+K,aAAa,EACbjL,SAAU4L,EAAQ,GAAK5L,EAAa4L,EAAO5L,UAAYA,EACvDE,eAAgB0L,EAASA,EAAO1L,eAAiBA,M,YAKvD,EAAAkH,aAAe,SAAOgC,GAAmB,sC,yDAGxB,OAFf3L,KAAKyI,SAAS,CAAEjD,WAAW,EAAMmG,YAAW,IAE7B,GAAM3L,KAAKkO,cAAc,EAAGvC,I,cAArCwC,EAAS,SAEXnO,KAAKuI,SACPvI,KAAKyI,UAAS,SAAC,G,IAAElG,EAAA,EAAAA,SAAUE,EAAA,EAAAA,eAAqB,MAAC,CAC/C+C,WAAW,EACXjD,SAAU4L,EAASA,EAAO5L,SAAWA,EACrCE,eAAgB0L,EAASA,EAAO1L,eAAiBA,M,YAKvD,EAAA8L,SAAW,WACH,cAAEnE,EAAA,EAAAA,SAAUuC,EAAA,EAAAA,cACXvC,EAASnI,MAAMgC,SACtB0I,EAAOpG,QAAQ6D,IAGjB,EAAAd,gCAAkC,SAAO3H,GAAa,sC,2DAGpD,KAFQ6K,EAAaxM,KAAK8J,MAAV,WAECnI,EAAMrC,OAAS,EAC9B,UAGFU,KAAKyI,SAAS,CAAEL,iBAAiB,EAAMC,uBAAuB,I,iBAG5D,O,sBAAA,GAAMpH,EAA0BuL,EAASnI,IAAK1C,I,OAE3B,OAFnB,SAEmB,GAAM3B,KAAK0I,4B,cAAxBC,EAAa,SAEf3I,KAAKuI,SACPvI,KAAKyI,SAAS,CACZL,iBAAiB,EACjB6F,aAActF,EACdN,uBAAwBM,IAGtBA,GACF3I,KAAKuO,WACL,GAAMvO,KAAKwI,qBAFT,OAPF,M,OASA,S,oDAIAxI,KAAKuI,SACPvI,KAAKyI,SAAS,CAAEL,iBAAiB,I,+BAlMrC,EAAK0B,MAAQ,CACXhE,SAAS,EACT0H,aAAa,EACb/K,eAAgB,CAAE8J,UAAW,EAAGT,MAAO,EAAG/J,SAXf,IAY3BkM,cAAc,EACdzI,WAAW,EACXmG,YAAa,GACba,SAAoC,IAA1BzO,EAAMyO,SAASlN,OAAevB,EAAMyO,SAAS,QAAKhO,EAC5D4J,iBAAiB,EACjBC,uBAAuB,G,EAmO7B,OAlPiD,QAmB/C,YAAAtI,kBAAA,WACEC,KAAKuI,SAAU,EACfvI,KAAKwI,oBAGP,YAAAwB,mBAAA,SAAmBC,GAAnB,WACoC,IAA9BA,EAAUuC,SAASlN,QAAgBU,KAAKjC,MAAMyO,SAASlN,OAAS,GAClEU,KAAKyI,SACH,CAAE+D,SAAyC,IAA/BxM,KAAKjC,MAAMyO,SAASlN,OAAeU,KAAKjC,MAAMyO,SAAS,QAAKhO,IACxE,WAAM,gCAKZ,YAAA0L,qBAAA,WACElK,KAAKuI,SAAU,GA2KjB,YAAArI,OAAA,WACQ,iBAAE4H,EAAA,EAAAA,SAAUqC,EAAA,EAAAA,gBAAiBC,EAAA,EAAAA,SAC7B,aACJmD,EAAA,EAAAA,yBACAzH,EAAA,EAAAA,QACA0H,EAAA,EAAAA,YACAjL,EAAA,EAAAA,SACAE,EAAA,EAAAA,eACAwL,EAAA,EAAAA,aACAzI,EAAA,EAAAA,UACAmG,EAAA,EAAAA,YACAa,EAAA,EAAAA,SACApE,EAAA,EAAAA,gBACAC,EAAA,EAAAA,sBAGF,OACE,gBAAC2F,GAA2B,CAC1BxB,SAAUA,EACV1E,SAAUA,EACVyF,yBAA0BA,EAC1BzH,QAASA,GAAWqE,EACpBqD,YAAaA,EACbO,SAAU/N,KAAKsO,aACftC,WAAYhM,KAAKsM,eACjBnF,4BAA6BnH,KAAKsJ,gCAClCtD,SAAUhG,KAAK2J,aACfpH,SAAUA,EACVE,eAAgBA,EAChB+C,UAAWA,EACXmG,YAAaA,EACbxD,6BAA8B8F,GAAgB5D,QAAQD,EAASnI,MAAMgC,UACrEmE,gBAAiBA,EACjBC,sBAAuBA,KAI/B,EAlPA,CAAiD,iB,yXCHjD,YAGE,WAAYtK,GAAZ,MACE,YAAMA,IAAM,K,OAHd,EAAAwK,SAAU,EAuBV,EAAAiG,aAAe,SAACnK,GACd,OAAO,aAAoB,CAAEoK,UAAWpK,IACrC9C,MAAK,SAAAmN,GACA,EAAKnG,SAAWlE,IAAQ,EAAKyF,MAAM1L,aAChCsQ,EAGH,EAAKjG,SAAS,CACZkG,gBAAiB,oBAAU,+CAC3BtQ,SAAS,EACTC,YAAY,IALd,EAAKmK,SAAS,CAAEkG,qBAAiBnQ,EAAWF,YAAY,QAU7D8C,OAAM,WACD,EAAKmH,SAAWlE,IAAQ,EAAKyF,MAAM1L,YACrC,EAAKqK,SAAS,CAAEkG,qBAAiBnQ,EAAWF,YAAY,QAehE,EAAAsQ,iBAAmB,SAACC,GAClBA,EAAM9H,iBACE,IAAA+C,EAAA,EAAAA,MACJ,EAAKgF,UAAUhF,KACjB,EAAKrB,SAAS,CAAE/B,YAAY,IAC5B,aAAc,CACZzD,QAAS6G,EAAM1L,WACfkF,MAAOwG,EAAMxH,aAAewH,EAAM1L,YAAY2Q,SAC7CxN,MACD,SAAC,G,IAAE0B,EAAA,EAAAA,QAAc,SAAKlF,MAAM2L,gBAAgB,CAACzG,EAAQoB,SACrD,WACM,EAAKkE,SACP,EAAKE,SAAS,CAAE/B,YAAY,SAOtC,EAAAsI,uBAAyB,SAACH,GACxB,IAAMzQ,EAAayQ,EAAM5H,cAAc7H,OAAS,GAC1CuP,EAAkB,EAAKM,YAAY7Q,GAEzC,EAAKqK,UAAS,SAAAyG,GACZ,IAAM5M,EAAc4M,EAAUC,mBAAqBD,EAAU5M,YAAclE,EAC3E,MAAO,CACLA,WAAU,EACVuQ,gBAAe,EACfrM,YAAW,EACX8M,iBAAkB,EAAKC,aAAa/M,GACpCjE,SAAS,EACTC,gBAAgCE,IAApBmQ,WAIQnQ,IAApBmQ,GACF,EAAKH,aAAapQ,IAItB,EAAAkR,wBAA0B,SAACT,GACzB,IAAMvM,EAAcuM,EAAM5H,cAAc7H,MACxC,EAAKqJ,SAAS,CACZnG,YAAW,EACX6M,oBAAoB,EACpBC,iBAAkB,EAAKC,aAAa/M,MAIxC,EAAA2M,YAAc,SAAC7Q,GACb,IAAM+P,EAAS,aAAmB/P,GAClC,OAAO+P,IAAW,KAA2BzO,WACzClB,EACA,oBAAU,8CAA+C2P,IAG/D,EAAAkB,aAAe,SAAC/M,GACd,OAA2B,IAAvBA,EAAYhD,OACP,oBAAU,sDACRgD,EAAYhD,ORlJS,IQmJvB,oBAAU,8DADZ,GA9GP,EAAKwK,MAAQ,CACX1L,WAAY,GACZkE,YAAa,GACb6M,oBAAoB,EACpBzI,YAAY,EACZrI,SAAS,EACTC,YAAY,GAEd,EAAKkQ,aAAe,KAAS,EAAKA,aAAc,K,EA4KpD,OAzLiD,QAgB/C,YAAAzO,kBAAA,WACEC,KAAKuI,SAAU,GAGjB,YAAA2B,qBAAA,WACElK,KAAKuI,SAAU,GAyBjB,YAAAuG,UAAA,SAAUhF,GACA,IAAA1L,EAAA,EAAAA,WAAYuQ,EAAA,EAAAA,gBAAiBrM,EAAA,EAAAA,YAAa8M,EAAA,EAAAA,iBAClD,OAAO/E,aACe7L,IAApBmQ,QACuBnQ,IAArB4Q,GACAhR,EAAWkB,OAAS,GACpBgD,EAAYhD,OAAS,IAqE3B,YAAAY,OAAA,WACQ,iBACJ9B,EAAA,EAAAA,WACAuQ,EAAA,EAAAA,gBACArM,EAAA,EAAAA,YACA8M,EAAA,EAAAA,iBACA1I,EAAA,EAAAA,WACArI,EAAA,EAAAA,QACAC,EAAA,EAAAA,WAEIiR,EAAuBlR,QAAgCG,IAArB4Q,EAClCI,EAAqBnR,QAAgCG,IAArB4Q,EAEtC,OACE,gCACE,gBAACnJ,EAAuB,CAAC5C,MAAO,oBAAU,8CAE1C,uBAAK3E,UAAU,yBACb,uBAAKA,UAAU,4BACb,wBAAMA,UAAU,wBAAwBmI,SAAU7G,KAAK4O,kBACrD,gBAAC9Q,GAAA,EAAe,CACdE,MAAO2Q,EACP1Q,KAAM,oBAAU,8CAChBC,MAAO,oBAAU,yCACjBgB,mBAAoBc,KAAKgP,uBACzB5Q,WAAYA,EACZC,QAASA,EACTC,WAAYA,IAGd,gBAAC,IAAe,CACdI,UAAU,aACVC,YAAa,oBAAU,sDACvBX,MAAOoR,EACPnR,KAAM,oBAAU,+CAChBW,GAAG,eACHL,UAAWgR,EACX9Q,QAAS+Q,EACTtR,MAAO,oBAAU,0CACjBW,UAAU,GACV,yBACEH,UAAW,EAAW,oBAAqB,CACzC,aAAc6Q,EACd,WAAYC,IAEd5Q,GAAG,eACHG,URtMkB,IQuMlBC,UAAW,EACXC,SAAUe,KAAKsP,wBACfnQ,KAAK,OACLC,MAAOkD,KAIX,gBAAC,eAAY,CAACoC,UAAW1E,KAAK8O,UAAU9O,KAAK8J,QAAUpD,GACpD,oBAAU,WAEb,gBAAC,IAAe,CAAChI,UAAU,cAAcoH,QAASY,SAOhE,EAzLA,CAAiD,iB,sVCFjD,0E,OACE,EAAA6B,SAAU,EACV,EAAAuB,MAAe,CAAEC,kBAAmB,GAAI0F,eAAgB,GAAIC,eAAgB,GAAI5J,SAAS,GAgBzF,EAAA6J,iBAAmB,WACjB,EAAKlH,SAAS,CAAE3C,SAAS,IACzB,cACGvE,MAAK,SAAAqO,GACA,EAAKrH,SACP,EAAKE,SAAS,CACZsB,kBAAmB6F,EAAY/J,QAAO,SAAAgK,GAAK,OAAAA,EAAEzJ,MAAQ,IAAV,aAC3CqJ,eAAgBG,EAAY/J,QAAO,SAAAgK,GAAK,OAAAA,EAAEzJ,MAAQ,IAAV,UACxCsJ,eAAgBE,EAAY/J,QAAO,SAAAgK,GAAK,OAAAA,EAAEzJ,MAAQ,IAAV,UACxCN,SAAS,OAId1E,OAAM,WACD,EAAKmH,SACP,EAAKE,SAAS,CAAE3C,SAAS,QAKjC,EAAAgK,iBAAmB,SAAC/L,GACZ,cAAE4I,EAAA,EAAAA,OAAQvC,EAAA,EAAAA,SAChBuC,EAAO3L,KAAK,CACV8C,SAAUsG,EAAStG,SACnB7B,MAAO,CAAE8B,KAAI,MAIjB,EAAAgM,oBAAsB,SAACC,GACM,IAAvBA,EAAY1Q,QACd,EAAKvB,MAAM4O,OAAO3L,KAAK,YAAcgP,EAAY,M,EAsFvD,OAtIuC,QAIrC,YAAAjQ,kBAAA,WAEgB,IAAAkQ,EAAA,oBAAAA,gBAEdjQ,KAAKuI,SAAU,EACX0H,GACFjQ,KAAK2P,oBAIT,YAAAzF,qBAAA,WACElK,KAAKuI,SAAU,GAqCjB,YAAA2H,WAAA,SAAWnM,G,MACH,aACQ+D,EAAA,WAAAA,SACZsC,EAAA,EAAAA,SACAuC,EAAA,EAAAA,OAEI,aAAE5C,EAAA,EAAAA,kBAAmB0F,EAAA,EAAAA,eAAgBC,EAAA,EAAAA,eAAgB5J,EAAA,EAAAA,QAE3D,OAAQ/B,GACN,KAAKlB,EAAmBmB,gBACtB,OACE,gBAAC,GAAsB,CACrB8D,WAAYA,EACZiC,kBAAmBA,EACnBI,gBAAiBrE,EACjBsE,SAAUA,EACVV,gBAAiB1J,KAAK+P,sBAI5B,KAAKlN,EAAmBiI,OACtB,OACE,gBAAC,GAAmB,CAClBhD,WAAYA,EACZqC,gBAAiBrE,EACjBsE,SAAUA,EACVV,gBAAiB1J,KAAK+P,oBACtBpD,OAAQA,EACRH,SAAUiD,IAIhB,KAAK5M,EAAmB+E,OACtB,OACE,gBAAC,GAAmB,CAClBE,WAAYA,EACZqC,gBAAiBrE,EACjBsE,SAAUA,EACVV,gBAAiB1J,KAAK+P,oBACtBpD,OAAQA,EACRH,SAAUkD,IAIhB,KAAK7M,EAAmBsN,OACtB,OAAO,gBAAC,GAAmB,CAACzG,gBAAiB1J,KAAK+P,sBAEpD,QACE,IAAMxF,IAAS,MACZ,IAAQ6F,OAAQ,EACjB,EAAC,IAAQ9J,WAAYyD,EAAkBzK,OACvC,EAAC,IAAQwL,QAAS2E,EAAenQ,OACjC,EAAC,IAAQsI,QAAS8H,EAAepQ,OAClC,GACD,OACE,gBAACuL,GAA0B,CACzBN,UAAWA,EACXJ,gBAAiBrE,EACjB2E,aAAczK,KAAK8P,qBAO7B,YAAA5P,OAAA,W,MACQ,aACQ+P,EAAA,WAAAA,gBAGRlM,EAAqD,QAAjD,EAFR,EAAAqG,SAEoDnI,aAAK,eAAE8B,KAE7D,OACE,gCACE,gBAAC,IAAM,CAACV,MAAO,oBAAU,6BAA8BgN,cAAc,OACrE,gBAACC,EAAA,EAAc,CAACC,OAAO,wBACvB,uBAAK7R,UAAU,yDAAyDE,GAAG,kBACxEoB,KAAKkQ,WAAWD,EAAkBlM,EAAOlB,EAAmBsN,WAKvE,EAtIA,CAAuC,iBAwIxB,iBAAAtQ,EAAA,GAAa,OAAA2Q,EAAA,GAAa,M,smBC5J3B,SAAUF,EAAevS,GACrC,OACE,gBAAC,IAAY0S,SAAQ,MAClB,SAAC,G,IAAEC,EAAA,EAAAA,gBAAiBC,EAAA,EAAAA,mBAAyB,OAC5C,gBAACC,EAAmB,GAClBF,gBAAiBA,EACjBC,mBAAoBA,GAChB5S,OAYd,6E,OASE,EAAA8S,QAAU,WACF,cAAE,IAAAN,OAAa,IAAArS,MACrB,MAAO,CAAEmG,IAAG,EAAEnG,WADO,IAAQ,EAAR,yCACA4S,OADsC,EAAAA,S,EAQ/D,OAlByC,OACvC,YAAA/Q,kBAAA,WACEC,KAAKjC,MAAM2S,gBAAgB1Q,KAAK6Q,YAGlC,YAAA3G,qBAAA,WACElK,KAAKjC,MAAM4S,mBAAmB3Q,KAAK6Q,YAQrC,YAAA3Q,OAAA,WACU,IAAAqQ,EAAA,WAAAA,OACR,OAAO,wBAAM3R,GAAI,gBAAgB2R,KAErC,EAlBA,CAAyC,kB,iCC7BzC,IAAkBQ,EAnBlB,kCAmBA,SAAkBA,GAChB,gBACA,wBACA,kBACA,kBAJF,CAAkBA,MAAO,M,iCCnBzB,2pBAmCM,SAAUC,IACd,OAAOC,IAA2B7P,MAAM,KAGpC,SAAU6P,IACd,OAAO,kBAAQ,sCAGX,SAAUC,EAAejO,GAC7B,OAAO,kBAAQ,yBAA0B,CAAEA,QAAO,IAC/C1B,MAAK,SAAC,GAAoB,OAAlB,EAAAqO,eACRxO,MAAM,KAGL,SAAU+P,EAA0BtP,GACxC,OAAO,eAAK,kCAAmCA,GAAMT,MAAM,KAGvD,SAAUgQ,EAA0BvP,GACxC,OAAO,eAAK,kCAAmCA,GAAMT,MAAM,KAGvD,SAAUiQ,EAAyBxP,GACvC,OAAO,eAAK,iCAAkCA,GAAMT,MAAM,KAGtD,SAAUkQ,EAAyBzP,GACvC,OAAO,eAAK,iCAAkCA,GAAMT,MAAM,KAGtD,SAAUmQ,EAA6B1P,GAC3C,OAAO,eAAK,qCAAsCA,GAAMT,MAAM,KAG1D,SAAUoQ,EACd3P,GAEA,OAAO,eAAK,qCAAsCA,GAAMT,MAAM,KAG1D,SAAUqQ,EAA0B5P,GACxC,OAAO,eAAK,kCAAmCA,GAAMT,MAAM,KAGvD,SAAUsQ,EAA0B7P,GACxC,OAAO,eAAK,kCAAmCA,GAAMT,MAAM,KAGvD,SAAUuQ,EAAoBtN,GAClC,OAAO,eAAK,2BAA4B,CAAEA,IAAG,IAAIjD,MAAM,KAGnD,SAAUwQ,EAAoB1Q,GAClC,OAAO,kBAAQ,kCAAmC,CAAEA,WAAU,IAC3DK,MAAK,SAAC,GAAiB,OAAf,EAAAgB,YACRnB,MAAM,KAGL,SAAUyQ,EAAqB5O,GACnC,OAAO,kBAAQ,gCAAiC,CAAEA,QAAO,IAGrD,SAAU6O,EAAwB7O,GACtC,OAAO,eAAK,mCAAoC,CAAEA,QAAO,IAAI7B,MAAM,KAG/D,SAAU2Q,EAAuBlQ,GACrC,OAAO,eAAK,sCAAuCA,GAAMT,MAAM,KAG3D,SAAU4Q,EAA2BnQ,GACzC,OAAO,eAAK,0CAA2CA,GAAMT,MAAM,KAG/D,SAAU6Q,EAAwBpQ,GACtC,OAAO,eAAK,uCAAwCA,GAAMT,MAAM,KAG5D,SAAU8Q,EAAwBrQ,GACtC,OAAO,eAAK,uCAAwCA,GAAMT,MAAM,O,iCClHlE,0KAmBO,IAAM+Q,EAAkB,iBAClBC,EAA0B,aAC1BC,EAAqB,YACrBC,EAA2B,kBAC3BC,EAA2C","file":"js/310.1601658702741.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport ValidationInput from 'sonar-ui-common/components/controls/ValidationInput';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { PROJECT_KEY_MAX_LEN } from '../../helpers/constants';\n\nexport interface ProjectKeyInputProps {\n  error?: string;\n  help?: string;\n  label?: string;\n  onProjectKeyChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  projectKey?: string;\n  touched: boolean;\n  validating?: boolean;\n}\n\nexport default function ProjectKeyInput(props: ProjectKeyInputProps) {\n  const { error, help, label, placeholder, projectKey, touched, validating } = props;\n\n  const isInvalid = touched && error !== undefined;\n  const isValid = touched && !validating && error === undefined;\n\n  return (\n    <ValidationInput\n      className=\"form-field\"\n      description={translate('onboarding.create_project.project_key.description')}\n      error={error}\n      help={help}\n      id=\"project-key\"\n      isInvalid={isInvalid}\n      isValid={isValid}\n      label={label}\n      required={label !== undefined}>\n      <input\n        autoFocus={true}\n        className={classNames('input-super-large', {\n          'is-invalid': isInvalid,\n          'is-valid': isValid\n        })}\n        id=\"project-key\"\n        maxLength={PROJECT_KEY_MAX_LEN}\n        minLength={1}\n        onChange={props.onProjectKeyChange}\n        placeholder={placeholder}\n        type=\"text\"\n        value={projectKey}\n      />\n    </ValidationInput>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { ProjectKeyValidationResult } from '../types/component';\nimport { PROJECT_KEY_MAX_LEN } from './constants';\n\nexport function validateProjectKey(projectKey: string): ProjectKeyValidationResult {\n  // This is the regex used on the backend:\n  //   [\\p{Alnum}\\-_.:]*[\\p{Alpha}\\-_.:]+[\\p{Alnum}\\-_.:]*\n  // See sonar-core/src/main/java/org/sonar/core/component/ComponentKeys.java\n  const regex = /^[\\w\\-.:]*[a-z\\-_.:]+[\\w\\-.:]*$/i;\n  if (projectKey.length === 0) {\n    return ProjectKeyValidationResult.Empty;\n  } else if (projectKey.length > PROJECT_KEY_MAX_LEN) {\n    return ProjectKeyValidationResult.TooLong;\n  } else if (regex.test(projectKey)) {\n    return ProjectKeyValidationResult.Valid;\n  } else {\n    return /^[0-9]+$/.test(projectKey)\n      ? ProjectKeyValidationResult.OnlyDigits\n      : ProjectKeyValidationResult.InvalidChar;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport handleRequiredAuthentication from 'sonar-ui-common/helpers/handleRequiredAuthentication';\nimport { isLoggedIn } from '../../helpers/users';\nimport { getWrappedDisplayName } from './utils';\nimport { withCurrentUser } from './withCurrentUser';\n\nexport function whenLoggedIn<P>(WrappedComponent: React.ComponentType<P>) {\n  class Wrapper extends React.Component<P & { currentUser: T.CurrentUser }> {\n    static displayName = getWrappedDisplayName(WrappedComponent, 'whenLoggedIn');\n\n    componentDidMount() {\n      if (!isLoggedIn(this.props.currentUser)) {\n        handleRequiredAuthentication();\n      }\n    }\n\n    render() {\n      if (isLoggedIn(this.props.currentUser)) {\n        return <WrappedComponent {...this.props} />;\n      } else {\n        return null;\n      }\n    }\n  }\n\n  return withCurrentUser(Wrapper);\n}\n","var api = require(\"!../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../../node_modules/postcss-loader/src/index.js??postcss!./ManualProjectCreate.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".manual-project-create{max-width:700px}.manual-project-create .button{margin-top:8px}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","var api = require(\"!../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../../node_modules/postcss-loader/src/index.js??postcss!./style.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"#create-project{padding-top:0!important}#create-project header{padding-top:20px;background-color:#f3f3f3;position:-webkit-sticky;position:sticky;top:48px;z-index:50}.create-project-manual{display:flex!important;justify-content:space-between}.create-project-import-bbs .open .boxed-group-header{border-bottom:1px solid #e6e6e6}.create-project-import-bbs .boxed-group-inner{padding-top:24px}.create-project-import-bbs-repo{width:250px;min-height:40px}.create-project-github-repository{box-sizing:border-box;width:33.33%}.create-project-github-repository .notice{display:block;position:absolute}.create-project-github-repository .notice svg{color:#0a0}.create-project-import-gitlab table>tbody>tr>td{vertical-align:middle}.create-project-import-gitlab .project-name,.create-project-import-gitlab .project-path{max-width:400px}.create-project-import-gitlab .sq-project-link{max-width:300px}.create-project-import-gitlab .already-set-up svg{color:#0a0}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { get, getJSON, post, postJSON } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport {\n  BitbucketProject,\n  BitbucketRepository,\n  GithubOrganization,\n  GithubRepository,\n  GitlabProject\n} from '../types/alm-integration';\nimport { ProjectBase } from './components';\n\nexport function setAlmPersonalAccessToken(almSetting: string, pat: string): Promise<void> {\n  return post('/api/alm_integrations/set_pat', { almSetting, pat }).catch(throwGlobalError);\n}\n\nexport function checkPersonalAccessTokenIsValid(almSetting: string): Promise<boolean> {\n  return get('/api/alm_integrations/check_pat', { almSetting })\n    .then(() => true)\n    .catch((response: Response) => {\n      if (response.status === 400) {\n        return false;\n      } else {\n        return throwGlobalError(response);\n      }\n    });\n}\n\nexport function getBitbucketServerProjects(\n  almSetting: string\n): Promise<{ projects: BitbucketProject[] }> {\n  return getJSON('/api/alm_integrations/list_bitbucketserver_projects', { almSetting });\n}\n\nexport function getBitbucketServerRepositories(\n  almSetting: string,\n  projectName: string\n): Promise<{\n  isLastPage: boolean;\n  repositories: BitbucketRepository[];\n}> {\n  return getJSON('/api/alm_integrations/search_bitbucketserver_repos', {\n    almSetting,\n    projectName\n  });\n}\n\nexport function importBitbucketServerProject(\n  almSetting: string,\n  projectKey: string,\n  repositorySlug: string\n): Promise<{ project: ProjectBase }> {\n  return postJSON('/api/alm_integrations/import_bitbucketserver_project', {\n    almSetting,\n    projectKey,\n    repositorySlug\n  }).catch(throwGlobalError);\n}\n\nexport function searchForBitbucketServerRepositories(\n  almSetting: string,\n  repositoryName: string\n): Promise<{\n  isLastPage: boolean;\n  repositories: BitbucketRepository[];\n}> {\n  return getJSON('/api/alm_integrations/search_bitbucketserver_repos', {\n    almSetting,\n    repositoryName\n  });\n}\n\nexport function getGithubClientId(almSetting: string): Promise<{ clientId?: string }> {\n  return getJSON('/api/alm_integrations/get_github_client_id', { almSetting });\n}\n\nexport function importGithubRepository(\n  almSetting: string,\n  organization: string,\n  repositoryKey: string\n): Promise<{ project: ProjectBase }> {\n  return postJSON('/api/alm_integrations/import_github_project', {\n    almSetting,\n    organization,\n    repositoryKey\n  }).catch(throwGlobalError);\n}\n\nexport function getGithubOrganizations(\n  almSetting: string,\n  token: string\n): Promise<{ organizations: GithubOrganization[] }> {\n  return getJSON('/api/alm_integrations/list_github_organizations', {\n    almSetting,\n    token\n  }).catch((response?: Response) => {\n    if (response && response.status !== 400) {\n      throwGlobalError(response);\n    }\n  });\n}\n\nexport function getGithubRepositories(data: {\n  almSetting: string;\n  organization: string;\n  pageSize: number;\n  page?: number;\n  query?: string;\n}): Promise<{ repositories: GithubRepository[]; paging: T.Paging }> {\n  const { almSetting, organization, pageSize, page = 1, query } = data;\n  return getJSON('/api/alm_integrations/list_github_repositories', {\n    almSetting,\n    organization,\n    p: page,\n    ps: pageSize,\n    q: query || undefined\n  }).catch(throwGlobalError);\n}\n\nexport function getGitlabProjects(data: {\n  almSetting: string;\n  page?: number;\n  pageSize?: number;\n  query?: string;\n}): Promise<{ projects: GitlabProject[]; projectsPaging: T.Paging }> {\n  const { almSetting, pageSize, page, query } = data;\n  return getJSON('/api/alm_integrations/search_gitlab_repos', {\n    almSetting,\n    projectName: query || undefined,\n    p: page,\n    ps: pageSize\n  })\n    .then(({ repositories, paging }) => ({ projects: repositories, projectsPaging: paging }))\n    .catch(throwGlobalError);\n}\n\nexport function importGitlabProject(data: {\n  almSetting: string;\n  gitlabProjectId: string;\n}): Promise<{ project: ProjectBase }> {\n  const { almSetting, gitlabProjectId } = data;\n  return postJSON('/api/alm_integrations/import_gitlab_project', {\n    almSetting,\n    gitlabProjectId\n  }).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport enum CreateProjectModes {\n  Manual = 'manual',\n  BitbucketServer = 'bitbucket',\n  GitHub = 'github',\n  GitLab = 'gitlab'\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport BoxedGroupAccordion from 'sonar-ui-common/components/controls/BoxedGroupAccordion';\nimport Radio from 'sonar-ui-common/components/controls/Radio';\nimport CheckIcon from 'sonar-ui-common/components/icons/CheckIcon';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { colors } from '../../../app/theme';\nimport { getProjectUrl } from '../../../helpers/urls';\nimport { BitbucketProject, BitbucketRepository } from '../../../types/alm-integration';\nimport { CreateProjectModes } from './types';\n\nexport interface BitbucketProjectAccordionProps {\n  disableRepositories: boolean;\n  onClick?: () => void;\n  onSelectRepository: (repo: BitbucketRepository) => void;\n  open: boolean;\n  project?: BitbucketProject;\n  repositories: BitbucketRepository[];\n  selectedRepository?: BitbucketRepository;\n  showingAllRepositories: boolean;\n}\n\nexport default function BitbucketProjectAccordion(props: BitbucketProjectAccordionProps) {\n  const {\n    disableRepositories,\n    open,\n    project,\n    repositories,\n    selectedRepository,\n    showingAllRepositories\n  } = props;\n\n  const repositoryCount = repositories.length;\n\n  const title = project?.name ?? translate('search_results');\n\n  return (\n    <BoxedGroupAccordion\n      className={classNames('big-spacer-bottom', {\n        open,\n        'not-clickable': !props.onClick,\n        'no-hover': !props.onClick\n      })}\n      onClick={\n        props.onClick\n          ? props.onClick\n          : () => {\n              /* noop */\n            }\n      }\n      open={open}\n      title={<h3>{title}</h3>}>\n      {open && (\n        <>\n          <div className=\"display-flex-wrap\">\n            {repositoryCount === 0 && (\n              <Alert variant=\"warning\">\n                <FormattedMessage\n                  defaultMessage={translate('onboarding.create_project.no_bbs_repos')}\n                  id=\"onboarding.create_project.no_bbs_repos\"\n                  values={{\n                    link: (\n                      <Link\n                        to={{\n                          pathname: '/projects/create',\n                          query: { mode: CreateProjectModes.BitbucketServer, resetPat: 1 }\n                        }}>\n                        {translate('onboarding.create_project.update_your_token')}\n                      </Link>\n                    )\n                  }}\n                />\n              </Alert>\n            )}\n\n            {repositories.map(repo =>\n              repo.sqProjectKey ? (\n                <div\n                  className=\"display-flex-start spacer-right spacer-bottom create-project-import-bbs-repo\"\n                  key={repo.id}>\n                  <CheckIcon className=\"spacer-right\" fill={colors.green} size={14} />\n                  <div className=\"overflow-hidden\">\n                    <div className=\"little-spacer-bottom text-ellipsis\">\n                      <strong title={repo.name}>\n                        <Link to={getProjectUrl(repo.sqProjectKey)}>{repo.name}</Link>\n                      </strong>\n                    </div>\n                    <em>{translate('onboarding.create_project.repository_imported')}</em>\n                  </div>\n                </div>\n              ) : (\n                <Radio\n                  checked={selectedRepository?.id === repo.id}\n                  className={classNames(\n                    'display-flex-start spacer-right spacer-bottom create-project-import-bbs-repo overflow-hidden',\n                    {\n                      disabled: disableRepositories,\n                      'text-muted': disableRepositories,\n                      'link-no-underline': disableRepositories\n                    }\n                  )}\n                  key={repo.id}\n                  onCheck={() => props.onSelectRepository(repo)}\n                  value={String(repo.id)}>\n                  <strong className=\"text-ellipsis\" title={repo.name}>\n                    {repo.name}\n                  </strong>\n                </Radio>\n              )\n            )}\n          </div>\n\n          {!showingAllRepositories && repositoryCount > 0 && (\n            <Alert variant=\"warning\">\n              {translateWithParameters(\n                'onboarding.create_project.only_showing_X_first_repos',\n                repositoryCount\n              )}\n            </Alert>\n          )}\n        </>\n      )}\n    </BoxedGroupAccordion>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { uniq, without } from 'lodash';\nimport * as React from 'react';\nimport { ButtonLink } from 'sonar-ui-common/components/controls/buttons';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport {\n  BitbucketProject,\n  BitbucketProjectRepositories,\n  BitbucketRepository\n} from '../../../types/alm-integration';\nimport BitbucketProjectAccordion from './BitbucketProjectAccordion';\n\nexport interface BitbucketRepositoriesProps {\n  disableRepositories: boolean;\n  onSelectRepository: (repo: BitbucketRepository) => void;\n  projects: BitbucketProject[];\n  projectRepositories: BitbucketProjectRepositories;\n  selectedRepository?: BitbucketRepository;\n}\n\nexport default function BitbucketRepositories(props: BitbucketRepositoriesProps) {\n  const { disableRepositories, projects, projectRepositories, selectedRepository } = props;\n\n  const [openProjectKeys, setOpenProjectKeys] = React.useState(\n    projects.length > 0 ? [projects[0].key] : []\n  );\n\n  const allAreExpanded = projects.length <= openProjectKeys.length;\n\n  const handleClick = (isOpen: boolean, projectKey: string) => {\n    setOpenProjectKeys(\n      isOpen ? without(openProjectKeys, projectKey) : uniq([...openProjectKeys, projectKey])\n    );\n  };\n\n  return (\n    <>\n      <div className=\"overflow-hidden spacer-bottom\">\n        <ButtonLink\n          className=\"pull-right\"\n          onClick={() => setOpenProjectKeys(allAreExpanded ? [] : projects.map(p => p.key))}>\n          {allAreExpanded ? translate('collapse_all') : translate('expand_all')}\n        </ButtonLink>\n      </div>\n\n      {projects.map(project => {\n        const isOpen = openProjectKeys.includes(project.key);\n        const { allShown, repositories = [] } = projectRepositories[project.key] || {};\n\n        return (\n          <BitbucketProjectAccordion\n            disableRepositories={disableRepositories}\n            key={project.key}\n            onClick={() => handleClick(isOpen, project.key)}\n            onSelectRepository={props.onSelectRepository}\n            open={isOpen}\n            project={project}\n            repositories={repositories}\n            selectedRepository={selectedRepository}\n            showingAllRepositories={allShown}\n          />\n        );\n      })}\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { uniq } from 'lodash';\nimport * as React from 'react';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { isDefined } from 'sonar-ui-common/helpers/types';\nimport { BitbucketProject, BitbucketRepository } from '../../../types/alm-integration';\nimport BitbucketProjectAccordion from './BitbucketProjectAccordion';\n\nexport interface BitbucketSearchResultsProps {\n  disableRepositories: boolean;\n  onSelectRepository: (repo: BitbucketRepository) => void;\n  projects: BitbucketProject[];\n  searching: boolean;\n  searchResults?: BitbucketRepository[];\n  selectedRepository?: BitbucketRepository;\n}\n\nexport default function BitbucketSearchResults(props: BitbucketSearchResultsProps) {\n  const {\n    disableRepositories,\n    projects,\n    searching,\n    searchResults = [],\n    selectedRepository\n  } = props;\n\n  if (searchResults.length === 0 && !searching) {\n    return (\n      <Alert className=\"big-spacer-top\" variant=\"warning\">\n        {translate('onboarding.create_project.no_bbs_repos.filter')}\n      </Alert>\n    );\n  }\n\n  const filteredProjects = uniq(\n    searchResults.map(r => projects.find(p => p.key === r.projectKey)).filter(isDefined)\n  );\n\n  return (\n    <div className=\"big-spacer-top\">\n      <DeferredSpinner loading={searching}>\n        {filteredProjects.length === 0 && searchResults.length > 0 && (\n          <BitbucketProjectAccordion\n            disableRepositories={disableRepositories}\n            onSelectRepository={props.onSelectRepository}\n            open={true}\n            repositories={searchResults}\n            selectedRepository={selectedRepository}\n            showingAllRepositories={true}\n          />\n        )}\n\n        {filteredProjects.map(project => {\n          const repositories = searchResults.filter(r => r.projectKey === project.key);\n\n          return (\n            <BitbucketProjectAccordion\n              disableRepositories={disableRepositories}\n              key={project.key}\n              onSelectRepository={props.onSelectRepository}\n              open={true}\n              project={project}\n              repositories={repositories}\n              selectedRepository={selectedRepository}\n              showingAllRepositories={true}\n            />\n          );\n        })}\n      </DeferredSpinner>\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport SearchBox from 'sonar-ui-common/components/controls/SearchBox';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport {\n  BitbucketProject,\n  BitbucketProjectRepositories,\n  BitbucketRepository\n} from '../../../types/alm-integration';\nimport BitbucketRepositories from './BitbucketRepositories';\nimport BitbucketSearchResults from './BitbucketSearchResults';\nimport { CreateProjectModes } from './types';\n\nexport interface BitbucketImportRepositoryFormProps {\n  disableRepositories: boolean;\n  onSearch: (query: string) => void;\n  onSelectRepository: (repo: BitbucketRepository) => void;\n  projects?: BitbucketProject[];\n  projectRepositories?: BitbucketProjectRepositories;\n  searching: boolean;\n  searchResults?: BitbucketRepository[];\n  selectedRepository?: BitbucketRepository;\n}\n\nexport default function BitbucketImportRepositoryForm(props: BitbucketImportRepositoryFormProps) {\n  const {\n    disableRepositories,\n    projects = [],\n    projectRepositories = {},\n    searchResults,\n    searching,\n    selectedRepository\n  } = props;\n\n  if (projects.length === 0) {\n    return (\n      <Alert className=\"spacer-top\" variant=\"warning\">\n        <FormattedMessage\n          defaultMessage={translate('onboarding.create_project.no_bbs_projects')}\n          id=\"onboarding.create_project.no_bbs_projects\"\n          values={{\n            link: (\n              <Link\n                to={{\n                  pathname: '/projects/create',\n                  query: { mode: CreateProjectModes.BitbucketServer, resetPat: 1 }\n                }}>\n                {translate('onboarding.create_project.update_your_token')}\n              </Link>\n            )\n          }}\n        />\n      </Alert>\n    );\n  }\n\n  return (\n    <div className=\"create-project-import-bbs\">\n      <SearchBox\n        onChange={props.onSearch}\n        placeholder={translate('onboarding.create_project.search_repositories_by_name')}\n      />\n\n      {searching || searchResults ? (\n        <BitbucketSearchResults\n          disableRepositories={disableRepositories}\n          onSelectRepository={props.onSelectRepository}\n          projects={projects}\n          searchResults={searchResults}\n          searching={searching}\n          selectedRepository={selectedRepository}\n        />\n      ) : (\n        <BitbucketRepositories\n          disableRepositories={disableRepositories}\n          onSelectRepository={props.onSelectRepository}\n          projectRepositories={projectRepositories}\n          projects={projects}\n          selectedRepository={selectedRepository}\n        />\n      )}\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\n\nexport interface CreateProjectPageHeaderProps {\n  additionalActions?: React.ReactNode;\n  title: React.ReactNode;\n}\n\nexport default function CreateProjectPageHeader(props: CreateProjectPageHeaderProps) {\n  const { additionalActions, title } = props;\n\n  return (\n    <header className=\"huge-spacer-bottom bordered-bottom overflow-hidden\">\n      <h1 className=\"pull-left huge big-spacer-bottom\">{title}</h1>\n\n      {additionalActions}\n    </header>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport ValidationInput from 'sonar-ui-common/components/controls/ValidationInput';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getBaseUrl } from 'sonar-ui-common/helpers/urls';\nimport { AlmKeys, AlmSettingsInstance } from '../../../types/alm-settings';\n\nexport interface PersonalAccessTokenFormProps {\n  almSetting: AlmSettingsInstance;\n  onPersonalAccessTokenCreate: (token: string) => void;\n  submitting?: boolean;\n  validationFailed: boolean;\n}\n\nfunction getPatUrl(alm: AlmKeys, url: string) {\n  if (alm === AlmKeys.Bitbucket) {\n    return `${url.replace(/\\/$/, '')}/plugins/servlet/access-tokens/add`;\n  } else {\n    // GitLab\n    return url.endsWith('/api/v4')\n      ? `${url.replace('/api/v4', '').replace(/\\/$/, '')}/profile/personal_access_tokens`\n      : 'https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#creating-a-personal-access-token';\n  }\n}\n\nexport default function PersonalAccessTokenForm(props: PersonalAccessTokenFormProps) {\n  const {\n    almSetting: { alm, url },\n    submitting = false,\n    validationFailed\n  } = props;\n  const [touched, setTouched] = React.useState(false);\n\n  React.useEffect(() => {\n    setTouched(false);\n  }, [submitting]);\n\n  const isInvalid = validationFailed && !touched;\n\n  return (\n    <div className=\"display-flex-start\">\n      <form\n        className=\"width-50\"\n        onSubmit={(e: React.SyntheticEvent<HTMLFormElement>) => {\n          e.preventDefault();\n          const value = new FormData(e.currentTarget).get('personal_access_token') as string;\n          props.onPersonalAccessTokenCreate(value);\n        }}>\n        <h2 className=\"big\">{translate('onboarding.create_project.pat_form.title', alm)}</h2>\n        <p className=\"big-spacer-top big-spacer-bottom\">\n          {translate('onboarding.create_project.pat_form.help', alm)}\n        </p>\n\n        <ValidationInput\n          error={isInvalid ? translate('onboarding.create_project.pat_incorrect', alm) : undefined}\n          id=\"personal_access_token\"\n          isInvalid={isInvalid}\n          isValid={false}\n          label={translate('onboarding.create_project.enter_pat')}\n          required={true}>\n          <input\n            autoFocus={true}\n            className={classNames('input-super-large', {\n              'is-invalid': isInvalid\n            })}\n            id=\"personal_access_token\"\n            minLength={1}\n            name=\"personal_access_token\"\n            onChange={() => {\n              setTouched(true);\n            }}\n            type=\"text\"\n          />\n        </ValidationInput>\n\n        <SubmitButton disabled={isInvalid || submitting || !touched}>\n          {translate('save')}\n        </SubmitButton>\n        <DeferredSpinner className=\"spacer-left\" loading={submitting} />\n      </form>\n\n      <Alert className=\"big-spacer-left width-50\" display=\"block\" variant=\"info\">\n        <h3>{translate('onboarding.create_project.pat_help.title')}</h3>\n\n        <p className=\"big-spacer-top big-spacer-bottom\">\n          <FormattedMessage\n            id=\"onboarding.create_project.pat_help.instructions\"\n            defaultMessage={translate('onboarding.create_project.pat_help.instructions')}\n            values={{ alm: translate('onboarding.alm', alm) }}\n          />\n        </p>\n\n        {url && (\n          <div className=\"text-middle\">\n            <img\n              alt=\"\" // Should be ignored by screen readers\n              className=\"spacer-right\"\n              height=\"16\"\n              src={`${getBaseUrl()}/images/alm/${alm}.svg`}\n            />\n            <a href={getPatUrl(alm, url)} rel=\"noopener noreferrer\" target=\"_blank\">\n              {translate('onboarding.create_project.pat_help.link')}\n            </a>\n          </div>\n        )}\n\n        <p className=\"big-spacer-top big-spacer-bottom\">\n          {translate('onboarding.create_project.pat_help.instructions2', alm)}\n        </p>\n\n        <ul>\n          {alm === AlmKeys.Bitbucket && (\n            <>\n              <li>\n                <FormattedMessage\n                  defaultMessage={translate(\n                    'onboarding.create_project.pat_help.bbs_permission_projects'\n                  )}\n                  id=\"onboarding.create_project.pat_help.bbs_permission_projects\"\n                  values={{\n                    perm: (\n                      <strong>\n                        {translate('onboarding.create_project.pat_help.read_permission')}\n                      </strong>\n                    )\n                  }}\n                />\n              </li>\n              <li>\n                <FormattedMessage\n                  defaultMessage={translate(\n                    'onboarding.create_project.pat_help.bbs_permission_repos'\n                  )}\n                  id=\"onboarding.create_project.pat_help.bbs_permission_repos\"\n                  values={{\n                    perm: (\n                      <strong>\n                        {translate('onboarding.create_project.pat_help.read_permission')}\n                      </strong>\n                    )\n                  }}\n                />\n              </li>\n            </>\n          )}\n          {alm === AlmKeys.GitLab && (\n            <li className=\"spacer-bottom\">\n              <strong>\n                {translate('onboarding.create_project.pat_help.gitlab.read_api_permission')}\n              </strong>\n            </li>\n          )}\n        </ul>\n      </Alert>\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { AlmKeys } from '../../../types/alm-settings';\nimport { ALM_INTEGRATION } from '../../settings/components/AdditionalCategoryKeys';\n\nexport interface WrongBindingCountAlertProps {\n  alm: AlmKeys;\n  canAdmin: boolean;\n}\n\nexport default function WrongBindingCountAlert(props: WrongBindingCountAlertProps) {\n  const { alm, canAdmin } = props;\n\n  return (\n    <Alert variant=\"error\">\n      {canAdmin ? (\n        <FormattedMessage\n          defaultMessage={translate('onboarding.create_project.wrong_binding_count.admin')}\n          id=\"onboarding.create_project.wrong_binding_count.admin\"\n          values={{\n            alm: translate('onboarding.alm', alm),\n            url: (\n              <Link\n                to={{\n                  pathname: '/admin/settings',\n                  query: { category: ALM_INTEGRATION }\n                }}>\n                {translate('settings.page')}\n              </Link>\n            )\n          }}\n        />\n      ) : (\n        <FormattedMessage\n          defaultMessage={translate('onboarding.create_project.wrong_binding_count')}\n          id=\"onboarding.create_project.wrong_binding_count\"\n          values={{\n            alm: translate('onboarding.alm', alm)\n          }}\n        />\n      )}\n    </Alert>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getBaseUrl } from 'sonar-ui-common/helpers/urls';\nimport {\n  BitbucketProject,\n  BitbucketProjectRepositories,\n  BitbucketRepository\n} from '../../../types/alm-integration';\nimport { AlmKeys, AlmSettingsInstance } from '../../../types/alm-settings';\nimport BitbucketImportRepositoryForm from './BitbucketImportRepositoryForm';\nimport CreateProjectPageHeader from './CreateProjectPageHeader';\nimport PersonalAccessTokenForm from './PersonalAccessTokenForm';\nimport WrongBindingCountAlert from './WrongBindingCountAlert';\n\nexport interface BitbucketProjectCreateRendererProps {\n  bitbucketSetting?: AlmSettingsInstance;\n  canAdmin?: boolean;\n  importing: boolean;\n  loading: boolean;\n  onImportRepository: () => void;\n  onSearch: (query: string) => void;\n  onSelectRepository: (repo: BitbucketRepository) => void;\n  onPersonalAccessTokenCreate: (token: string) => void;\n  onProjectCreate: (projectKeys: string[]) => void;\n  projects?: BitbucketProject[];\n  projectRepositories?: BitbucketProjectRepositories;\n  searching: boolean;\n  searchResults?: BitbucketRepository[];\n  selectedRepository?: BitbucketRepository;\n  showPersonalAccessTokenForm?: boolean;\n  submittingToken?: boolean;\n  tokenValidationFailed: boolean;\n}\n\nexport default function BitbucketProjectCreateRenderer(props: BitbucketProjectCreateRendererProps) {\n  const {\n    bitbucketSetting,\n    canAdmin,\n    importing,\n    loading,\n    projects,\n    projectRepositories,\n    selectedRepository,\n    searching,\n    searchResults,\n    showPersonalAccessTokenForm,\n    submittingToken,\n    tokenValidationFailed\n  } = props;\n\n  return (\n    <>\n      <CreateProjectPageHeader\n        additionalActions={\n          !showPersonalAccessTokenForm && (\n            <div className=\"display-flex-center pull-right\">\n              <DeferredSpinner className=\"spacer-right\" loading={importing} />\n              <Button\n                className=\"button-large button-primary\"\n                disabled={!selectedRepository || importing}\n                onClick={props.onImportRepository}>\n                {translate('onboarding.create_project.import_selected_repo')}\n              </Button>\n            </div>\n          )\n        }\n        title={\n          <span className=\"text-middle\">\n            <img\n              alt=\"\" // Should be ignored by screen readers\n              className=\"spacer-right\"\n              height=\"24\"\n              src={`${getBaseUrl()}/images/alm/bitbucket.svg`}\n            />\n            {translate('onboarding.create_project.from_bbs')}\n          </span>\n        }\n      />\n\n      {loading && <i className=\"spinner\" />}\n\n      {!loading && !bitbucketSetting && (\n        <WrongBindingCountAlert alm={AlmKeys.Bitbucket} canAdmin={!!canAdmin} />\n      )}\n\n      {!loading &&\n        bitbucketSetting &&\n        (showPersonalAccessTokenForm ? (\n          <PersonalAccessTokenForm\n            almSetting={bitbucketSetting}\n            onPersonalAccessTokenCreate={props.onPersonalAccessTokenCreate}\n            submitting={submittingToken}\n            validationFailed={tokenValidationFailed}\n          />\n        ) : (\n          <BitbucketImportRepositoryForm\n            disableRepositories={importing}\n            onSearch={props.onSearch}\n            onSelectRepository={props.onSelectRepository}\n            projectRepositories={projectRepositories}\n            projects={projects}\n            searchResults={searchResults}\n            searching={searching}\n            selectedRepository={selectedRepository}\n          />\n        ))}\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n\nexport const PROJECT_NAME_MAX_LEN = 255;\n\nexport const DEFAULT_BBS_PAGE_SIZE = 25;\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { WithRouterProps } from 'react-router';\nimport {\n  checkPersonalAccessTokenIsValid,\n  getBitbucketServerProjects,\n  getBitbucketServerRepositories,\n  importBitbucketServerProject,\n  searchForBitbucketServerRepositories,\n  setAlmPersonalAccessToken\n} from '../../../api/alm-integrations';\nimport {\n  BitbucketProject,\n  BitbucketProjectRepositories,\n  BitbucketRepository\n} from '../../../types/alm-integration';\nimport { AlmSettingsInstance } from '../../../types/alm-settings';\nimport BitbucketCreateProjectRenderer from './BitbucketProjectCreateRenderer';\nimport { DEFAULT_BBS_PAGE_SIZE } from './constants';\n\ninterface Props extends Pick<WithRouterProps, 'location'> {\n  canAdmin: boolean;\n  bitbucketSettings: AlmSettingsInstance[];\n  loadingBindings: boolean;\n  onProjectCreate: (projectKeys: string[]) => void;\n}\n\ninterface State {\n  bitbucketSetting?: AlmSettingsInstance;\n  importing: boolean;\n  loading: boolean;\n  patIsValid?: boolean;\n  projects?: BitbucketProject[];\n  projectRepositories?: BitbucketProjectRepositories;\n  searching: boolean;\n  searchResults?: BitbucketRepository[];\n  selectedRepository?: BitbucketRepository;\n  submittingToken?: boolean;\n  tokenValidationFailed: boolean;\n}\n\nexport default class BitbucketProjectCreate extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      // For now, we only handle a single instance. So we always use the first\n      // one from the list.\n      bitbucketSetting: props.bitbucketSettings[0],\n      importing: false,\n      loading: false,\n      searching: false,\n      tokenValidationFailed: false\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchInitialData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.bitbucketSettings.length === 0 && this.props.bitbucketSettings.length > 0) {\n      this.setState({ bitbucketSetting: this.props.bitbucketSettings[0] }, () =>\n        this.fetchInitialData()\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchInitialData = async () => {\n    this.setState({ loading: true });\n\n    const patIsValid = await this.checkPersonalAccessToken().catch(() => false);\n\n    let projects;\n    if (patIsValid) {\n      projects = await this.fetchBitbucketProjects().catch(() => undefined);\n    }\n\n    let projectRepositories;\n    if (projects && projects.length > 0) {\n      projectRepositories = await this.fetchBitbucketRepositories(projects).catch(() => undefined);\n    }\n\n    if (this.mounted) {\n      this.setState({\n        patIsValid,\n        projects,\n        projectRepositories,\n        loading: false\n      });\n    }\n  };\n\n  checkPersonalAccessToken = () => {\n    const { bitbucketSetting } = this.state;\n\n    if (!bitbucketSetting) {\n      return Promise.resolve(false);\n    }\n\n    return checkPersonalAccessTokenIsValid(bitbucketSetting.key);\n  };\n\n  fetchBitbucketProjects = (): Promise<BitbucketProject[] | undefined> => {\n    const { bitbucketSetting } = this.state;\n\n    if (!bitbucketSetting) {\n      return Promise.resolve(undefined);\n    }\n\n    return getBitbucketServerProjects(bitbucketSetting.key).then(({ projects }) => projects);\n  };\n\n  fetchBitbucketRepositories = (\n    projects: BitbucketProject[]\n  ): Promise<BitbucketProjectRepositories | undefined> => {\n    const { bitbucketSetting } = this.state;\n\n    if (!bitbucketSetting) {\n      return Promise.resolve(undefined);\n    }\n\n    return Promise.all(\n      projects.map(p => {\n        return getBitbucketServerRepositories(bitbucketSetting.key, p.name).then(\n          ({ isLastPage, repositories }) => {\n            // Because the WS uses the project name rather than its key to find\n            // repositories, we can match more repositories than we expect. For\n            // example, p.name = \"A1\" would find repositories for projects \"A1\",\n            // \"A10\", \"A11\", etc. This is a limitation of BBS. To make sure we\n            // don't display incorrect information, filter on the project key.\n            const filteredRepositories = repositories.filter(r => r.projectKey === p.key);\n\n            // And because of the above, the \"isLastPage\" cannot be relied upon\n            // either. This one is impossible to get 100% for now. We can only\n            // make some assumptions: by default, the page size for BBS is 25\n            // (this is not part of the payload, so we don't know the actual\n            // number; but changing this implies changing some advanced config,\n            // so it's not likely). If the filtered repos is larger than this\n            // number AND isLastPage is false, we'll keep it at false.\n            // Otherwise, we assume it's true.\n            const realIsLastPage =\n              isLastPage || filteredRepositories.length < DEFAULT_BBS_PAGE_SIZE;\n\n            return {\n              repositories: filteredRepositories,\n              isLastPage: realIsLastPage,\n              projectKey: p.key\n            };\n          }\n        );\n      })\n    ).then(results => {\n      return results.reduce(\n        (acc: BitbucketProjectRepositories, { isLastPage, projectKey, repositories }) => {\n          return { ...acc, [projectKey]: { allShown: isLastPage, repositories } };\n        },\n        {}\n      );\n    });\n  };\n\n  handlePersonalAccessTokenCreate = (token: string) => {\n    const { bitbucketSetting } = this.state;\n\n    if (!bitbucketSetting || token.length < 1) {\n      return;\n    }\n\n    this.setState({ submittingToken: true, tokenValidationFailed: false });\n    setAlmPersonalAccessToken(bitbucketSetting.key, token)\n      .then(this.checkPersonalAccessToken)\n      .then(patIsValid => {\n        if (this.mounted) {\n          this.setState({ submittingToken: false, patIsValid, tokenValidationFailed: !patIsValid });\n          if (patIsValid) {\n            this.fetchInitialData();\n          }\n        }\n      })\n      .catch(() => {\n        if (this.mounted) {\n          this.setState({ submittingToken: false });\n        }\n      });\n  };\n\n  handleImportRepository = () => {\n    const { bitbucketSetting, selectedRepository } = this.state;\n\n    if (!bitbucketSetting || !selectedRepository) {\n      return;\n    }\n\n    this.setState({ importing: true });\n    importBitbucketServerProject(\n      bitbucketSetting.key,\n      selectedRepository.projectKey,\n      selectedRepository.slug\n    )\n      .then(({ project: { key } }) => {\n        if (this.mounted) {\n          this.setState({ importing: false });\n          this.props.onProjectCreate([key]);\n        }\n      })\n      .catch(() => {\n        if (this.mounted) {\n          this.setState({ importing: false });\n        }\n      });\n  };\n\n  handleSearch = (query: string) => {\n    const { bitbucketSetting } = this.state;\n\n    if (!bitbucketSetting) {\n      return;\n    }\n\n    if (!query) {\n      this.setState({ searching: false, searchResults: undefined, selectedRepository: undefined });\n      return;\n    }\n\n    this.setState({ searching: true, selectedRepository: undefined });\n    searchForBitbucketServerRepositories(bitbucketSetting.key, query)\n      .then(({ repositories }) => {\n        if (this.mounted) {\n          this.setState({ searching: false, searchResults: repositories });\n        }\n      })\n      .catch(() => {\n        if (this.mounted) {\n          this.setState({ searching: false });\n        }\n      });\n  };\n\n  handleSelectRepository = (selectedRepository: BitbucketRepository) => {\n    this.setState({ selectedRepository });\n  };\n\n  render() {\n    const { canAdmin, loadingBindings, location } = this.props;\n    const {\n      bitbucketSetting,\n      importing,\n      loading,\n      patIsValid,\n      projectRepositories,\n      projects,\n      searching,\n      searchResults,\n      selectedRepository,\n      submittingToken,\n      tokenValidationFailed\n    } = this.state;\n\n    return (\n      <BitbucketCreateProjectRenderer\n        bitbucketSetting={bitbucketSetting}\n        canAdmin={canAdmin}\n        importing={importing}\n        loading={loading || loadingBindings}\n        onImportRepository={this.handleImportRepository}\n        onPersonalAccessTokenCreate={this.handlePersonalAccessTokenCreate}\n        onProjectCreate={this.props.onProjectCreate}\n        onSearch={this.handleSearch}\n        onSelectRepository={this.handleSelectRepository}\n        projectRepositories={projectRepositories}\n        projects={projects}\n        searchResults={searchResults}\n        searching={searching}\n        selectedRepository={selectedRepository}\n        showPersonalAccessTokenForm={!patIsValid || Boolean(location.query.resetPat)}\n        submittingToken={submittingToken}\n        tokenValidationFailed={tokenValidationFailed}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { getBaseUrl } from 'sonar-ui-common/helpers/urls';\nimport { AlmKeys } from '../../../types/alm-settings';\nimport { CreateProjectModes } from './types';\n\nexport interface CreateProjectModeSelectionProps {\n  almCounts: { [key in AlmKeys]: number };\n  loadingBindings: boolean;\n  onSelectMode: (mode: CreateProjectModes) => void;\n}\n\nfunction renderAlmOption(\n  props: CreateProjectModeSelectionProps,\n  alm: AlmKeys,\n  mode: CreateProjectModes\n) {\n  const { almCounts, loadingBindings } = props;\n\n  const count = almCounts[alm];\n  const disabled = count !== 1 || loadingBindings;\n\n  return (\n    <button\n      className={classNames(\n        'button button-huge big-spacer-left display-flex-column create-project-mode-type-alm',\n        { disabled }\n      )}\n      disabled={disabled}\n      onClick={() => props.onSelectMode(mode)}\n      type=\"button\">\n      <img\n        alt=\"\" // Should be ignored by screen readers\n        height={80}\n        src={`${getBaseUrl()}/images/alm/${alm}.svg`}\n      />\n      <div className=\"medium big-spacer-top\">\n        {translate('onboarding.create_project.select_method', alm)}\n      </div>\n\n      {loadingBindings && (\n        <span>\n          {translate('onboarding.create_project.check_alm_supported')}\n          <i className=\"little-spacer-left spinner\" />\n        </span>\n      )}\n\n      {!loadingBindings && disabled && (\n        <div className=\"text-muted small spacer-top\" style={{ lineHeight: 1.5 }}>\n          {translate('onboarding.create_project.alm_not_configured')}\n          <HelpTooltip\n            className=\"little-spacer-left\"\n            overlay={\n              count === 0\n                ? translate('onboarding.create_project.zero_alm_instances', alm)\n                : `${translate('onboarding.create_project.too_many_alm_instances', alm)} \n                  ${translateWithParameters(\n                    'onboarding.create_project.alm_instances_count_X',\n                    count\n                  )}`\n            }\n          />\n        </div>\n      )}\n    </button>\n  );\n}\n\nexport default function CreateProjectModeSelection(props: CreateProjectModeSelectionProps) {\n  return (\n    <>\n      <header className=\"huge-spacer-top big-spacer-bottom padded\">\n        <h1 className=\"text-center huge big-spacer-bottom\">\n          {translate('my_account.create_new.TRK')}\n        </h1>\n        <p className=\"text-center big\">{translate('onboarding.create_project.select_method')}</p>\n      </header>\n\n      <div className=\"create-project-modes huge-spacer-top display-flex-justify-center\">\n        <button\n          className=\"button button-huge display-flex-column create-project-mode-type-manual\"\n          onClick={() => props.onSelectMode(CreateProjectModes.Manual)}\n          type=\"button\">\n          <img\n            alt=\"\" // Should be ignored by screen readers\n            height={80}\n            src={`${getBaseUrl()}/images/sonarcloud/analysis/manual.svg`}\n          />\n          <div className=\"medium big-spacer-top\">\n            {translate('onboarding.create_project.select_method.manual')}\n          </div>\n        </button>\n\n        {renderAlmOption(props, AlmKeys.Bitbucket, CreateProjectModes.BitbucketServer)}\n        {renderAlmOption(props, AlmKeys.GitHub, CreateProjectModes.GitHub)}\n        {renderAlmOption(props, AlmKeys.GitLab, CreateProjectModes.GitLab)}\n      </div>\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport ListFooter from 'sonar-ui-common/components/controls/ListFooter';\nimport Radio from 'sonar-ui-common/components/controls/Radio';\nimport SearchBox from 'sonar-ui-common/components/controls/SearchBox';\nimport SearchSelect from 'sonar-ui-common/components/controls/SearchSelect';\nimport CheckIcon from 'sonar-ui-common/components/icons/CheckIcon';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getBaseUrl } from '../../../helpers/system';\nimport { GithubOrganization, GithubRepository } from '../../../types/alm-integration';\nimport CreateProjectPageHeader from './CreateProjectPageHeader';\n\nexport interface GitHubProjectCreateRendererProps {\n  canAdmin: boolean;\n  error: boolean;\n  importing: boolean;\n  loadingBindings: boolean;\n  loadingOrganizations: boolean;\n  loadingRepositories: boolean;\n  onImportRepository: () => void;\n  onLoadMore: () => void;\n  onSearch: (q: string) => void;\n  onSelectOrganization: (key: string) => void;\n  onSelectRepository: (key: string) => void;\n  organizations: GithubOrganization[];\n  repositories?: GithubRepository[];\n  repositoryPaging: T.Paging;\n  searchQuery: string;\n  selectedOrganization?: GithubOrganization;\n  selectedRepository?: GithubRepository;\n}\n\nfunction orgToOption({ key, name }: GithubOrganization) {\n  return { value: key, label: name };\n}\n\nconst handleSearch = (organizations: GithubOrganization[]) => (q: string) =>\n  Promise.resolve(organizations.filter(o => !q || o.name.includes(q)).map(orgToOption));\n\nfunction renderRepositoryList(props: GitHubProjectCreateRendererProps) {\n  const {\n    importing,\n    loadingRepositories,\n    repositories,\n    repositoryPaging,\n    searchQuery,\n    selectedOrganization,\n    selectedRepository\n  } = props;\n\n  const isChecked = (repository: GithubRepository) =>\n    !!repository.sqProjectKey ||\n    (!!selectedRepository && selectedRepository.key === repository.key);\n\n  const isDisabled = (repository: GithubRepository) =>\n    !!repository.sqProjectKey || loadingRepositories || importing;\n\n  return (\n    selectedOrganization &&\n    repositories && (\n      <div className=\"boxed-group padded display-flex-wrap\">\n        <div className=\"width-100\">\n          <SearchBox\n            className=\"big-spacer-bottom\"\n            onChange={props.onSearch}\n            placeholder={translate('onboarding.create_project.search_repositories')}\n            value={searchQuery}\n          />\n        </div>\n\n        {repositories.length === 0 ? (\n          <div className=\"padded\">\n            <DeferredSpinner loading={loadingRepositories}>\n              {translate('no_results')}\n            </DeferredSpinner>\n          </div>\n        ) : (\n          repositories.map(r => (\n            <Radio\n              className=\"spacer-top spacer-bottom padded create-project-github-repository\"\n              key={r.key}\n              checked={isChecked(r)}\n              disabled={isDisabled(r)}\n              value={r.key}\n              onCheck={props.onSelectRepository}>\n              <div className=\"big overflow-hidden\" title={r.name}>\n                <div className=\"text-ellipsis\">{r.name}</div>\n                {r.sqProjectKey && (\n                  <em className=\"notice text-muted-2 small display-flex-center\">\n                    {translate('onboarding.create_project.repository_imported')}\n                    <CheckIcon className=\"little-spacer-left\" size={12} />\n                  </em>\n                )}\n              </div>\n            </Radio>\n          ))\n        )}\n\n        <div className=\"display-flex-justify-center width-100\">\n          <ListFooter\n            count={repositories.length}\n            total={repositoryPaging.total}\n            loadMore={props.onLoadMore}\n            loading={loadingRepositories}\n          />\n        </div>\n      </div>\n    )\n  );\n}\n\nexport default function GitHubProjectCreateRenderer(props: GitHubProjectCreateRendererProps) {\n  const {\n    canAdmin,\n    error,\n    importing,\n    loadingBindings,\n    loadingOrganizations,\n    organizations,\n    selectedOrganization,\n    selectedRepository\n  } = props;\n\n  if (loadingBindings) {\n    return <DeferredSpinner />;\n  }\n\n  return (\n    <div>\n      <CreateProjectPageHeader\n        additionalActions={\n          selectedOrganization && (\n            <div className=\"display-flex-center pull-right\">\n              <DeferredSpinner className=\"spacer-right\" loading={importing} />\n              <Button\n                className=\"button-large button-primary\"\n                disabled={!selectedRepository || importing}\n                onClick={props.onImportRepository}>\n                {translate('onboarding.create_project.import_selected_repo')}\n              </Button>\n            </div>\n          )\n        }\n        title={\n          <span className=\"text-middle display-flex-center\">\n            <img\n              alt=\"\" // Should be ignored by screen readers\n              className=\"spacer-right\"\n              height={24}\n              src={`${getBaseUrl()}/images/alm/github.svg`}\n            />\n            {translate('onboarding.create_project.github.title')}\n          </span>\n        }\n      />\n\n      {error ? (\n        <div className=\"display-flex-justify-center\">\n          <div className=\"boxed-group padded width-50 huge-spacer-top\">\n            <h2 className=\"big-spacer-bottom\">\n              {translate('onboarding.create_project.github.warning.title')}\n            </h2>\n            <Alert variant=\"warning\">\n              {canAdmin ? (\n                <FormattedMessage\n                  id=\"onboarding.create_project.github.warning.message_admin\"\n                  defaultMessage={translate(\n                    'onboarding.create_project.github.warning.message_admin'\n                  )}\n                  values={{\n                    link: (\n                      <Link to=\"/admin/settings?category=almintegration\">\n                        {translate('onboarding.create_project.github.warning.message_admin.link')}\n                      </Link>\n                    )\n                  }}\n                />\n              ) : (\n                translate('onboarding.create_project.github.warning.message')\n              )}\n            </Alert>\n          </div>\n        </div>\n      ) : (\n        <DeferredSpinner loading={loadingOrganizations}>\n          <div className=\"form-field\">\n            <label>{translate('onboarding.create_project.github.choose_organization')}</label>\n            {organizations.length > 0 ? (\n              <SearchSelect\n                defaultOptions={organizations.map(orgToOption)}\n                onSearch={handleSearch(organizations)}\n                minimumQueryLength={0}\n                onSelect={({ value }) => props.onSelectOrganization(value)}\n                value={selectedOrganization && orgToOption(selectedOrganization)}\n              />\n            ) : (\n              !loadingOrganizations && (\n                <Alert className=\"spacer-top\" variant=\"error\">\n                  {canAdmin ? (\n                    <FormattedMessage\n                      id=\"onboarding.create_project.github.no_orgs_admin\"\n                      defaultMessage={translate('onboarding.create_project.github.no_orgs_admin')}\n                      values={{\n                        link: (\n                          <Link to=\"/admin/settings?category=almintegration\">\n                            {translate(\n                              'onboarding.create_project.github.warning.message_admin.link'\n                            )}\n                          </Link>\n                        )\n                      }}\n                    />\n                  ) : (\n                    translate('onboarding.create_project.github.no_orgs')\n                  )}\n                </Alert>\n              )\n            )}\n          </div>\n        </DeferredSpinner>\n      )}\n\n      {renderRepositoryList(props)}\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { debounce } from 'lodash';\nimport * as React from 'react';\nimport { WithRouterProps } from 'react-router';\nimport { getHostUrl } from 'sonar-ui-common/helpers/urls';\nimport {\n  getGithubClientId,\n  getGithubOrganizations,\n  getGithubRepositories,\n  importGithubRepository\n} from '../../../api/alm-integrations';\nimport { GithubOrganization, GithubRepository } from '../../../types/alm-integration';\nimport { AlmKeys, AlmSettingsInstance } from '../../../types/alm-settings';\nimport GitHubProjectCreateRenderer from './GitHubProjectCreateRenderer';\n\ninterface Props extends Pick<WithRouterProps, 'location' | 'router'> {\n  canAdmin: boolean;\n  loadingBindings: boolean;\n  onProjectCreate: (projectKeys: string[]) => void;\n  settings: AlmSettingsInstance[];\n}\n\ninterface State {\n  error: boolean;\n  importing: boolean;\n  loadingOrganizations: boolean;\n  loadingRepositories: boolean;\n  organizations: GithubOrganization[];\n  repositoryPaging: T.Paging;\n  repositories: GithubRepository[];\n  searchQuery: string;\n  selectedOrganization?: GithubOrganization;\n  selectedRepository?: GithubRepository;\n  settings?: AlmSettingsInstance;\n}\n\nconst REPOSITORY_PAGE_SIZE = 30;\n\nexport default class GitHubProjectCreate extends React.Component<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      error: false,\n      importing: false,\n      loadingOrganizations: true,\n      loadingRepositories: false,\n      organizations: [],\n      repositories: [],\n      repositoryPaging: { pageSize: REPOSITORY_PAGE_SIZE, total: 0, pageIndex: 1 },\n      searchQuery: '',\n      settings: props.settings[0]\n    };\n\n    this.triggerSearch = debounce(this.triggerSearch, 250);\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n\n    this.initialize();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.settings.length === 0 && this.props.settings.length > 0) {\n      this.setState({ settings: this.props.settings[0] }, () => this.initialize());\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  async initialize() {\n    const { location, router } = this.props;\n    const { settings } = this.state;\n\n    if (!settings || !settings.url) {\n      this.setState({ error: true });\n      return;\n    } else {\n      this.setState({ error: false });\n    }\n\n    const code = location.query?.code;\n\n    try {\n      if (!code) {\n        await this.redirectToGithub(settings);\n      } else {\n        delete location.query.code;\n        router.replace(location);\n        await this.fetchOrganizations(settings, code);\n      }\n    } catch (e) {\n      if (this.mounted) {\n        this.setState({ error: true });\n      }\n    }\n  }\n\n  async redirectToGithub(settings: AlmSettingsInstance) {\n    if (!settings.url) {\n      return;\n    }\n\n    const { clientId } = await getGithubClientId(settings.key);\n\n    if (!clientId) {\n      this.setState({ error: true });\n      return;\n    }\n\n    const queryParams = [\n      { param: 'client_id', value: clientId },\n      { param: 'redirect_uri', value: `${getHostUrl()}/projects/create?mode=${AlmKeys.GitHub}` }\n    ]\n      .map(({ param, value }) => `${param}=${value}`)\n      .join('&');\n\n    let instanceRootUrl;\n    // Strip the api section from the url, since we're not hitting the api here.\n    if (settings.url.includes('/api/v3')) {\n      // GitHub Enterprise\n      instanceRootUrl = settings.url.replace('/api/v3', '');\n    } else {\n      // github.com\n      instanceRootUrl = settings.url.replace('api.', '');\n    }\n\n    // strip the trailing /\n    instanceRootUrl = instanceRootUrl.replace(/\\/$/, '');\n    window.location.replace(`${instanceRootUrl}/login/oauth/authorize?${queryParams}`);\n  }\n\n  async fetchOrganizations(settings: AlmSettingsInstance, token: string) {\n    const { organizations } = await getGithubOrganizations(settings.key, token);\n\n    if (this.mounted) {\n      this.setState({ loadingOrganizations: false, organizations });\n    }\n  }\n\n  async fetchRepositories(params: { organizationKey: string; page?: number; query?: string }) {\n    const { organizationKey, page = 1, query } = params;\n    const { settings } = this.state;\n\n    if (!settings) {\n      this.setState({ error: true });\n      return;\n    }\n\n    this.setState({ loadingRepositories: true });\n\n    try {\n      const data = await getGithubRepositories({\n        almSetting: settings.key,\n        organization: organizationKey,\n        pageSize: REPOSITORY_PAGE_SIZE,\n        page,\n        query\n      });\n\n      if (this.mounted) {\n        this.setState(({ repositories }) => ({\n          loadingRepositories: false,\n          repositoryPaging: data.paging,\n          repositories: page === 1 ? data.repositories : [...repositories, ...data.repositories]\n        }));\n      }\n    } catch (_) {\n      if (this.mounted) {\n        this.setState({\n          loadingRepositories: false,\n          repositoryPaging: { pageIndex: 1, pageSize: REPOSITORY_PAGE_SIZE, total: 0 },\n          repositories: []\n        });\n      }\n    }\n  }\n\n  triggerSearch = (query: string) => {\n    const { selectedOrganization } = this.state;\n    if (selectedOrganization) {\n      this.setState({ selectedRepository: undefined });\n      this.fetchRepositories({ organizationKey: selectedOrganization.key, query });\n    }\n  };\n\n  handleSelectOrganization = (key: string) => {\n    this.setState(({ organizations }) => ({\n      searchQuery: '',\n      selectedRepository: undefined,\n      selectedOrganization: organizations.find(o => o.key === key)\n    }));\n    this.fetchRepositories({ organizationKey: key });\n  };\n\n  handleSelectRepository = (key: string) => {\n    this.setState(({ repositories }) => ({\n      selectedRepository: repositories?.find(r => r.key === key)\n    }));\n  };\n\n  handleSearch = (searchQuery: string) => {\n    this.setState({ searchQuery });\n    this.triggerSearch(searchQuery);\n  };\n\n  handleLoadMore = () => {\n    const { repositoryPaging, searchQuery, selectedOrganization } = this.state;\n\n    if (selectedOrganization) {\n      this.fetchRepositories({\n        organizationKey: selectedOrganization.key,\n        page: repositoryPaging.pageIndex + 1,\n        query: searchQuery\n      });\n    }\n  };\n\n  handleImportRepository = async () => {\n    const { selectedOrganization, selectedRepository, settings } = this.state;\n\n    if (settings && selectedOrganization && selectedRepository) {\n      this.setState({ importing: true });\n\n      try {\n        const { project } = await importGithubRepository(\n          settings.key,\n          selectedOrganization.key,\n          selectedRepository.key\n        );\n\n        this.props.onProjectCreate([project.key]);\n      } finally {\n        if (this.mounted) {\n          this.setState({ importing: false });\n        }\n      }\n    }\n  };\n\n  render() {\n    const { canAdmin, loadingBindings } = this.props;\n    const {\n      error,\n      importing,\n      loadingOrganizations,\n      loadingRepositories,\n      organizations,\n      repositoryPaging,\n      repositories,\n      searchQuery,\n      selectedOrganization,\n      selectedRepository\n    } = this.state;\n\n    return (\n      <GitHubProjectCreateRenderer\n        canAdmin={canAdmin}\n        error={error}\n        importing={importing}\n        loadingBindings={loadingBindings}\n        loadingOrganizations={loadingOrganizations}\n        loadingRepositories={loadingRepositories}\n        onImportRepository={this.handleImportRepository}\n        onLoadMore={this.handleLoadMore}\n        onSearch={this.handleSearch}\n        onSelectOrganization={this.handleSelectOrganization}\n        onSelectRepository={this.handleSelectRepository}\n        organizations={organizations}\n        repositoryPaging={repositoryPaging}\n        searchQuery={searchQuery}\n        repositories={repositories}\n        selectedOrganization={selectedOrganization}\n        selectedRepository={selectedRepository}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport ListFooter from 'sonar-ui-common/components/controls/ListFooter';\nimport SearchBox from 'sonar-ui-common/components/controls/SearchBox';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport CheckIcon from 'sonar-ui-common/components/icons/CheckIcon';\nimport DetachIcon from 'sonar-ui-common/components/icons/DetachIcon';\nimport QualifierIcon from 'sonar-ui-common/components/icons/QualifierIcon';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getProjectUrl } from '../../../helpers/urls';\nimport { GitlabProject } from '../../../types/alm-integration';\nimport { ComponentQualifier } from '../../../types/component';\nimport { CreateProjectModes } from './types';\n\nexport interface GitlabProjectSelectionFormProps {\n  importingGitlabProjectId?: string;\n  loadingMore: boolean;\n  onImport: (gitlabProjectId: string) => void;\n  onLoadMore: () => void;\n  onSearch: (searchQuery: string) => void;\n  projects?: GitlabProject[];\n  projectsPaging: T.Paging;\n  searching: boolean;\n  searchQuery: string;\n}\n\nexport default function GitlabProjectSelectionForm(props: GitlabProjectSelectionFormProps) {\n  const {\n    importingGitlabProjectId,\n    loadingMore,\n    projects = [],\n    projectsPaging,\n    searching,\n    searchQuery\n  } = props;\n\n  if (projects.length === 0 && searchQuery.length === 0 && !searching) {\n    return (\n      <Alert className=\"spacer-top\" variant=\"warning\">\n        <FormattedMessage\n          defaultMessage={translate('onboarding.create_project.gitlab.no_projects')}\n          id=\"onboarding.create_project.gitlab.no_projects\"\n          values={{\n            link: (\n              <Link\n                to={{\n                  pathname: '/projects/create',\n                  query: { mode: CreateProjectModes.GitLab, resetPat: 1 }\n                }}>\n                {translate('onboarding.create_project.update_your_token')}\n              </Link>\n            )\n          }}\n        />\n      </Alert>\n    );\n  }\n\n  return (\n    <div className=\"boxed-group big-padded create-project-import-gitlab\">\n      <SearchBox\n        className=\"spacer\"\n        loading={searching}\n        minLength={3}\n        onChange={props.onSearch}\n        placeholder={translate('onboarding.create_project.gitlab.search_prompt')}\n      />\n\n      <hr />\n\n      {projects.length === 0 ? (\n        <div className=\"padded\">{translate('no_results')}</div>\n      ) : (\n        <table className=\"data zebra zebra-hover\">\n          <tbody>\n            {projects.map(project => (\n              <tr key={project.id}>\n                <td>\n                  <Tooltip overlay={project.slug}>\n                    <strong className=\"project-name display-inline-block text-ellipsis\">\n                      {project.name}\n                    </strong>\n                  </Tooltip>\n                  <br />\n                  <Tooltip overlay={project.pathSlug}>\n                    <span className=\"text-muted project-path display-inline-block text-ellipsis\">\n                      {project.pathName}\n                    </span>\n                  </Tooltip>\n                </td>\n                <td>\n                  <a\n                    className=\"display-inline-flex-center big-spacer-right\"\n                    href={project.url}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\">\n                    <DetachIcon className=\"little-spacer-right\" />\n                    {translate('onboarding.create_project.gitlab.link')}\n                  </a>\n                </td>\n                {project.sqProjectKey ? (\n                  <>\n                    <td>\n                      <span className=\"display-flex-center display-flex-justify-end already-set-up\">\n                        <CheckIcon className=\"little-spacer-right\" size={12} />\n                        {translate('onboarding.create_project.repository_imported')}:\n                      </span>\n                    </td>\n                    <td>\n                      <div className=\"sq-project-link text-ellipsis\">\n                        <Link to={getProjectUrl(project.sqProjectKey)}>\n                          <QualifierIcon\n                            className=\"spacer-right\"\n                            qualifier={ComponentQualifier.Project}\n                          />\n                          {project.sqProjectName}\n                        </Link>\n                      </div>\n                    </td>\n                  </>\n                ) : (\n                  <td colSpan={2} className=\"text-right\">\n                    <Button\n                      disabled={!!importingGitlabProjectId}\n                      onClick={() => props.onImport(project.id)}>\n                      {translate('onboarding.create_project.gitlab.set_up')}\n                      {importingGitlabProjectId === project.id && (\n                        <DeferredSpinner className=\"spacer-left\" />\n                      )}\n                    </Button>\n                  </td>\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n      <ListFooter\n        count={projects.length}\n        loadMore={props.onLoadMore}\n        loading={loadingMore}\n        total={projectsPaging.total}\n      />\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getBaseUrl } from 'sonar-ui-common/helpers/urls';\nimport { GitlabProject } from '../../../types/alm-integration';\nimport { AlmKeys, AlmSettingsInstance } from '../../../types/alm-settings';\nimport CreateProjectPageHeader from './CreateProjectPageHeader';\nimport GitlabProjectSelectionForm from './GitlabProjectSelectionForm';\nimport PersonalAccessTokenForm from './PersonalAccessTokenForm';\nimport WrongBindingCountAlert from './WrongBindingCountAlert';\n\nexport interface GitlabProjectCreateRendererProps {\n  canAdmin?: boolean;\n  importingGitlabProjectId?: string;\n  loading: boolean;\n  loadingMore: boolean;\n  onImport: (gitlabProjectId: string) => void;\n  onLoadMore: () => void;\n  onPersonalAccessTokenCreate: (pat: string) => void;\n  onSearch: (searchQuery: string) => void;\n  projects?: GitlabProject[];\n  projectsPaging: T.Paging;\n  searching: boolean;\n  searchQuery: string;\n  settings?: AlmSettingsInstance;\n  showPersonalAccessTokenForm?: boolean;\n  submittingToken?: boolean;\n  tokenValidationFailed: boolean;\n}\n\nexport default function GitlabProjectCreateRenderer(props: GitlabProjectCreateRendererProps) {\n  const {\n    canAdmin,\n    importingGitlabProjectId,\n    loading,\n    loadingMore,\n    projects,\n    projectsPaging,\n    searching,\n    searchQuery,\n    settings,\n    showPersonalAccessTokenForm,\n    submittingToken,\n    tokenValidationFailed\n  } = props;\n\n  return (\n    <>\n      <CreateProjectPageHeader\n        title={\n          <span className=\"text-middle\">\n            <img\n              alt=\"\" // Should be ignored by screen readers\n              className=\"spacer-right\"\n              height=\"24\"\n              src={`${getBaseUrl()}/images/alm/gitlab.svg`}\n            />\n            {translate('onboarding.create_project.gitlab.title')}\n          </span>\n        }\n      />\n\n      {loading && <i className=\"spinner\" />}\n\n      {!loading && !settings && (\n        <WrongBindingCountAlert alm={AlmKeys.GitLab} canAdmin={!!canAdmin} />\n      )}\n\n      {!loading &&\n        settings &&\n        (showPersonalAccessTokenForm ? (\n          <PersonalAccessTokenForm\n            almSetting={settings}\n            onPersonalAccessTokenCreate={props.onPersonalAccessTokenCreate}\n            submitting={submittingToken}\n            validationFailed={tokenValidationFailed}\n          />\n        ) : (\n          <GitlabProjectSelectionForm\n            importingGitlabProjectId={importingGitlabProjectId}\n            loadingMore={loadingMore}\n            onImport={props.onImport}\n            onLoadMore={props.onLoadMore}\n            onSearch={props.onSearch}\n            projects={projects}\n            projectsPaging={projectsPaging}\n            searching={searching}\n            searchQuery={searchQuery}\n          />\n        ))}\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { WithRouterProps } from 'react-router';\nimport {\n  checkPersonalAccessTokenIsValid,\n  getGitlabProjects,\n  importGitlabProject,\n  setAlmPersonalAccessToken\n} from '../../../api/alm-integrations';\nimport { GitlabProject } from '../../../types/alm-integration';\nimport { AlmSettingsInstance } from '../../../types/alm-settings';\nimport GitlabProjectCreateRenderer from './GitlabProjectCreateRenderer';\n\ninterface Props extends Pick<WithRouterProps, 'location' | 'router'> {\n  canAdmin: boolean;\n  loadingBindings: boolean;\n  onProjectCreate: (projectKeys: string[]) => void;\n  settings: AlmSettingsInstance[];\n}\n\ninterface State {\n  importingGitlabProjectId?: string;\n  loading: boolean;\n  loadingMore: boolean;\n  projects?: GitlabProject[];\n  projectsPaging: T.Paging;\n  submittingToken: boolean;\n  tokenIsValid: boolean;\n  tokenValidationFailed: boolean;\n  searching: boolean;\n  searchQuery: string;\n  settings?: AlmSettingsInstance;\n}\n\nconst GITLAB_PROJECTS_PAGESIZE = 30;\n\nexport default class GitlabProjectCreate extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      loadingMore: false,\n      projectsPaging: { pageIndex: 1, total: 0, pageSize: GITLAB_PROJECTS_PAGESIZE },\n      tokenIsValid: false,\n      searching: false,\n      searchQuery: '',\n      settings: props.settings.length === 1 ? props.settings[0] : undefined,\n      submittingToken: false,\n      tokenValidationFailed: false\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchInitialData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.settings.length === 0 && this.props.settings.length > 0) {\n      this.setState(\n        { settings: this.props.settings.length === 1 ? this.props.settings[0] : undefined },\n        () => this.fetchInitialData()\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchInitialData = async () => {\n    this.setState({ loading: true });\n\n    const tokenIsValid = await this.checkPersonalAccessToken();\n\n    let result;\n    if (tokenIsValid) {\n      result = await this.fetchProjects();\n    }\n\n    if (this.mounted) {\n      if (result) {\n        const { projects, projectsPaging } = result;\n\n        this.setState({\n          tokenIsValid,\n          loading: false,\n          projects,\n          projectsPaging\n        });\n      } else {\n        this.setState({\n          loading: false\n        });\n      }\n    }\n  };\n\n  checkPersonalAccessToken = () => {\n    const { settings } = this.state;\n\n    if (!settings) {\n      return Promise.resolve(false);\n    }\n\n    return checkPersonalAccessTokenIsValid(settings.key).catch(() => false);\n  };\n\n  handleError = () => {\n    if (this.mounted) {\n      this.setState({ tokenIsValid: false });\n    }\n\n    return undefined;\n  };\n\n  fetchProjects = async (pageIndex = 1, query?: string) => {\n    const { settings } = this.state;\n\n    if (!settings) {\n      return Promise.resolve(undefined);\n    }\n\n    try {\n      return await getGitlabProjects({\n        almSetting: settings.key,\n        page: pageIndex,\n        pageSize: GITLAB_PROJECTS_PAGESIZE,\n        query\n      });\n    } catch (_) {\n      return this.handleError();\n    }\n  };\n\n  doImport = async (gitlabProjectId: string) => {\n    const { settings } = this.state;\n\n    if (!settings) {\n      return Promise.resolve(undefined);\n    }\n\n    try {\n      return await importGitlabProject({\n        almSetting: settings.key,\n        gitlabProjectId\n      });\n    } catch (_) {\n      return this.handleError();\n    }\n  };\n\n  handleImport = async (gitlabProjectId: string) => {\n    this.setState({ importingGitlabProjectId: gitlabProjectId });\n\n    const result = await this.doImport(gitlabProjectId);\n\n    if (this.mounted) {\n      this.setState({ importingGitlabProjectId: undefined });\n\n      if (result) {\n        this.props.onProjectCreate([result.project.key]);\n      }\n    }\n  };\n\n  handleLoadMore = async () => {\n    this.setState({ loadingMore: true });\n\n    const {\n      projectsPaging: { pageIndex },\n      searchQuery\n    } = this.state;\n\n    const result = await this.fetchProjects(pageIndex + 1, searchQuery);\n\n    if (this.mounted) {\n      this.setState(({ projects = [], projectsPaging }) => ({\n        loadingMore: false,\n        projects: result ? [...projects, ...result.projects] : projects,\n        projectsPaging: result ? result.projectsPaging : projectsPaging\n      }));\n    }\n  };\n\n  handleSearch = async (searchQuery: string) => {\n    this.setState({ searching: true, searchQuery });\n\n    const result = await this.fetchProjects(1, searchQuery);\n\n    if (this.mounted) {\n      this.setState(({ projects, projectsPaging }) => ({\n        searching: false,\n        projects: result ? result.projects : projects,\n        projectsPaging: result ? result.projectsPaging : projectsPaging\n      }));\n    }\n  };\n\n  cleanUrl = () => {\n    const { location, router } = this.props;\n    delete location.query.resetPat;\n    router.replace(location);\n  };\n\n  handlePersonalAccessTokenCreate = async (token: string) => {\n    const { settings } = this.state;\n\n    if (!settings || token.length < 1) {\n      return;\n    }\n\n    this.setState({ submittingToken: true, tokenValidationFailed: false });\n\n    try {\n      await setAlmPersonalAccessToken(settings.key, token);\n\n      const patIsValid = await this.checkPersonalAccessToken();\n\n      if (this.mounted) {\n        this.setState({\n          submittingToken: false,\n          tokenIsValid: patIsValid,\n          tokenValidationFailed: !patIsValid\n        });\n\n        if (patIsValid) {\n          this.cleanUrl();\n          await this.fetchInitialData();\n        }\n      }\n    } catch (e) {\n      if (this.mounted) {\n        this.setState({ submittingToken: false });\n      }\n    }\n  };\n\n  render() {\n    const { canAdmin, loadingBindings, location } = this.props;\n    const {\n      importingGitlabProjectId,\n      loading,\n      loadingMore,\n      projects,\n      projectsPaging,\n      tokenIsValid,\n      searching,\n      searchQuery,\n      settings,\n      submittingToken,\n      tokenValidationFailed\n    } = this.state;\n\n    return (\n      <GitlabProjectCreateRenderer\n        settings={settings}\n        canAdmin={canAdmin}\n        importingGitlabProjectId={importingGitlabProjectId}\n        loading={loading || loadingBindings}\n        loadingMore={loadingMore}\n        onImport={this.handleImport}\n        onLoadMore={this.handleLoadMore}\n        onPersonalAccessTokenCreate={this.handlePersonalAccessTokenCreate}\n        onSearch={this.handleSearch}\n        projects={projects}\n        projectsPaging={projectsPaging}\n        searching={searching}\n        searchQuery={searchQuery}\n        showPersonalAccessTokenForm={!tokenIsValid || Boolean(location.query.resetPat)}\n        submittingToken={submittingToken}\n        tokenValidationFailed={tokenValidationFailed}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport { debounce } from 'lodash';\nimport * as React from 'react';\nimport { SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport ValidationInput from 'sonar-ui-common/components/controls/ValidationInput';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { createProject, doesComponentExists } from '../../../api/components';\nimport ProjectKeyInput from '../../../components/common/ProjectKeyInput';\nimport { validateProjectKey } from '../../../helpers/projects';\nimport { ProjectKeyValidationResult } from '../../../types/component';\nimport { PROJECT_NAME_MAX_LEN } from './constants';\nimport CreateProjectPageHeader from './CreateProjectPageHeader';\nimport './ManualProjectCreate.css';\n\ninterface Props {\n  onProjectCreate: (projectKeys: string[]) => void;\n}\n\ninterface State {\n  projectName: string;\n  projectNameChanged: boolean;\n  projectNameError?: string;\n  projectKey: string;\n  projectKeyError?: string;\n  submitting: boolean;\n  touched: boolean;\n  validating: boolean;\n}\n\ntype ValidState = State & Required<Pick<State, 'projectKey' | 'projectName'>>;\n\nexport default class ManualProjectCreate extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      projectKey: '',\n      projectName: '',\n      projectNameChanged: false,\n      submitting: false,\n      touched: false,\n      validating: false\n    };\n    this.checkFreeKey = debounce(this.checkFreeKey, 250);\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  checkFreeKey = (key: string) => {\n    return doesComponentExists({ component: key })\n      .then(alreadyExist => {\n        if (this.mounted && key === this.state.projectKey) {\n          if (!alreadyExist) {\n            this.setState({ projectKeyError: undefined, validating: false });\n          } else {\n            this.setState({\n              projectKeyError: translate('onboarding.create_project.project_key.taken'),\n              touched: true,\n              validating: false\n            });\n          }\n        }\n      })\n      .catch(() => {\n        if (this.mounted && key === this.state.projectKey) {\n          this.setState({ projectKeyError: undefined, validating: false });\n        }\n      });\n  };\n\n  canSubmit(state: State): state is ValidState {\n    const { projectKey, projectKeyError, projectName, projectNameError } = state;\n    return Boolean(\n      projectKeyError === undefined &&\n        projectNameError === undefined &&\n        projectKey.length > 0 &&\n        projectName.length > 0\n    );\n  }\n\n  handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const { state } = this;\n    if (this.canSubmit(state)) {\n      this.setState({ submitting: true });\n      createProject({\n        project: state.projectKey,\n        name: (state.projectName || state.projectKey).trim()\n      }).then(\n        ({ project }) => this.props.onProjectCreate([project.key]),\n        () => {\n          if (this.mounted) {\n            this.setState({ submitting: false });\n          }\n        }\n      );\n    }\n  };\n\n  handleProjectKeyChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const projectKey = event.currentTarget.value || '';\n    const projectKeyError = this.validateKey(projectKey);\n\n    this.setState(prevState => {\n      const projectName = prevState.projectNameChanged ? prevState.projectName : projectKey;\n      return {\n        projectKey,\n        projectKeyError,\n        projectName,\n        projectNameError: this.validateName(projectName),\n        touched: true,\n        validating: projectKeyError === undefined\n      };\n    });\n\n    if (projectKeyError === undefined) {\n      this.checkFreeKey(projectKey);\n    }\n  };\n\n  handleProjectNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const projectName = event.currentTarget.value;\n    this.setState({\n      projectName,\n      projectNameChanged: true,\n      projectNameError: this.validateName(projectName)\n    });\n  };\n\n  validateKey = (projectKey: string) => {\n    const result = validateProjectKey(projectKey);\n    return result === ProjectKeyValidationResult.Valid\n      ? undefined\n      : translate('onboarding.create_project.project_key.error', result);\n  };\n\n  validateName = (projectName: string) => {\n    if (projectName.length === 0) {\n      return translate('onboarding.create_project.display_name.error.empty');\n    } else if (projectName.length > PROJECT_NAME_MAX_LEN) {\n      return translate('onboarding.create_project.display_name.error.too_long');\n    }\n    return undefined;\n  };\n\n  render() {\n    const {\n      projectKey,\n      projectKeyError,\n      projectName,\n      projectNameError,\n      submitting,\n      touched,\n      validating\n    } = this.state;\n    const projectNameIsInvalid = touched && projectNameError !== undefined;\n    const projectNameIsValid = touched && projectNameError === undefined;\n\n    return (\n      <>\n        <CreateProjectPageHeader title={translate('onboarding.create_project.setup_manually')} />\n\n        <div className=\"create-project-manual\">\n          <div className=\"flex-1 huge-spacer-right\">\n            <form className=\"manual-project-create\" onSubmit={this.handleFormSubmit}>\n              <ProjectKeyInput\n                error={projectKeyError}\n                help={translate('onboarding.create_project.project_key.help')}\n                label={translate('onboarding.create_project.project_key')}\n                onProjectKeyChange={this.handleProjectKeyChange}\n                projectKey={projectKey}\n                touched={touched}\n                validating={validating}\n              />\n\n              <ValidationInput\n                className=\"form-field\"\n                description={translate('onboarding.create_project.display_name.description')}\n                error={projectNameError}\n                help={translate('onboarding.create_project.display_name.help')}\n                id=\"project-name\"\n                isInvalid={projectNameIsInvalid}\n                isValid={projectNameIsValid}\n                label={translate('onboarding.create_project.display_name')}\n                required={true}>\n                <input\n                  className={classNames('input-super-large', {\n                    'is-invalid': projectNameIsInvalid,\n                    'is-valid': projectNameIsValid\n                  })}\n                  id=\"project-name\"\n                  maxLength={PROJECT_NAME_MAX_LEN}\n                  minLength={1}\n                  onChange={this.handleProjectNameChange}\n                  type=\"text\"\n                  value={projectName}\n                />\n              </ValidationInput>\n\n              <SubmitButton disabled={!this.canSubmit(this.state) || submitting}>\n                {translate('set_up')}\n              </SubmitButton>\n              <DeferredSpinner className=\"spacer-left\" loading={submitting} />\n            </form>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { WithRouterProps } from 'react-router';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getAlmSettings } from '../../../api/alm-settings';\nimport A11ySkipTarget from '../../../app/components/a11y/A11ySkipTarget';\nimport { whenLoggedIn } from '../../../components/hoc/whenLoggedIn';\nimport { withAppState } from '../../../components/hoc/withAppState';\nimport { getProjectUrl } from '../../../helpers/urls';\nimport { AlmKeys, AlmSettingsInstance } from '../../../types/alm-settings';\nimport BitbucketProjectCreate from './BitbucketProjectCreate';\nimport CreateProjectModeSelection from './CreateProjectModeSelection';\nimport GitHubProjectCreate from './GitHubProjectCreate';\nimport GitlabProjectCreate from './GitlabProjectCreate';\nimport ManualProjectCreate from './ManualProjectCreate';\nimport './style.css';\nimport { CreateProjectModes } from './types';\n\ninterface Props extends Pick<WithRouterProps, 'router' | 'location'> {\n  appState: Pick<T.AppState, 'branchesEnabled' | 'canAdmin'>;\n  currentUser: T.LoggedInUser;\n}\n\ninterface State {\n  bitbucketSettings: AlmSettingsInstance[];\n  githubSettings: AlmSettingsInstance[];\n  gitlabSettings: AlmSettingsInstance[];\n  loading: boolean;\n}\n\nexport class CreateProjectPage extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { bitbucketSettings: [], githubSettings: [], gitlabSettings: [], loading: true };\n\n  componentDidMount() {\n    const {\n      appState: { branchesEnabled }\n    } = this.props;\n    this.mounted = true;\n    if (branchesEnabled) {\n      this.fetchAlmBindings();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchAlmBindings = () => {\n    this.setState({ loading: true });\n    getAlmSettings()\n      .then(almSettings => {\n        if (this.mounted) {\n          this.setState({\n            bitbucketSettings: almSettings.filter(s => s.alm === AlmKeys.Bitbucket),\n            githubSettings: almSettings.filter(s => s.alm === AlmKeys.GitHub),\n            gitlabSettings: almSettings.filter(s => s.alm === AlmKeys.GitLab),\n            loading: false\n          });\n        }\n      })\n      .catch(() => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      });\n  };\n\n  handleModeSelect = (mode: CreateProjectModes) => {\n    const { router, location } = this.props;\n    router.push({\n      pathname: location.pathname,\n      query: { mode }\n    });\n  };\n\n  handleProjectCreate = (projectKeys: string[]) => {\n    if (projectKeys.length === 1) {\n      this.props.router.push(getProjectUrl(projectKeys[0]));\n    }\n  };\n\n  renderForm(mode?: CreateProjectModes) {\n    const {\n      appState: { canAdmin },\n      location,\n      router\n    } = this.props;\n    const { bitbucketSettings, githubSettings, gitlabSettings, loading } = this.state;\n\n    switch (mode) {\n      case CreateProjectModes.BitbucketServer: {\n        return (\n          <BitbucketProjectCreate\n            canAdmin={!!canAdmin}\n            bitbucketSettings={bitbucketSettings}\n            loadingBindings={loading}\n            location={location}\n            onProjectCreate={this.handleProjectCreate}\n          />\n        );\n      }\n      case CreateProjectModes.GitHub: {\n        return (\n          <GitHubProjectCreate\n            canAdmin={!!canAdmin}\n            loadingBindings={loading}\n            location={location}\n            onProjectCreate={this.handleProjectCreate}\n            router={router}\n            settings={githubSettings}\n          />\n        );\n      }\n      case CreateProjectModes.GitLab: {\n        return (\n          <GitlabProjectCreate\n            canAdmin={!!canAdmin}\n            loadingBindings={loading}\n            location={location}\n            onProjectCreate={this.handleProjectCreate}\n            router={router}\n            settings={gitlabSettings}\n          />\n        );\n      }\n      case CreateProjectModes.Manual: {\n        return <ManualProjectCreate onProjectCreate={this.handleProjectCreate} />;\n      }\n      default: {\n        const almCounts = {\n          [AlmKeys.Azure]: 0,\n          [AlmKeys.Bitbucket]: bitbucketSettings.length,\n          [AlmKeys.GitHub]: githubSettings.length,\n          [AlmKeys.GitLab]: gitlabSettings.length\n        };\n        return (\n          <CreateProjectModeSelection\n            almCounts={almCounts}\n            loadingBindings={loading}\n            onSelectMode={this.handleModeSelect}\n          />\n        );\n      }\n    }\n  }\n\n  render() {\n    const {\n      appState: { branchesEnabled },\n      location\n    } = this.props;\n    const mode: CreateProjectModes | undefined = location.query?.mode;\n\n    return (\n      <>\n        <Helmet title={translate('my_account.create_new.TRK')} titleTemplate=\"%s\" />\n        <A11ySkipTarget anchor=\"create_project_main\" />\n        <div className=\"page page-limited huge-spacer-bottom position-relative\" id=\"create-project\">\n          {this.renderForm(branchesEnabled ? mode : CreateProjectModes.Manual)}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default whenLoggedIn(withAppState(CreateProjectPage));\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { A11yContext } from './A11yContext';\n\ninterface Props {\n  anchor: string;\n  label?: string;\n  weight?: number;\n}\n\nexport default function A11ySkipTarget(props: Props) {\n  return (\n    <A11yContext.Consumer>\n      {({ addA11ySkipLink, removeA11ySkipLink }) => (\n        <A11ySkipTargetInner\n          addA11ySkipLink={addA11ySkipLink}\n          removeA11ySkipLink={removeA11ySkipLink}\n          {...props}\n        />\n      )}\n    </A11yContext.Consumer>\n  );\n}\n\ninterface InnerProps {\n  addA11ySkipLink: (link: T.A11ySkipLink) => void;\n  removeA11ySkipLink: (link: T.A11ySkipLink) => void;\n}\n\nexport class A11ySkipTargetInner extends React.PureComponent<Props & InnerProps> {\n  componentDidMount() {\n    this.props.addA11ySkipLink(this.getLink());\n  }\n\n  componentWillUnmount() {\n    this.props.removeA11ySkipLink(this.getLink());\n  }\n\n  getLink = (): T.A11ySkipLink => {\n    const { anchor: key, label = translate('skip_to_content'), weight } = this.props;\n    return { key, label, weight };\n  };\n\n  render() {\n    const { anchor } = this.props;\n    return <span id={`a11y_target__${anchor}`} />;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport const enum AlmKeys {\n  Azure = 'azure',\n  Bitbucket = 'bitbucket',\n  GitHub = 'github',\n  GitLab = 'gitlab'\n}\n\nexport interface AlmBindingDefinition {\n  key: string;\n}\n\nexport interface AzureBindingDefinition extends AlmBindingDefinition {\n  personalAccessToken: string;\n}\n\nexport interface BitbucketBindingDefinition extends AlmBindingDefinition {\n  personalAccessToken: string;\n  url: string;\n}\n\nexport interface GithubBindingDefinition extends AlmBindingDefinition {\n  appId: string;\n  clientId: string;\n  clientSecret: string;\n  privateKey: string;\n  url: string;\n}\n\nexport interface GitlabBindingDefinition extends AlmBindingDefinition {\n  personalAccessToken: string;\n  url?: string;\n}\n\nexport interface ProjectAlmBindingResponse {\n  alm: AlmKeys;\n  key: string;\n  repository?: string;\n  slug?: string;\n  summaryCommentEnabled?: boolean;\n}\n\nexport interface ProjectBitbucketBindingResponse extends ProjectAlmBindingResponse {\n  alm: AlmKeys.Bitbucket;\n  repository: string;\n  slug: string;\n}\n\nexport interface ProjectGitHubBindingResponse extends ProjectAlmBindingResponse {\n  alm: AlmKeys.GitHub;\n  repository: string;\n}\n\nexport interface ProjectGitLabBindingResponse extends ProjectAlmBindingResponse {\n  alm: AlmKeys.GitLab;\n  repository: string;\n  url: string;\n}\n\nexport interface ProjectAlmBindingParams {\n  almSetting: string;\n  project: string;\n}\n\nexport interface AzureProjectAlmBindingParams extends ProjectAlmBindingParams {}\n\nexport interface BitbucketProjectAlmBindingParams extends ProjectAlmBindingParams {\n  repository: string;\n  slug: string;\n}\n\nexport interface GithubProjectAlmBindingParams extends ProjectAlmBindingParams {\n  repository: string;\n  summaryCommentEnabled: boolean;\n}\n\nexport interface GitlabProjectAlmBindingParams extends ProjectAlmBindingParams {\n  repository?: string;\n}\n\nexport interface AlmSettingsInstance {\n  alm: AlmKeys;\n  key: string;\n  url?: string;\n}\n\nexport interface AlmSettingsBindingDefinitions {\n  [AlmKeys.Azure]: AzureBindingDefinition[];\n  [AlmKeys.Bitbucket]: BitbucketBindingDefinition[];\n  [AlmKeys.GitHub]: GithubBindingDefinition[];\n  [AlmKeys.GitLab]: GitlabBindingDefinition[];\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport {\n  AlmSettingsBindingDefinitions,\n  AlmSettingsInstance,\n  AzureBindingDefinition,\n  AzureProjectAlmBindingParams,\n  BitbucketBindingDefinition,\n  BitbucketProjectAlmBindingParams,\n  GithubBindingDefinition,\n  GithubProjectAlmBindingParams,\n  GitlabBindingDefinition,\n  GitlabProjectAlmBindingParams,\n  ProjectAlmBindingResponse\n} from '../types/alm-settings';\n\nexport function getAlmDefinitions(): Promise<AlmSettingsBindingDefinitions> {\n  return getAlmDefinitionsNoCatch().catch(throwGlobalError);\n}\n\nexport function getAlmDefinitionsNoCatch(): Promise<AlmSettingsBindingDefinitions> {\n  return getJSON('/api/alm_settings/list_definitions');\n}\n\nexport function getAlmSettings(project?: string): Promise<AlmSettingsInstance[]> {\n  return getJSON('/api/alm_settings/list', { project })\n    .then(({ almSettings }) => almSettings)\n    .catch(throwGlobalError);\n}\n\nexport function createGithubConfiguration(data: GithubBindingDefinition) {\n  return post('/api/alm_settings/create_github', data).catch(throwGlobalError);\n}\n\nexport function updateGithubConfiguration(data: GithubBindingDefinition & { newKey: string }) {\n  return post('/api/alm_settings/update_github', data).catch(throwGlobalError);\n}\n\nexport function createAzureConfiguration(data: AzureBindingDefinition) {\n  return post('/api/alm_settings/create_azure', data).catch(throwGlobalError);\n}\n\nexport function updateAzureConfiguration(data: AzureBindingDefinition & { newKey: string }) {\n  return post('/api/alm_settings/update_azure', data).catch(throwGlobalError);\n}\n\nexport function createBitbucketConfiguration(data: BitbucketBindingDefinition) {\n  return post('/api/alm_settings/create_bitbucket', data).catch(throwGlobalError);\n}\n\nexport function updateBitbucketConfiguration(\n  data: BitbucketBindingDefinition & { newKey: string }\n) {\n  return post('/api/alm_settings/update_bitbucket', data).catch(throwGlobalError);\n}\n\nexport function createGitlabConfiguration(data: GitlabBindingDefinition) {\n  return post('/api/alm_settings/create_gitlab', data).catch(throwGlobalError);\n}\n\nexport function updateGitlabConfiguration(data: GitlabBindingDefinition & { newKey: string }) {\n  return post('/api/alm_settings/update_gitlab', data).catch(throwGlobalError);\n}\n\nexport function deleteConfiguration(key: string) {\n  return post('/api/alm_settings/delete', { key }).catch(throwGlobalError);\n}\n\nexport function countBindedProjects(almSetting: string) {\n  return getJSON('/api/alm_settings/count_binding', { almSetting })\n    .then(({ projects }) => projects)\n    .catch(throwGlobalError);\n}\n\nexport function getProjectAlmBinding(project: string): Promise<ProjectAlmBindingResponse> {\n  return getJSON('/api/alm_settings/get_binding', { project });\n}\n\nexport function deleteProjectAlmBinding(project: string): Promise<void> {\n  return post('/api/alm_settings/delete_binding', { project }).catch(throwGlobalError);\n}\n\nexport function setProjectAzureBinding(data: AzureProjectAlmBindingParams) {\n  return post('/api/alm_settings/set_azure_binding', data).catch(throwGlobalError);\n}\n\nexport function setProjectBitbucketBinding(data: BitbucketProjectAlmBindingParams) {\n  return post('/api/alm_settings/set_bitbucket_binding', data).catch(throwGlobalError);\n}\n\nexport function setProjectGithubBinding(data: GithubProjectAlmBindingParams) {\n  return post('/api/alm_settings/set_github_binding', data).catch(throwGlobalError);\n}\n\nexport function setProjectGitlabBinding(data: GitlabProjectAlmBindingParams) {\n  return post('/api/alm_settings/set_gitlab_binding', data).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport const ALM_INTEGRATION = 'almintegration';\nexport const ANALYSIS_SCOPE_CATEGORY = 'exclusions';\nexport const LANGUAGES_CATEGORY = 'languages';\nexport const NEW_CODE_PERIOD_CATEGORY = 'new_code_period';\nexport const PULL_REQUEST_DECORATION_BINDING_CATEGORY = 'pull_request_decoration_binding';\n"],"sourceRoot":""}