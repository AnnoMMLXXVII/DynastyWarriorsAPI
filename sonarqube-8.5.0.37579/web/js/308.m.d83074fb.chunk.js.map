{"version":3,"sources":["webpack:///./src/main/js/apps/create/project/ManualProjectCreate.css?95f7","webpack:///./src/main/js/apps/create/project/ManualProjectCreate.css","webpack:///./src/main/js/apps/create/project/style.css?00fe","webpack:///./src/main/js/apps/create/project/style.css","webpack:///./src/main/js/api/alm-integrations.ts","webpack:///./src/main/js/apps/create/project/types.ts","webpack:///./src/main/js/apps/create/project/BitbucketProjectAccordion.tsx","webpack:///./src/main/js/apps/create/project/BitbucketRepositories.tsx","webpack:///./src/main/js/apps/create/project/BitbucketSearchResults.tsx","webpack:///./src/main/js/apps/create/project/BitbucketImportRepositoryForm.tsx","webpack:///./src/main/js/apps/create/project/CreateProjectPageHeader.tsx","webpack:///./src/main/js/apps/create/project/PersonalAccessTokenForm.tsx","webpack:///./src/main/js/apps/create/project/WrongBindingCountAlert.tsx","webpack:///./src/main/js/apps/create/project/BitbucketProjectCreateRenderer.tsx","webpack:///./src/main/js/apps/create/project/BitbucketProjectCreate.tsx","webpack:///./src/main/js/apps/create/project/constants.ts","webpack:///./src/main/js/apps/create/project/CreateProjectModeSelection.tsx","webpack:///./src/main/js/apps/create/project/GitHubProjectCreateRenderer.tsx","webpack:///./src/main/js/apps/create/project/GitHubProjectCreate.tsx","webpack:///./src/main/js/apps/create/project/GitlabProjectSelectionForm.tsx","webpack:///./src/main/js/apps/create/project/GitlabProjectCreateRenderer.tsx","webpack:///./src/main/js/apps/create/project/GitlabProjectCreate.tsx","webpack:///./src/main/js/apps/create/project/ManualProjectCreate.tsx","webpack:///./src/main/js/apps/create/project/CreateProjectPage.tsx","webpack:///./src/main/js/app/components/a11y/A11ySkipTarget.tsx","webpack:///./src/main/js/types/alm-settings.ts","webpack:///./src/main/js/api/alm-settings.ts","webpack:///./src/main/js/apps/settings/components/AdditionalCategoryKeys.ts","webpack:///./src/main/js/components/common/ProjectKeyInput.tsx","webpack:///./src/main/js/helpers/projects.ts","webpack:///./src/main/js/components/hoc/whenLoggedIn.tsx"],"names":["api","content","__esModule","default","module","i","options","exported","locals","exports","___CSS_LOADER_API_IMPORT___","push","setAlmPersonalAccessToken","almSetting","pat","catch","throwGlobalError","checkPersonalAccessTokenIsValid","then","response","status","CreateProjectModes","BitbucketProjectAccordion","props","disableRepositories","open","project","repositories","selectedRepository","showingAllRepositories","repositoryCount","length","title","name","className","onClick","Alert","variant","defaultMessage","id","values","link","to","pathname","query","mode","BitbucketServer","resetPat","map","repo","sqProjectKey","key","fill","green","size","checked","disabled","onCheck","onSelectRepository","value","String","BitbucketRepositories","projects","projectRepositories","openProjectKeys","setOpenProjectKeys","allAreExpanded","p","isOpen","includes","allShown","projectKey","handleClick","BitbucketSearchResults","searching","searchResults","filteredProjects","r","find","filter","loading","BitbucketImportRepositoryForm","onChange","onSearch","placeholder","CreateProjectPageHeader","additionalActions","getPatUrl","alm","url","Bitbucket","replace","endsWith","PersonalAccessTokenForm","submitting","validationFailed","touched","setTouched","isInvalid","onSubmit","e","preventDefault","FormData","currentTarget","get","onPersonalAccessTokenCreate","error","undefined","isValid","label","required","autoFocus","minLength","type","display","alt","height","src","href","rel","target","perm","GitLab","WrongBindingCountAlert","canAdmin","category","BitbucketProjectCreateRenderer","bitbucketSetting","importing","showPersonalAccessTokenForm","submittingToken","tokenValidationFailed","onImportRepository","super","mounted","fetchInitialData","async","this","setState","patIsValid","checkPersonalAccessToken","fetchBitbucketProjects","fetchBitbucketRepositories","state","Promise","resolve","all","projectName","isLastPage","filteredRepositories","results","reduce","acc","handlePersonalAccessTokenCreate","token","handleImportRepository","repositorySlug","slug","onProjectCreate","handleSearch","repositoryName","handleSelectRepository","bitbucketSettings","prevProps","loadingBindings","location","Boolean","renderAlmOption","almCounts","count","onSelectMode","style","lineHeight","overlay","CreateProjectModeSelection","Manual","GitHub","orgToOption","organizations","q","o","GitHubProjectCreateRenderer","loadingOrganizations","selectedOrganization","defaultOptions","minimumQueryLength","onSelect","onSelectOrganization","loadingRepositories","repositoryPaging","searchQuery","isDisabled","repository","total","loadMore","onLoadMore","renderRepositoryList","triggerSearch","fetchRepositories","organizationKey","handleSelectOrganization","handleLoadMore","page","pageIndex","settings","organization","repositoryKey","pageSize","initialize","router","code","fetchOrganizations","redirectToGithub","clientId","queryParams","param","join","instanceRootUrl","window","getGithubOrganizations","params","data","ps","getGithubRepositories","paging","_","GitlabProjectSelectionForm","importingGitlabProjectId","loadingMore","projectsPaging","pathSlug","pathName","qualifier","Project","sqProjectName","colSpan","onImport","GitlabProjectCreateRenderer","tokenIsValid","result","fetchProjects","handleError","getGitlabProjects","doImport","gitlabProjectId","importGitlabProject","handleImport","cleanUrl","checkFreeKey","component","alreadyExist","projectKeyError","validating","handleFormSubmit","event","canSubmit","trim","handleProjectKeyChange","validateKey","prevState","projectNameChanged","projectNameError","validateName","handleProjectNameChange","Valid","projectNameIsInvalid","projectNameIsValid","ProjectKeyInput","help","onProjectKeyChange","description","maxLength","githubSettings","gitlabSettings","fetchAlmBindings","almSettings","s","handleModeSelect","handleProjectCreate","projectKeys","appState","branchesEnabled","Azure","titleTemplate","A11ySkipTarget","anchor","renderForm","whenLoggedIn","withAppState","Consumer","addA11ySkipLink","removeA11ySkipLink","A11ySkipTargetInner","getLink","weight","AlmKeys","getAlmDefinitions","getAlmDefinitionsNoCatch","getAlmSettings","createGithubConfiguration","updateGithubConfiguration","createAzureConfiguration","updateAzureConfiguration","createBitbucketConfiguration","updateBitbucketConfiguration","createGitlabConfiguration","updateGitlabConfiguration","deleteConfiguration","countBindedProjects","getProjectAlmBinding","deleteProjectAlmBinding","setProjectAzureBinding","setProjectBitbucketBinding","setProjectGithubBinding","setProjectGitlabBinding","ALM_INTEGRATION","ANALYSIS_SCOPE_CATEGORY","LANGUAGES_CATEGORY","NEW_CODE_PERIOD_CATEGORY","PULL_REQUEST_DECORATION_BINDING_CATEGORY","validateProjectKey","Empty","TooLong","test","OnlyDigits","InvalidChar","WrappedComponent","Wrapper","currentUser","displayName"],"mappings":"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","file":"js/308.m.d83074fb.chunk.js","sourcesContent":["var api = require(\"!../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../../node_modules/postcss-loader/src/index.js??postcss!./ManualProjectCreate.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".manual-project-create{max-width:700px}.manual-project-create .button{margin-top:8px}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","var api = require(\"!../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../../node_modules/postcss-loader/src/index.js??postcss!./style.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"#create-project{padding-top:0!important}#create-project header{padding-top:20px;background-color:#f3f3f3;position:-webkit-sticky;position:sticky;top:48px;z-index:50}.create-project-manual{display:flex!important;justify-content:space-between}.create-project-import-bbs .open .boxed-group-header{border-bottom:1px solid #e6e6e6}.create-project-import-bbs .boxed-group-inner{padding-top:24px}.create-project-import-bbs-repo{width:250px;min-height:40px}.create-project-github-repository{box-sizing:border-box;width:33.33%}.create-project-github-repository .notice{display:block;position:absolute}.create-project-github-repository .notice svg{color:#0a0}.create-project-import-gitlab table>tbody>tr>td{vertical-align:middle}.create-project-import-gitlab .project-name,.create-project-import-gitlab .project-path{max-width:400px}.create-project-import-gitlab .sq-project-link{max-width:300px}.create-project-import-gitlab .already-set-up svg{color:#0a0}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { get, getJSON, post, postJSON } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport {\n  BitbucketProject,\n  BitbucketRepository,\n  GithubOrganization,\n  GithubRepository,\n  GitlabProject\n} from '../types/alm-integration';\nimport { ProjectBase } from './components';\n\nexport function setAlmPersonalAccessToken(almSetting: string, pat: string): Promise<void> {\n  return post('/api/alm_integrations/set_pat', { almSetting, pat }).catch(throwGlobalError);\n}\n\nexport function checkPersonalAccessTokenIsValid(almSetting: string): Promise<boolean> {\n  return get('/api/alm_integrations/check_pat', { almSetting })\n    .then(() => true)\n    .catch((response: Response) => {\n      if (response.status === 400) {\n        return false;\n      } else {\n        return throwGlobalError(response);\n      }\n    });\n}\n\nexport function getBitbucketServerProjects(\n  almSetting: string\n): Promise<{ projects: BitbucketProject[] }> {\n  return getJSON('/api/alm_integrations/list_bitbucketserver_projects', { almSetting });\n}\n\nexport function getBitbucketServerRepositories(\n  almSetting: string,\n  projectName: string\n): Promise<{\n  isLastPage: boolean;\n  repositories: BitbucketRepository[];\n}> {\n  return getJSON('/api/alm_integrations/search_bitbucketserver_repos', {\n    almSetting,\n    projectName\n  });\n}\n\nexport function importBitbucketServerProject(\n  almSetting: string,\n  projectKey: string,\n  repositorySlug: string\n): Promise<{ project: ProjectBase }> {\n  return postJSON('/api/alm_integrations/import_bitbucketserver_project', {\n    almSetting,\n    projectKey,\n    repositorySlug\n  }).catch(throwGlobalError);\n}\n\nexport function searchForBitbucketServerRepositories(\n  almSetting: string,\n  repositoryName: string\n): Promise<{\n  isLastPage: boolean;\n  repositories: BitbucketRepository[];\n}> {\n  return getJSON('/api/alm_integrations/search_bitbucketserver_repos', {\n    almSetting,\n    repositoryName\n  });\n}\n\nexport function getGithubClientId(almSetting: string): Promise<{ clientId?: string }> {\n  return getJSON('/api/alm_integrations/get_github_client_id', { almSetting });\n}\n\nexport function importGithubRepository(\n  almSetting: string,\n  organization: string,\n  repositoryKey: string\n): Promise<{ project: ProjectBase }> {\n  return postJSON('/api/alm_integrations/import_github_project', {\n    almSetting,\n    organization,\n    repositoryKey\n  }).catch(throwGlobalError);\n}\n\nexport function getGithubOrganizations(\n  almSetting: string,\n  token: string\n): Promise<{ organizations: GithubOrganization[] }> {\n  return getJSON('/api/alm_integrations/list_github_organizations', {\n    almSetting,\n    token\n  }).catch((response?: Response) => {\n    if (response && response.status !== 400) {\n      throwGlobalError(response);\n    }\n  });\n}\n\nexport function getGithubRepositories(data: {\n  almSetting: string;\n  organization: string;\n  pageSize: number;\n  page?: number;\n  query?: string;\n}): Promise<{ repositories: GithubRepository[]; paging: T.Paging }> {\n  const { almSetting, organization, pageSize, page = 1, query } = data;\n  return getJSON('/api/alm_integrations/list_github_repositories', {\n    almSetting,\n    organization,\n    p: page,\n    ps: pageSize,\n    q: query || undefined\n  }).catch(throwGlobalError);\n}\n\nexport function getGitlabProjects(data: {\n  almSetting: string;\n  page?: number;\n  pageSize?: number;\n  query?: string;\n}): Promise<{ projects: GitlabProject[]; projectsPaging: T.Paging }> {\n  const { almSetting, pageSize, page, query } = data;\n  return getJSON('/api/alm_integrations/search_gitlab_repos', {\n    almSetting,\n    projectName: query || undefined,\n    p: page,\n    ps: pageSize\n  })\n    .then(({ repositories, paging }) => ({ projects: repositories, projectsPaging: paging }))\n    .catch(throwGlobalError);\n}\n\nexport function importGitlabProject(data: {\n  almSetting: string;\n  gitlabProjectId: string;\n}): Promise<{ project: ProjectBase }> {\n  const { almSetting, gitlabProjectId } = data;\n  return postJSON('/api/alm_integrations/import_gitlab_project', {\n    almSetting,\n    gitlabProjectId\n  }).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport enum CreateProjectModes {\n  Manual = 'manual',\n  BitbucketServer = 'bitbucket',\n  GitHub = 'github',\n  GitLab = 'gitlab'\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport BoxedGroupAccordion from 'sonar-ui-common/components/controls/BoxedGroupAccordion';\nimport Radio from 'sonar-ui-common/components/controls/Radio';\nimport CheckIcon from 'sonar-ui-common/components/icons/CheckIcon';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { colors } from '../../../app/theme';\nimport { getProjectUrl } from '../../../helpers/urls';\nimport { BitbucketProject, BitbucketRepository } from '../../../types/alm-integration';\nimport { CreateProjectModes } from './types';\n\nexport interface BitbucketProjectAccordionProps {\n  disableRepositories: boolean;\n  onClick?: () => void;\n  onSelectRepository: (repo: BitbucketRepository) => void;\n  open: boolean;\n  project?: BitbucketProject;\n  repositories: BitbucketRepository[];\n  selectedRepository?: BitbucketRepository;\n  showingAllRepositories: boolean;\n}\n\nexport default function BitbucketProjectAccordion(props: BitbucketProjectAccordionProps) {\n  const {\n    disableRepositories,\n    open,\n    project,\n    repositories,\n    selectedRepository,\n    showingAllRepositories\n  } = props;\n\n  const repositoryCount = repositories.length;\n\n  const title = project?.name ?? translate('search_results');\n\n  return (\n    <BoxedGroupAccordion\n      className={classNames('big-spacer-bottom', {\n        open,\n        'not-clickable': !props.onClick,\n        'no-hover': !props.onClick\n      })}\n      onClick={\n        props.onClick\n          ? props.onClick\n          : () => {\n              /* noop */\n            }\n      }\n      open={open}\n      title={<h3>{title}</h3>}>\n      {open && (\n        <>\n          <div className=\"display-flex-wrap\">\n            {repositoryCount === 0 && (\n              <Alert variant=\"warning\">\n                <FormattedMessage\n                  defaultMessage={translate('onboarding.create_project.no_bbs_repos')}\n                  id=\"onboarding.create_project.no_bbs_repos\"\n                  values={{\n                    link: (\n                      <Link\n                        to={{\n                          pathname: '/projects/create',\n                          query: { mode: CreateProjectModes.BitbucketServer, resetPat: 1 }\n                        }}>\n                        {translate('onboarding.create_project.update_your_token')}\n                      </Link>\n                    )\n                  }}\n                />\n              </Alert>\n            )}\n\n            {repositories.map(repo =>\n              repo.sqProjectKey ? (\n                <div\n                  className=\"display-flex-start spacer-right spacer-bottom create-project-import-bbs-repo\"\n                  key={repo.id}>\n                  <CheckIcon className=\"spacer-right\" fill={colors.green} size={14} />\n                  <div className=\"overflow-hidden\">\n                    <div className=\"little-spacer-bottom text-ellipsis\">\n                      <strong title={repo.name}>\n                        <Link to={getProjectUrl(repo.sqProjectKey)}>{repo.name}</Link>\n                      </strong>\n                    </div>\n                    <em>{translate('onboarding.create_project.repository_imported')}</em>\n                  </div>\n                </div>\n              ) : (\n                <Radio\n                  checked={selectedRepository?.id === repo.id}\n                  className={classNames(\n                    'display-flex-start spacer-right spacer-bottom create-project-import-bbs-repo overflow-hidden',\n                    {\n                      disabled: disableRepositories,\n                      'text-muted': disableRepositories,\n                      'link-no-underline': disableRepositories\n                    }\n                  )}\n                  key={repo.id}\n                  onCheck={() => props.onSelectRepository(repo)}\n                  value={String(repo.id)}>\n                  <strong className=\"text-ellipsis\" title={repo.name}>\n                    {repo.name}\n                  </strong>\n                </Radio>\n              )\n            )}\n          </div>\n\n          {!showingAllRepositories && repositoryCount > 0 && (\n            <Alert variant=\"warning\">\n              {translateWithParameters(\n                'onboarding.create_project.only_showing_X_first_repos',\n                repositoryCount\n              )}\n            </Alert>\n          )}\n        </>\n      )}\n    </BoxedGroupAccordion>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { uniq, without } from 'lodash';\nimport * as React from 'react';\nimport { ButtonLink } from 'sonar-ui-common/components/controls/buttons';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport {\n  BitbucketProject,\n  BitbucketProjectRepositories,\n  BitbucketRepository\n} from '../../../types/alm-integration';\nimport BitbucketProjectAccordion from './BitbucketProjectAccordion';\n\nexport interface BitbucketRepositoriesProps {\n  disableRepositories: boolean;\n  onSelectRepository: (repo: BitbucketRepository) => void;\n  projects: BitbucketProject[];\n  projectRepositories: BitbucketProjectRepositories;\n  selectedRepository?: BitbucketRepository;\n}\n\nexport default function BitbucketRepositories(props: BitbucketRepositoriesProps) {\n  const { disableRepositories, projects, projectRepositories, selectedRepository } = props;\n\n  const [openProjectKeys, setOpenProjectKeys] = React.useState(\n    projects.length > 0 ? [projects[0].key] : []\n  );\n\n  const allAreExpanded = projects.length <= openProjectKeys.length;\n\n  const handleClick = (isOpen: boolean, projectKey: string) => {\n    setOpenProjectKeys(\n      isOpen ? without(openProjectKeys, projectKey) : uniq([...openProjectKeys, projectKey])\n    );\n  };\n\n  return (\n    <>\n      <div className=\"overflow-hidden spacer-bottom\">\n        <ButtonLink\n          className=\"pull-right\"\n          onClick={() => setOpenProjectKeys(allAreExpanded ? [] : projects.map(p => p.key))}>\n          {allAreExpanded ? translate('collapse_all') : translate('expand_all')}\n        </ButtonLink>\n      </div>\n\n      {projects.map(project => {\n        const isOpen = openProjectKeys.includes(project.key);\n        const { allShown, repositories = [] } = projectRepositories[project.key] || {};\n\n        return (\n          <BitbucketProjectAccordion\n            disableRepositories={disableRepositories}\n            key={project.key}\n            onClick={() => handleClick(isOpen, project.key)}\n            onSelectRepository={props.onSelectRepository}\n            open={isOpen}\n            project={project}\n            repositories={repositories}\n            selectedRepository={selectedRepository}\n            showingAllRepositories={allShown}\n          />\n        );\n      })}\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { uniq } from 'lodash';\nimport * as React from 'react';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { isDefined } from 'sonar-ui-common/helpers/types';\nimport { BitbucketProject, BitbucketRepository } from '../../../types/alm-integration';\nimport BitbucketProjectAccordion from './BitbucketProjectAccordion';\n\nexport interface BitbucketSearchResultsProps {\n  disableRepositories: boolean;\n  onSelectRepository: (repo: BitbucketRepository) => void;\n  projects: BitbucketProject[];\n  searching: boolean;\n  searchResults?: BitbucketRepository[];\n  selectedRepository?: BitbucketRepository;\n}\n\nexport default function BitbucketSearchResults(props: BitbucketSearchResultsProps) {\n  const {\n    disableRepositories,\n    projects,\n    searching,\n    searchResults = [],\n    selectedRepository\n  } = props;\n\n  if (searchResults.length === 0 && !searching) {\n    return (\n      <Alert className=\"big-spacer-top\" variant=\"warning\">\n        {translate('onboarding.create_project.no_bbs_repos.filter')}\n      </Alert>\n    );\n  }\n\n  const filteredProjects = uniq(\n    searchResults.map(r => projects.find(p => p.key === r.projectKey)).filter(isDefined)\n  );\n\n  return (\n    <div className=\"big-spacer-top\">\n      <DeferredSpinner loading={searching}>\n        {filteredProjects.length === 0 && searchResults.length > 0 && (\n          <BitbucketProjectAccordion\n            disableRepositories={disableRepositories}\n            onSelectRepository={props.onSelectRepository}\n            open={true}\n            repositories={searchResults}\n            selectedRepository={selectedRepository}\n            showingAllRepositories={true}\n          />\n        )}\n\n        {filteredProjects.map(project => {\n          const repositories = searchResults.filter(r => r.projectKey === project.key);\n\n          return (\n            <BitbucketProjectAccordion\n              disableRepositories={disableRepositories}\n              key={project.key}\n              onSelectRepository={props.onSelectRepository}\n              open={true}\n              project={project}\n              repositories={repositories}\n              selectedRepository={selectedRepository}\n              showingAllRepositories={true}\n            />\n          );\n        })}\n      </DeferredSpinner>\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport SearchBox from 'sonar-ui-common/components/controls/SearchBox';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport {\n  BitbucketProject,\n  BitbucketProjectRepositories,\n  BitbucketRepository\n} from '../../../types/alm-integration';\nimport BitbucketRepositories from './BitbucketRepositories';\nimport BitbucketSearchResults from './BitbucketSearchResults';\nimport { CreateProjectModes } from './types';\n\nexport interface BitbucketImportRepositoryFormProps {\n  disableRepositories: boolean;\n  onSearch: (query: string) => void;\n  onSelectRepository: (repo: BitbucketRepository) => void;\n  projects?: BitbucketProject[];\n  projectRepositories?: BitbucketProjectRepositories;\n  searching: boolean;\n  searchResults?: BitbucketRepository[];\n  selectedRepository?: BitbucketRepository;\n}\n\nexport default function BitbucketImportRepositoryForm(props: BitbucketImportRepositoryFormProps) {\n  const {\n    disableRepositories,\n    projects = [],\n    projectRepositories = {},\n    searchResults,\n    searching,\n    selectedRepository\n  } = props;\n\n  if (projects.length === 0) {\n    return (\n      <Alert className=\"spacer-top\" variant=\"warning\">\n        <FormattedMessage\n          defaultMessage={translate('onboarding.create_project.no_bbs_projects')}\n          id=\"onboarding.create_project.no_bbs_projects\"\n          values={{\n            link: (\n              <Link\n                to={{\n                  pathname: '/projects/create',\n                  query: { mode: CreateProjectModes.BitbucketServer, resetPat: 1 }\n                }}>\n                {translate('onboarding.create_project.update_your_token')}\n              </Link>\n            )\n          }}\n        />\n      </Alert>\n    );\n  }\n\n  return (\n    <div className=\"create-project-import-bbs\">\n      <SearchBox\n        onChange={props.onSearch}\n        placeholder={translate('onboarding.create_project.search_repositories_by_name')}\n      />\n\n      {searching || searchResults ? (\n        <BitbucketSearchResults\n          disableRepositories={disableRepositories}\n          onSelectRepository={props.onSelectRepository}\n          projects={projects}\n          searchResults={searchResults}\n          searching={searching}\n          selectedRepository={selectedRepository}\n        />\n      ) : (\n        <BitbucketRepositories\n          disableRepositories={disableRepositories}\n          onSelectRepository={props.onSelectRepository}\n          projectRepositories={projectRepositories}\n          projects={projects}\n          selectedRepository={selectedRepository}\n        />\n      )}\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\n\nexport interface CreateProjectPageHeaderProps {\n  additionalActions?: React.ReactNode;\n  title: React.ReactNode;\n}\n\nexport default function CreateProjectPageHeader(props: CreateProjectPageHeaderProps) {\n  const { additionalActions, title } = props;\n\n  return (\n    <header className=\"huge-spacer-bottom bordered-bottom overflow-hidden\">\n      <h1 className=\"pull-left huge big-spacer-bottom\">{title}</h1>\n\n      {additionalActions}\n    </header>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport ValidationInput from 'sonar-ui-common/components/controls/ValidationInput';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getBaseUrl } from 'sonar-ui-common/helpers/urls';\nimport { AlmKeys, AlmSettingsInstance } from '../../../types/alm-settings';\n\nexport interface PersonalAccessTokenFormProps {\n  almSetting: AlmSettingsInstance;\n  onPersonalAccessTokenCreate: (token: string) => void;\n  submitting?: boolean;\n  validationFailed: boolean;\n}\n\nfunction getPatUrl(alm: AlmKeys, url: string) {\n  if (alm === AlmKeys.Bitbucket) {\n    return `${url.replace(/\\/$/, '')}/plugins/servlet/access-tokens/add`;\n  } else {\n    // GitLab\n    return url.endsWith('/api/v4')\n      ? `${url.replace('/api/v4', '').replace(/\\/$/, '')}/profile/personal_access_tokens`\n      : 'https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#creating-a-personal-access-token';\n  }\n}\n\nexport default function PersonalAccessTokenForm(props: PersonalAccessTokenFormProps) {\n  const {\n    almSetting: { alm, url },\n    submitting = false,\n    validationFailed\n  } = props;\n  const [touched, setTouched] = React.useState(false);\n\n  React.useEffect(() => {\n    setTouched(false);\n  }, [submitting]);\n\n  const isInvalid = validationFailed && !touched;\n\n  return (\n    <div className=\"display-flex-start\">\n      <form\n        className=\"width-50\"\n        onSubmit={(e: React.SyntheticEvent<HTMLFormElement>) => {\n          e.preventDefault();\n          const value = new FormData(e.currentTarget).get('personal_access_token') as string;\n          props.onPersonalAccessTokenCreate(value);\n        }}>\n        <h2 className=\"big\">{translate('onboarding.create_project.pat_form.title', alm)}</h2>\n        <p className=\"big-spacer-top big-spacer-bottom\">\n          {translate('onboarding.create_project.pat_form.help', alm)}\n        </p>\n\n        <ValidationInput\n          error={isInvalid ? translate('onboarding.create_project.pat_incorrect', alm) : undefined}\n          id=\"personal_access_token\"\n          isInvalid={isInvalid}\n          isValid={false}\n          label={translate('onboarding.create_project.enter_pat')}\n          required={true}>\n          <input\n            autoFocus={true}\n            className={classNames('input-super-large', {\n              'is-invalid': isInvalid\n            })}\n            id=\"personal_access_token\"\n            minLength={1}\n            name=\"personal_access_token\"\n            onChange={() => {\n              setTouched(true);\n            }}\n            type=\"text\"\n          />\n        </ValidationInput>\n\n        <SubmitButton disabled={isInvalid || submitting || !touched}>\n          {translate('save')}\n        </SubmitButton>\n        <DeferredSpinner className=\"spacer-left\" loading={submitting} />\n      </form>\n\n      <Alert className=\"big-spacer-left width-50\" display=\"block\" variant=\"info\">\n        <h3>{translate('onboarding.create_project.pat_help.title')}</h3>\n\n        <p className=\"big-spacer-top big-spacer-bottom\">\n          <FormattedMessage\n            id=\"onboarding.create_project.pat_help.instructions\"\n            defaultMessage={translate('onboarding.create_project.pat_help.instructions')}\n            values={{ alm: translate('onboarding.alm', alm) }}\n          />\n        </p>\n\n        {url && (\n          <div className=\"text-middle\">\n            <img\n              alt=\"\" // Should be ignored by screen readers\n              className=\"spacer-right\"\n              height=\"16\"\n              src={`${getBaseUrl()}/images/alm/${alm}.svg`}\n            />\n            <a href={getPatUrl(alm, url)} rel=\"noopener noreferrer\" target=\"_blank\">\n              {translate('onboarding.create_project.pat_help.link')}\n            </a>\n          </div>\n        )}\n\n        <p className=\"big-spacer-top big-spacer-bottom\">\n          {translate('onboarding.create_project.pat_help.instructions2', alm)}\n        </p>\n\n        <ul>\n          {alm === AlmKeys.Bitbucket && (\n            <>\n              <li>\n                <FormattedMessage\n                  defaultMessage={translate(\n                    'onboarding.create_project.pat_help.bbs_permission_projects'\n                  )}\n                  id=\"onboarding.create_project.pat_help.bbs_permission_projects\"\n                  values={{\n                    perm: (\n                      <strong>\n                        {translate('onboarding.create_project.pat_help.read_permission')}\n                      </strong>\n                    )\n                  }}\n                />\n              </li>\n              <li>\n                <FormattedMessage\n                  defaultMessage={translate(\n                    'onboarding.create_project.pat_help.bbs_permission_repos'\n                  )}\n                  id=\"onboarding.create_project.pat_help.bbs_permission_repos\"\n                  values={{\n                    perm: (\n                      <strong>\n                        {translate('onboarding.create_project.pat_help.read_permission')}\n                      </strong>\n                    )\n                  }}\n                />\n              </li>\n            </>\n          )}\n          {alm === AlmKeys.GitLab && (\n            <li className=\"spacer-bottom\">\n              <strong>\n                {translate('onboarding.create_project.pat_help.gitlab.read_api_permission')}\n              </strong>\n            </li>\n          )}\n        </ul>\n      </Alert>\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { AlmKeys } from '../../../types/alm-settings';\nimport { ALM_INTEGRATION } from '../../settings/components/AdditionalCategoryKeys';\n\nexport interface WrongBindingCountAlertProps {\n  alm: AlmKeys;\n  canAdmin: boolean;\n}\n\nexport default function WrongBindingCountAlert(props: WrongBindingCountAlertProps) {\n  const { alm, canAdmin } = props;\n\n  return (\n    <Alert variant=\"error\">\n      {canAdmin ? (\n        <FormattedMessage\n          defaultMessage={translate('onboarding.create_project.wrong_binding_count.admin')}\n          id=\"onboarding.create_project.wrong_binding_count.admin\"\n          values={{\n            alm: translate('onboarding.alm', alm),\n            url: (\n              <Link\n                to={{\n                  pathname: '/admin/settings',\n                  query: { category: ALM_INTEGRATION }\n                }}>\n                {translate('settings.page')}\n              </Link>\n            )\n          }}\n        />\n      ) : (\n        <FormattedMessage\n          defaultMessage={translate('onboarding.create_project.wrong_binding_count')}\n          id=\"onboarding.create_project.wrong_binding_count\"\n          values={{\n            alm: translate('onboarding.alm', alm)\n          }}\n        />\n      )}\n    </Alert>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getBaseUrl } from 'sonar-ui-common/helpers/urls';\nimport {\n  BitbucketProject,\n  BitbucketProjectRepositories,\n  BitbucketRepository\n} from '../../../types/alm-integration';\nimport { AlmKeys, AlmSettingsInstance } from '../../../types/alm-settings';\nimport BitbucketImportRepositoryForm from './BitbucketImportRepositoryForm';\nimport CreateProjectPageHeader from './CreateProjectPageHeader';\nimport PersonalAccessTokenForm from './PersonalAccessTokenForm';\nimport WrongBindingCountAlert from './WrongBindingCountAlert';\n\nexport interface BitbucketProjectCreateRendererProps {\n  bitbucketSetting?: AlmSettingsInstance;\n  canAdmin?: boolean;\n  importing: boolean;\n  loading: boolean;\n  onImportRepository: () => void;\n  onSearch: (query: string) => void;\n  onSelectRepository: (repo: BitbucketRepository) => void;\n  onPersonalAccessTokenCreate: (token: string) => void;\n  onProjectCreate: (projectKeys: string[]) => void;\n  projects?: BitbucketProject[];\n  projectRepositories?: BitbucketProjectRepositories;\n  searching: boolean;\n  searchResults?: BitbucketRepository[];\n  selectedRepository?: BitbucketRepository;\n  showPersonalAccessTokenForm?: boolean;\n  submittingToken?: boolean;\n  tokenValidationFailed: boolean;\n}\n\nexport default function BitbucketProjectCreateRenderer(props: BitbucketProjectCreateRendererProps) {\n  const {\n    bitbucketSetting,\n    canAdmin,\n    importing,\n    loading,\n    projects,\n    projectRepositories,\n    selectedRepository,\n    searching,\n    searchResults,\n    showPersonalAccessTokenForm,\n    submittingToken,\n    tokenValidationFailed\n  } = props;\n\n  return (\n    <>\n      <CreateProjectPageHeader\n        additionalActions={\n          !showPersonalAccessTokenForm && (\n            <div className=\"display-flex-center pull-right\">\n              <DeferredSpinner className=\"spacer-right\" loading={importing} />\n              <Button\n                className=\"button-large button-primary\"\n                disabled={!selectedRepository || importing}\n                onClick={props.onImportRepository}>\n                {translate('onboarding.create_project.import_selected_repo')}\n              </Button>\n            </div>\n          )\n        }\n        title={\n          <span className=\"text-middle\">\n            <img\n              alt=\"\" // Should be ignored by screen readers\n              className=\"spacer-right\"\n              height=\"24\"\n              src={`${getBaseUrl()}/images/alm/bitbucket.svg`}\n            />\n            {translate('onboarding.create_project.from_bbs')}\n          </span>\n        }\n      />\n\n      {loading && <i className=\"spinner\" />}\n\n      {!loading && !bitbucketSetting && (\n        <WrongBindingCountAlert alm={AlmKeys.Bitbucket} canAdmin={!!canAdmin} />\n      )}\n\n      {!loading &&\n        bitbucketSetting &&\n        (showPersonalAccessTokenForm ? (\n          <PersonalAccessTokenForm\n            almSetting={bitbucketSetting}\n            onPersonalAccessTokenCreate={props.onPersonalAccessTokenCreate}\n            submitting={submittingToken}\n            validationFailed={tokenValidationFailed}\n          />\n        ) : (\n          <BitbucketImportRepositoryForm\n            disableRepositories={importing}\n            onSearch={props.onSearch}\n            onSelectRepository={props.onSelectRepository}\n            projectRepositories={projectRepositories}\n            projects={projects}\n            searchResults={searchResults}\n            searching={searching}\n            selectedRepository={selectedRepository}\n          />\n        ))}\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { WithRouterProps } from 'react-router';\nimport {\n  checkPersonalAccessTokenIsValid,\n  getBitbucketServerProjects,\n  getBitbucketServerRepositories,\n  importBitbucketServerProject,\n  searchForBitbucketServerRepositories,\n  setAlmPersonalAccessToken\n} from '../../../api/alm-integrations';\nimport {\n  BitbucketProject,\n  BitbucketProjectRepositories,\n  BitbucketRepository\n} from '../../../types/alm-integration';\nimport { AlmSettingsInstance } from '../../../types/alm-settings';\nimport BitbucketCreateProjectRenderer from './BitbucketProjectCreateRenderer';\nimport { DEFAULT_BBS_PAGE_SIZE } from './constants';\n\ninterface Props extends Pick<WithRouterProps, 'location'> {\n  canAdmin: boolean;\n  bitbucketSettings: AlmSettingsInstance[];\n  loadingBindings: boolean;\n  onProjectCreate: (projectKeys: string[]) => void;\n}\n\ninterface State {\n  bitbucketSetting?: AlmSettingsInstance;\n  importing: boolean;\n  loading: boolean;\n  patIsValid?: boolean;\n  projects?: BitbucketProject[];\n  projectRepositories?: BitbucketProjectRepositories;\n  searching: boolean;\n  searchResults?: BitbucketRepository[];\n  selectedRepository?: BitbucketRepository;\n  submittingToken?: boolean;\n  tokenValidationFailed: boolean;\n}\n\nexport default class BitbucketProjectCreate extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      // For now, we only handle a single instance. So we always use the first\n      // one from the list.\n      bitbucketSetting: props.bitbucketSettings[0],\n      importing: false,\n      loading: false,\n      searching: false,\n      tokenValidationFailed: false\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchInitialData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.bitbucketSettings.length === 0 && this.props.bitbucketSettings.length > 0) {\n      this.setState({ bitbucketSetting: this.props.bitbucketSettings[0] }, () =>\n        this.fetchInitialData()\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchInitialData = async () => {\n    this.setState({ loading: true });\n\n    const patIsValid = await this.checkPersonalAccessToken().catch(() => false);\n\n    let projects;\n    if (patIsValid) {\n      projects = await this.fetchBitbucketProjects().catch(() => undefined);\n    }\n\n    let projectRepositories;\n    if (projects && projects.length > 0) {\n      projectRepositories = await this.fetchBitbucketRepositories(projects).catch(() => undefined);\n    }\n\n    if (this.mounted) {\n      this.setState({\n        patIsValid,\n        projects,\n        projectRepositories,\n        loading: false\n      });\n    }\n  };\n\n  checkPersonalAccessToken = () => {\n    const { bitbucketSetting } = this.state;\n\n    if (!bitbucketSetting) {\n      return Promise.resolve(false);\n    }\n\n    return checkPersonalAccessTokenIsValid(bitbucketSetting.key);\n  };\n\n  fetchBitbucketProjects = (): Promise<BitbucketProject[] | undefined> => {\n    const { bitbucketSetting } = this.state;\n\n    if (!bitbucketSetting) {\n      return Promise.resolve(undefined);\n    }\n\n    return getBitbucketServerProjects(bitbucketSetting.key).then(({ projects }) => projects);\n  };\n\n  fetchBitbucketRepositories = (\n    projects: BitbucketProject[]\n  ): Promise<BitbucketProjectRepositories | undefined> => {\n    const { bitbucketSetting } = this.state;\n\n    if (!bitbucketSetting) {\n      return Promise.resolve(undefined);\n    }\n\n    return Promise.all(\n      projects.map(p => {\n        return getBitbucketServerRepositories(bitbucketSetting.key, p.name).then(\n          ({ isLastPage, repositories }) => {\n            // Because the WS uses the project name rather than its key to find\n            // repositories, we can match more repositories than we expect. For\n            // example, p.name = \"A1\" would find repositories for projects \"A1\",\n            // \"A10\", \"A11\", etc. This is a limitation of BBS. To make sure we\n            // don't display incorrect information, filter on the project key.\n            const filteredRepositories = repositories.filter(r => r.projectKey === p.key);\n\n            // And because of the above, the \"isLastPage\" cannot be relied upon\n            // either. This one is impossible to get 100% for now. We can only\n            // make some assumptions: by default, the page size for BBS is 25\n            // (this is not part of the payload, so we don't know the actual\n            // number; but changing this implies changing some advanced config,\n            // so it's not likely). If the filtered repos is larger than this\n            // number AND isLastPage is false, we'll keep it at false.\n            // Otherwise, we assume it's true.\n            const realIsLastPage =\n              isLastPage || filteredRepositories.length < DEFAULT_BBS_PAGE_SIZE;\n\n            return {\n              repositories: filteredRepositories,\n              isLastPage: realIsLastPage,\n              projectKey: p.key\n            };\n          }\n        );\n      })\n    ).then(results => {\n      return results.reduce(\n        (acc: BitbucketProjectRepositories, { isLastPage, projectKey, repositories }) => {\n          return { ...acc, [projectKey]: { allShown: isLastPage, repositories } };\n        },\n        {}\n      );\n    });\n  };\n\n  handlePersonalAccessTokenCreate = (token: string) => {\n    const { bitbucketSetting } = this.state;\n\n    if (!bitbucketSetting || token.length < 1) {\n      return;\n    }\n\n    this.setState({ submittingToken: true, tokenValidationFailed: false });\n    setAlmPersonalAccessToken(bitbucketSetting.key, token)\n      .then(this.checkPersonalAccessToken)\n      .then(patIsValid => {\n        if (this.mounted) {\n          this.setState({ submittingToken: false, patIsValid, tokenValidationFailed: !patIsValid });\n          if (patIsValid) {\n            this.fetchInitialData();\n          }\n        }\n      })\n      .catch(() => {\n        if (this.mounted) {\n          this.setState({ submittingToken: false });\n        }\n      });\n  };\n\n  handleImportRepository = () => {\n    const { bitbucketSetting, selectedRepository } = this.state;\n\n    if (!bitbucketSetting || !selectedRepository) {\n      return;\n    }\n\n    this.setState({ importing: true });\n    importBitbucketServerProject(\n      bitbucketSetting.key,\n      selectedRepository.projectKey,\n      selectedRepository.slug\n    )\n      .then(({ project: { key } }) => {\n        if (this.mounted) {\n          this.setState({ importing: false });\n          this.props.onProjectCreate([key]);\n        }\n      })\n      .catch(() => {\n        if (this.mounted) {\n          this.setState({ importing: false });\n        }\n      });\n  };\n\n  handleSearch = (query: string) => {\n    const { bitbucketSetting } = this.state;\n\n    if (!bitbucketSetting) {\n      return;\n    }\n\n    if (!query) {\n      this.setState({ searching: false, searchResults: undefined, selectedRepository: undefined });\n      return;\n    }\n\n    this.setState({ searching: true, selectedRepository: undefined });\n    searchForBitbucketServerRepositories(bitbucketSetting.key, query)\n      .then(({ repositories }) => {\n        if (this.mounted) {\n          this.setState({ searching: false, searchResults: repositories });\n        }\n      })\n      .catch(() => {\n        if (this.mounted) {\n          this.setState({ searching: false });\n        }\n      });\n  };\n\n  handleSelectRepository = (selectedRepository: BitbucketRepository) => {\n    this.setState({ selectedRepository });\n  };\n\n  render() {\n    const { canAdmin, loadingBindings, location } = this.props;\n    const {\n      bitbucketSetting,\n      importing,\n      loading,\n      patIsValid,\n      projectRepositories,\n      projects,\n      searching,\n      searchResults,\n      selectedRepository,\n      submittingToken,\n      tokenValidationFailed\n    } = this.state;\n\n    return (\n      <BitbucketCreateProjectRenderer\n        bitbucketSetting={bitbucketSetting}\n        canAdmin={canAdmin}\n        importing={importing}\n        loading={loading || loadingBindings}\n        onImportRepository={this.handleImportRepository}\n        onPersonalAccessTokenCreate={this.handlePersonalAccessTokenCreate}\n        onProjectCreate={this.props.onProjectCreate}\n        onSearch={this.handleSearch}\n        onSelectRepository={this.handleSelectRepository}\n        projectRepositories={projectRepositories}\n        projects={projects}\n        searchResults={searchResults}\n        searching={searching}\n        selectedRepository={selectedRepository}\n        showPersonalAccessTokenForm={!patIsValid || Boolean(location.query.resetPat)}\n        submittingToken={submittingToken}\n        tokenValidationFailed={tokenValidationFailed}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n\nexport const PROJECT_NAME_MAX_LEN = 255;\n\nexport const DEFAULT_BBS_PAGE_SIZE = 25;\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { getBaseUrl } from 'sonar-ui-common/helpers/urls';\nimport { AlmKeys } from '../../../types/alm-settings';\nimport { CreateProjectModes } from './types';\n\nexport interface CreateProjectModeSelectionProps {\n  almCounts: { [key in AlmKeys]: number };\n  loadingBindings: boolean;\n  onSelectMode: (mode: CreateProjectModes) => void;\n}\n\nfunction renderAlmOption(\n  props: CreateProjectModeSelectionProps,\n  alm: AlmKeys,\n  mode: CreateProjectModes\n) {\n  const { almCounts, loadingBindings } = props;\n\n  const count = almCounts[alm];\n  const disabled = count !== 1 || loadingBindings;\n\n  return (\n    <button\n      className={classNames(\n        'button button-huge big-spacer-left display-flex-column create-project-mode-type-alm',\n        { disabled }\n      )}\n      disabled={disabled}\n      onClick={() => props.onSelectMode(mode)}\n      type=\"button\">\n      <img\n        alt=\"\" // Should be ignored by screen readers\n        height={80}\n        src={`${getBaseUrl()}/images/alm/${alm}.svg`}\n      />\n      <div className=\"medium big-spacer-top\">\n        {translate('onboarding.create_project.select_method', alm)}\n      </div>\n\n      {loadingBindings && (\n        <span>\n          {translate('onboarding.create_project.check_alm_supported')}\n          <i className=\"little-spacer-left spinner\" />\n        </span>\n      )}\n\n      {!loadingBindings && disabled && (\n        <div className=\"text-muted small spacer-top\" style={{ lineHeight: 1.5 }}>\n          {translate('onboarding.create_project.alm_not_configured')}\n          <HelpTooltip\n            className=\"little-spacer-left\"\n            overlay={\n              count === 0\n                ? translate('onboarding.create_project.zero_alm_instances', alm)\n                : `${translate('onboarding.create_project.too_many_alm_instances', alm)} \n                  ${translateWithParameters(\n                    'onboarding.create_project.alm_instances_count_X',\n                    count\n                  )}`\n            }\n          />\n        </div>\n      )}\n    </button>\n  );\n}\n\nexport default function CreateProjectModeSelection(props: CreateProjectModeSelectionProps) {\n  return (\n    <>\n      <header className=\"huge-spacer-top big-spacer-bottom padded\">\n        <h1 className=\"text-center huge big-spacer-bottom\">\n          {translate('my_account.create_new.TRK')}\n        </h1>\n        <p className=\"text-center big\">{translate('onboarding.create_project.select_method')}</p>\n      </header>\n\n      <div className=\"create-project-modes huge-spacer-top display-flex-justify-center\">\n        <button\n          className=\"button button-huge display-flex-column create-project-mode-type-manual\"\n          onClick={() => props.onSelectMode(CreateProjectModes.Manual)}\n          type=\"button\">\n          <img\n            alt=\"\" // Should be ignored by screen readers\n            height={80}\n            src={`${getBaseUrl()}/images/sonarcloud/analysis/manual.svg`}\n          />\n          <div className=\"medium big-spacer-top\">\n            {translate('onboarding.create_project.select_method.manual')}\n          </div>\n        </button>\n\n        {renderAlmOption(props, AlmKeys.Bitbucket, CreateProjectModes.BitbucketServer)}\n        {renderAlmOption(props, AlmKeys.GitHub, CreateProjectModes.GitHub)}\n        {renderAlmOption(props, AlmKeys.GitLab, CreateProjectModes.GitLab)}\n      </div>\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport ListFooter from 'sonar-ui-common/components/controls/ListFooter';\nimport Radio from 'sonar-ui-common/components/controls/Radio';\nimport SearchBox from 'sonar-ui-common/components/controls/SearchBox';\nimport SearchSelect from 'sonar-ui-common/components/controls/SearchSelect';\nimport CheckIcon from 'sonar-ui-common/components/icons/CheckIcon';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getBaseUrl } from '../../../helpers/system';\nimport { GithubOrganization, GithubRepository } from '../../../types/alm-integration';\nimport CreateProjectPageHeader from './CreateProjectPageHeader';\n\nexport interface GitHubProjectCreateRendererProps {\n  canAdmin: boolean;\n  error: boolean;\n  importing: boolean;\n  loadingBindings: boolean;\n  loadingOrganizations: boolean;\n  loadingRepositories: boolean;\n  onImportRepository: () => void;\n  onLoadMore: () => void;\n  onSearch: (q: string) => void;\n  onSelectOrganization: (key: string) => void;\n  onSelectRepository: (key: string) => void;\n  organizations: GithubOrganization[];\n  repositories?: GithubRepository[];\n  repositoryPaging: T.Paging;\n  searchQuery: string;\n  selectedOrganization?: GithubOrganization;\n  selectedRepository?: GithubRepository;\n}\n\nfunction orgToOption({ key, name }: GithubOrganization) {\n  return { value: key, label: name };\n}\n\nconst handleSearch = (organizations: GithubOrganization[]) => (q: string) =>\n  Promise.resolve(organizations.filter(o => !q || o.name.includes(q)).map(orgToOption));\n\nfunction renderRepositoryList(props: GitHubProjectCreateRendererProps) {\n  const {\n    importing,\n    loadingRepositories,\n    repositories,\n    repositoryPaging,\n    searchQuery,\n    selectedOrganization,\n    selectedRepository\n  } = props;\n\n  const isChecked = (repository: GithubRepository) =>\n    !!repository.sqProjectKey ||\n    (!!selectedRepository && selectedRepository.key === repository.key);\n\n  const isDisabled = (repository: GithubRepository) =>\n    !!repository.sqProjectKey || loadingRepositories || importing;\n\n  return (\n    selectedOrganization &&\n    repositories && (\n      <div className=\"boxed-group padded display-flex-wrap\">\n        <div className=\"width-100\">\n          <SearchBox\n            className=\"big-spacer-bottom\"\n            onChange={props.onSearch}\n            placeholder={translate('onboarding.create_project.search_repositories')}\n            value={searchQuery}\n          />\n        </div>\n\n        {repositories.length === 0 ? (\n          <div className=\"padded\">\n            <DeferredSpinner loading={loadingRepositories}>\n              {translate('no_results')}\n            </DeferredSpinner>\n          </div>\n        ) : (\n          repositories.map(r => (\n            <Radio\n              className=\"spacer-top spacer-bottom padded create-project-github-repository\"\n              key={r.key}\n              checked={isChecked(r)}\n              disabled={isDisabled(r)}\n              value={r.key}\n              onCheck={props.onSelectRepository}>\n              <div className=\"big overflow-hidden\" title={r.name}>\n                <div className=\"text-ellipsis\">{r.name}</div>\n                {r.sqProjectKey && (\n                  <em className=\"notice text-muted-2 small display-flex-center\">\n                    {translate('onboarding.create_project.repository_imported')}\n                    <CheckIcon className=\"little-spacer-left\" size={12} />\n                  </em>\n                )}\n              </div>\n            </Radio>\n          ))\n        )}\n\n        <div className=\"display-flex-justify-center width-100\">\n          <ListFooter\n            count={repositories.length}\n            total={repositoryPaging.total}\n            loadMore={props.onLoadMore}\n            loading={loadingRepositories}\n          />\n        </div>\n      </div>\n    )\n  );\n}\n\nexport default function GitHubProjectCreateRenderer(props: GitHubProjectCreateRendererProps) {\n  const {\n    canAdmin,\n    error,\n    importing,\n    loadingBindings,\n    loadingOrganizations,\n    organizations,\n    selectedOrganization,\n    selectedRepository\n  } = props;\n\n  if (loadingBindings) {\n    return <DeferredSpinner />;\n  }\n\n  return (\n    <div>\n      <CreateProjectPageHeader\n        additionalActions={\n          selectedOrganization && (\n            <div className=\"display-flex-center pull-right\">\n              <DeferredSpinner className=\"spacer-right\" loading={importing} />\n              <Button\n                className=\"button-large button-primary\"\n                disabled={!selectedRepository || importing}\n                onClick={props.onImportRepository}>\n                {translate('onboarding.create_project.import_selected_repo')}\n              </Button>\n            </div>\n          )\n        }\n        title={\n          <span className=\"text-middle display-flex-center\">\n            <img\n              alt=\"\" // Should be ignored by screen readers\n              className=\"spacer-right\"\n              height={24}\n              src={`${getBaseUrl()}/images/alm/github.svg`}\n            />\n            {translate('onboarding.create_project.github.title')}\n          </span>\n        }\n      />\n\n      {error ? (\n        <div className=\"display-flex-justify-center\">\n          <div className=\"boxed-group padded width-50 huge-spacer-top\">\n            <h2 className=\"big-spacer-bottom\">\n              {translate('onboarding.create_project.github.warning.title')}\n            </h2>\n            <Alert variant=\"warning\">\n              {canAdmin ? (\n                <FormattedMessage\n                  id=\"onboarding.create_project.github.warning.message_admin\"\n                  defaultMessage={translate(\n                    'onboarding.create_project.github.warning.message_admin'\n                  )}\n                  values={{\n                    link: (\n                      <Link to=\"/admin/settings?category=almintegration\">\n                        {translate('onboarding.create_project.github.warning.message_admin.link')}\n                      </Link>\n                    )\n                  }}\n                />\n              ) : (\n                translate('onboarding.create_project.github.warning.message')\n              )}\n            </Alert>\n          </div>\n        </div>\n      ) : (\n        <DeferredSpinner loading={loadingOrganizations}>\n          <div className=\"form-field\">\n            <label>{translate('onboarding.create_project.github.choose_organization')}</label>\n            {organizations.length > 0 ? (\n              <SearchSelect\n                defaultOptions={organizations.map(orgToOption)}\n                onSearch={handleSearch(organizations)}\n                minimumQueryLength={0}\n                onSelect={({ value }) => props.onSelectOrganization(value)}\n                value={selectedOrganization && orgToOption(selectedOrganization)}\n              />\n            ) : (\n              !loadingOrganizations && (\n                <Alert className=\"spacer-top\" variant=\"error\">\n                  {canAdmin ? (\n                    <FormattedMessage\n                      id=\"onboarding.create_project.github.no_orgs_admin\"\n                      defaultMessage={translate('onboarding.create_project.github.no_orgs_admin')}\n                      values={{\n                        link: (\n                          <Link to=\"/admin/settings?category=almintegration\">\n                            {translate(\n                              'onboarding.create_project.github.warning.message_admin.link'\n                            )}\n                          </Link>\n                        )\n                      }}\n                    />\n                  ) : (\n                    translate('onboarding.create_project.github.no_orgs')\n                  )}\n                </Alert>\n              )\n            )}\n          </div>\n        </DeferredSpinner>\n      )}\n\n      {renderRepositoryList(props)}\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { debounce } from 'lodash';\nimport * as React from 'react';\nimport { WithRouterProps } from 'react-router';\nimport { getHostUrl } from 'sonar-ui-common/helpers/urls';\nimport {\n  getGithubClientId,\n  getGithubOrganizations,\n  getGithubRepositories,\n  importGithubRepository\n} from '../../../api/alm-integrations';\nimport { GithubOrganization, GithubRepository } from '../../../types/alm-integration';\nimport { AlmKeys, AlmSettingsInstance } from '../../../types/alm-settings';\nimport GitHubProjectCreateRenderer from './GitHubProjectCreateRenderer';\n\ninterface Props extends Pick<WithRouterProps, 'location' | 'router'> {\n  canAdmin: boolean;\n  loadingBindings: boolean;\n  onProjectCreate: (projectKeys: string[]) => void;\n  settings: AlmSettingsInstance[];\n}\n\ninterface State {\n  error: boolean;\n  importing: boolean;\n  loadingOrganizations: boolean;\n  loadingRepositories: boolean;\n  organizations: GithubOrganization[];\n  repositoryPaging: T.Paging;\n  repositories: GithubRepository[];\n  searchQuery: string;\n  selectedOrganization?: GithubOrganization;\n  selectedRepository?: GithubRepository;\n  settings?: AlmSettingsInstance;\n}\n\nconst REPOSITORY_PAGE_SIZE = 30;\n\nexport default class GitHubProjectCreate extends React.Component<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      error: false,\n      importing: false,\n      loadingOrganizations: true,\n      loadingRepositories: false,\n      organizations: [],\n      repositories: [],\n      repositoryPaging: { pageSize: REPOSITORY_PAGE_SIZE, total: 0, pageIndex: 1 },\n      searchQuery: '',\n      settings: props.settings[0]\n    };\n\n    this.triggerSearch = debounce(this.triggerSearch, 250);\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n\n    this.initialize();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.settings.length === 0 && this.props.settings.length > 0) {\n      this.setState({ settings: this.props.settings[0] }, () => this.initialize());\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  async initialize() {\n    const { location, router } = this.props;\n    const { settings } = this.state;\n\n    if (!settings || !settings.url) {\n      this.setState({ error: true });\n      return;\n    } else {\n      this.setState({ error: false });\n    }\n\n    const code = location.query?.code;\n\n    try {\n      if (!code) {\n        await this.redirectToGithub(settings);\n      } else {\n        delete location.query.code;\n        router.replace(location);\n        await this.fetchOrganizations(settings, code);\n      }\n    } catch (e) {\n      if (this.mounted) {\n        this.setState({ error: true });\n      }\n    }\n  }\n\n  async redirectToGithub(settings: AlmSettingsInstance) {\n    if (!settings.url) {\n      return;\n    }\n\n    const { clientId } = await getGithubClientId(settings.key);\n\n    if (!clientId) {\n      this.setState({ error: true });\n      return;\n    }\n\n    const queryParams = [\n      { param: 'client_id', value: clientId },\n      { param: 'redirect_uri', value: `${getHostUrl()}/projects/create?mode=${AlmKeys.GitHub}` }\n    ]\n      .map(({ param, value }) => `${param}=${value}`)\n      .join('&');\n\n    let instanceRootUrl;\n    // Strip the api section from the url, since we're not hitting the api here.\n    if (settings.url.includes('/api/v3')) {\n      // GitHub Enterprise\n      instanceRootUrl = settings.url.replace('/api/v3', '');\n    } else {\n      // github.com\n      instanceRootUrl = settings.url.replace('api.', '');\n    }\n\n    // strip the trailing /\n    instanceRootUrl = instanceRootUrl.replace(/\\/$/, '');\n    window.location.replace(`${instanceRootUrl}/login/oauth/authorize?${queryParams}`);\n  }\n\n  async fetchOrganizations(settings: AlmSettingsInstance, token: string) {\n    const { organizations } = await getGithubOrganizations(settings.key, token);\n\n    if (this.mounted) {\n      this.setState({ loadingOrganizations: false, organizations });\n    }\n  }\n\n  async fetchRepositories(params: { organizationKey: string; page?: number; query?: string }) {\n    const { organizationKey, page = 1, query } = params;\n    const { settings } = this.state;\n\n    if (!settings) {\n      this.setState({ error: true });\n      return;\n    }\n\n    this.setState({ loadingRepositories: true });\n\n    try {\n      const data = await getGithubRepositories({\n        almSetting: settings.key,\n        organization: organizationKey,\n        pageSize: REPOSITORY_PAGE_SIZE,\n        page,\n        query\n      });\n\n      if (this.mounted) {\n        this.setState(({ repositories }) => ({\n          loadingRepositories: false,\n          repositoryPaging: data.paging,\n          repositories: page === 1 ? data.repositories : [...repositories, ...data.repositories]\n        }));\n      }\n    } catch (_) {\n      if (this.mounted) {\n        this.setState({\n          loadingRepositories: false,\n          repositoryPaging: { pageIndex: 1, pageSize: REPOSITORY_PAGE_SIZE, total: 0 },\n          repositories: []\n        });\n      }\n    }\n  }\n\n  triggerSearch = (query: string) => {\n    const { selectedOrganization } = this.state;\n    if (selectedOrganization) {\n      this.setState({ selectedRepository: undefined });\n      this.fetchRepositories({ organizationKey: selectedOrganization.key, query });\n    }\n  };\n\n  handleSelectOrganization = (key: string) => {\n    this.setState(({ organizations }) => ({\n      searchQuery: '',\n      selectedRepository: undefined,\n      selectedOrganization: organizations.find(o => o.key === key)\n    }));\n    this.fetchRepositories({ organizationKey: key });\n  };\n\n  handleSelectRepository = (key: string) => {\n    this.setState(({ repositories }) => ({\n      selectedRepository: repositories?.find(r => r.key === key)\n    }));\n  };\n\n  handleSearch = (searchQuery: string) => {\n    this.setState({ searchQuery });\n    this.triggerSearch(searchQuery);\n  };\n\n  handleLoadMore = () => {\n    const { repositoryPaging, searchQuery, selectedOrganization } = this.state;\n\n    if (selectedOrganization) {\n      this.fetchRepositories({\n        organizationKey: selectedOrganization.key,\n        page: repositoryPaging.pageIndex + 1,\n        query: searchQuery\n      });\n    }\n  };\n\n  handleImportRepository = async () => {\n    const { selectedOrganization, selectedRepository, settings } = this.state;\n\n    if (settings && selectedOrganization && selectedRepository) {\n      this.setState({ importing: true });\n\n      try {\n        const { project } = await importGithubRepository(\n          settings.key,\n          selectedOrganization.key,\n          selectedRepository.key\n        );\n\n        this.props.onProjectCreate([project.key]);\n      } finally {\n        if (this.mounted) {\n          this.setState({ importing: false });\n        }\n      }\n    }\n  };\n\n  render() {\n    const { canAdmin, loadingBindings } = this.props;\n    const {\n      error,\n      importing,\n      loadingOrganizations,\n      loadingRepositories,\n      organizations,\n      repositoryPaging,\n      repositories,\n      searchQuery,\n      selectedOrganization,\n      selectedRepository\n    } = this.state;\n\n    return (\n      <GitHubProjectCreateRenderer\n        canAdmin={canAdmin}\n        error={error}\n        importing={importing}\n        loadingBindings={loadingBindings}\n        loadingOrganizations={loadingOrganizations}\n        loadingRepositories={loadingRepositories}\n        onImportRepository={this.handleImportRepository}\n        onLoadMore={this.handleLoadMore}\n        onSearch={this.handleSearch}\n        onSelectOrganization={this.handleSelectOrganization}\n        onSelectRepository={this.handleSelectRepository}\n        organizations={organizations}\n        repositoryPaging={repositoryPaging}\n        searchQuery={searchQuery}\n        repositories={repositories}\n        selectedOrganization={selectedOrganization}\n        selectedRepository={selectedRepository}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport ListFooter from 'sonar-ui-common/components/controls/ListFooter';\nimport SearchBox from 'sonar-ui-common/components/controls/SearchBox';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport CheckIcon from 'sonar-ui-common/components/icons/CheckIcon';\nimport DetachIcon from 'sonar-ui-common/components/icons/DetachIcon';\nimport QualifierIcon from 'sonar-ui-common/components/icons/QualifierIcon';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getProjectUrl } from '../../../helpers/urls';\nimport { GitlabProject } from '../../../types/alm-integration';\nimport { ComponentQualifier } from '../../../types/component';\nimport { CreateProjectModes } from './types';\n\nexport interface GitlabProjectSelectionFormProps {\n  importingGitlabProjectId?: string;\n  loadingMore: boolean;\n  onImport: (gitlabProjectId: string) => void;\n  onLoadMore: () => void;\n  onSearch: (searchQuery: string) => void;\n  projects?: GitlabProject[];\n  projectsPaging: T.Paging;\n  searching: boolean;\n  searchQuery: string;\n}\n\nexport default function GitlabProjectSelectionForm(props: GitlabProjectSelectionFormProps) {\n  const {\n    importingGitlabProjectId,\n    loadingMore,\n    projects = [],\n    projectsPaging,\n    searching,\n    searchQuery\n  } = props;\n\n  if (projects.length === 0 && searchQuery.length === 0 && !searching) {\n    return (\n      <Alert className=\"spacer-top\" variant=\"warning\">\n        <FormattedMessage\n          defaultMessage={translate('onboarding.create_project.gitlab.no_projects')}\n          id=\"onboarding.create_project.gitlab.no_projects\"\n          values={{\n            link: (\n              <Link\n                to={{\n                  pathname: '/projects/create',\n                  query: { mode: CreateProjectModes.GitLab, resetPat: 1 }\n                }}>\n                {translate('onboarding.create_project.update_your_token')}\n              </Link>\n            )\n          }}\n        />\n      </Alert>\n    );\n  }\n\n  return (\n    <div className=\"boxed-group big-padded create-project-import-gitlab\">\n      <SearchBox\n        className=\"spacer\"\n        loading={searching}\n        minLength={3}\n        onChange={props.onSearch}\n        placeholder={translate('onboarding.create_project.gitlab.search_prompt')}\n      />\n\n      <hr />\n\n      {projects.length === 0 ? (\n        <div className=\"padded\">{translate('no_results')}</div>\n      ) : (\n        <table className=\"data zebra zebra-hover\">\n          <tbody>\n            {projects.map(project => (\n              <tr key={project.id}>\n                <td>\n                  <Tooltip overlay={project.slug}>\n                    <strong className=\"project-name display-inline-block text-ellipsis\">\n                      {project.name}\n                    </strong>\n                  </Tooltip>\n                  <br />\n                  <Tooltip overlay={project.pathSlug}>\n                    <span className=\"text-muted project-path display-inline-block text-ellipsis\">\n                      {project.pathName}\n                    </span>\n                  </Tooltip>\n                </td>\n                <td>\n                  <a\n                    className=\"display-inline-flex-center big-spacer-right\"\n                    href={project.url}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\">\n                    <DetachIcon className=\"little-spacer-right\" />\n                    {translate('onboarding.create_project.gitlab.link')}\n                  </a>\n                </td>\n                {project.sqProjectKey ? (\n                  <>\n                    <td>\n                      <span className=\"display-flex-center display-flex-justify-end already-set-up\">\n                        <CheckIcon className=\"little-spacer-right\" size={12} />\n                        {translate('onboarding.create_project.repository_imported')}:\n                      </span>\n                    </td>\n                    <td>\n                      <div className=\"sq-project-link text-ellipsis\">\n                        <Link to={getProjectUrl(project.sqProjectKey)}>\n                          <QualifierIcon\n                            className=\"spacer-right\"\n                            qualifier={ComponentQualifier.Project}\n                          />\n                          {project.sqProjectName}\n                        </Link>\n                      </div>\n                    </td>\n                  </>\n                ) : (\n                  <td colSpan={2} className=\"text-right\">\n                    <Button\n                      disabled={!!importingGitlabProjectId}\n                      onClick={() => props.onImport(project.id)}>\n                      {translate('onboarding.create_project.gitlab.set_up')}\n                      {importingGitlabProjectId === project.id && (\n                        <DeferredSpinner className=\"spacer-left\" />\n                      )}\n                    </Button>\n                  </td>\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n      <ListFooter\n        count={projects.length}\n        loadMore={props.onLoadMore}\n        loading={loadingMore}\n        total={projectsPaging.total}\n      />\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getBaseUrl } from 'sonar-ui-common/helpers/urls';\nimport { GitlabProject } from '../../../types/alm-integration';\nimport { AlmKeys, AlmSettingsInstance } from '../../../types/alm-settings';\nimport CreateProjectPageHeader from './CreateProjectPageHeader';\nimport GitlabProjectSelectionForm from './GitlabProjectSelectionForm';\nimport PersonalAccessTokenForm from './PersonalAccessTokenForm';\nimport WrongBindingCountAlert from './WrongBindingCountAlert';\n\nexport interface GitlabProjectCreateRendererProps {\n  canAdmin?: boolean;\n  importingGitlabProjectId?: string;\n  loading: boolean;\n  loadingMore: boolean;\n  onImport: (gitlabProjectId: string) => void;\n  onLoadMore: () => void;\n  onPersonalAccessTokenCreate: (pat: string) => void;\n  onSearch: (searchQuery: string) => void;\n  projects?: GitlabProject[];\n  projectsPaging: T.Paging;\n  searching: boolean;\n  searchQuery: string;\n  settings?: AlmSettingsInstance;\n  showPersonalAccessTokenForm?: boolean;\n  submittingToken?: boolean;\n  tokenValidationFailed: boolean;\n}\n\nexport default function GitlabProjectCreateRenderer(props: GitlabProjectCreateRendererProps) {\n  const {\n    canAdmin,\n    importingGitlabProjectId,\n    loading,\n    loadingMore,\n    projects,\n    projectsPaging,\n    searching,\n    searchQuery,\n    settings,\n    showPersonalAccessTokenForm,\n    submittingToken,\n    tokenValidationFailed\n  } = props;\n\n  return (\n    <>\n      <CreateProjectPageHeader\n        title={\n          <span className=\"text-middle\">\n            <img\n              alt=\"\" // Should be ignored by screen readers\n              className=\"spacer-right\"\n              height=\"24\"\n              src={`${getBaseUrl()}/images/alm/gitlab.svg`}\n            />\n            {translate('onboarding.create_project.gitlab.title')}\n          </span>\n        }\n      />\n\n      {loading && <i className=\"spinner\" />}\n\n      {!loading && !settings && (\n        <WrongBindingCountAlert alm={AlmKeys.GitLab} canAdmin={!!canAdmin} />\n      )}\n\n      {!loading &&\n        settings &&\n        (showPersonalAccessTokenForm ? (\n          <PersonalAccessTokenForm\n            almSetting={settings}\n            onPersonalAccessTokenCreate={props.onPersonalAccessTokenCreate}\n            submitting={submittingToken}\n            validationFailed={tokenValidationFailed}\n          />\n        ) : (\n          <GitlabProjectSelectionForm\n            importingGitlabProjectId={importingGitlabProjectId}\n            loadingMore={loadingMore}\n            onImport={props.onImport}\n            onLoadMore={props.onLoadMore}\n            onSearch={props.onSearch}\n            projects={projects}\n            projectsPaging={projectsPaging}\n            searching={searching}\n            searchQuery={searchQuery}\n          />\n        ))}\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { WithRouterProps } from 'react-router';\nimport {\n  checkPersonalAccessTokenIsValid,\n  getGitlabProjects,\n  importGitlabProject,\n  setAlmPersonalAccessToken\n} from '../../../api/alm-integrations';\nimport { GitlabProject } from '../../../types/alm-integration';\nimport { AlmSettingsInstance } from '../../../types/alm-settings';\nimport GitlabProjectCreateRenderer from './GitlabProjectCreateRenderer';\n\ninterface Props extends Pick<WithRouterProps, 'location' | 'router'> {\n  canAdmin: boolean;\n  loadingBindings: boolean;\n  onProjectCreate: (projectKeys: string[]) => void;\n  settings: AlmSettingsInstance[];\n}\n\ninterface State {\n  importingGitlabProjectId?: string;\n  loading: boolean;\n  loadingMore: boolean;\n  projects?: GitlabProject[];\n  projectsPaging: T.Paging;\n  submittingToken: boolean;\n  tokenIsValid: boolean;\n  tokenValidationFailed: boolean;\n  searching: boolean;\n  searchQuery: string;\n  settings?: AlmSettingsInstance;\n}\n\nconst GITLAB_PROJECTS_PAGESIZE = 30;\n\nexport default class GitlabProjectCreate extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      loadingMore: false,\n      projectsPaging: { pageIndex: 1, total: 0, pageSize: GITLAB_PROJECTS_PAGESIZE },\n      tokenIsValid: false,\n      searching: false,\n      searchQuery: '',\n      settings: props.settings.length === 1 ? props.settings[0] : undefined,\n      submittingToken: false,\n      tokenValidationFailed: false\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchInitialData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.settings.length === 0 && this.props.settings.length > 0) {\n      this.setState(\n        { settings: this.props.settings.length === 1 ? this.props.settings[0] : undefined },\n        () => this.fetchInitialData()\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchInitialData = async () => {\n    this.setState({ loading: true });\n\n    const tokenIsValid = await this.checkPersonalAccessToken();\n\n    let result;\n    if (tokenIsValid) {\n      result = await this.fetchProjects();\n    }\n\n    if (this.mounted) {\n      if (result) {\n        const { projects, projectsPaging } = result;\n\n        this.setState({\n          tokenIsValid,\n          loading: false,\n          projects,\n          projectsPaging\n        });\n      } else {\n        this.setState({\n          loading: false\n        });\n      }\n    }\n  };\n\n  checkPersonalAccessToken = () => {\n    const { settings } = this.state;\n\n    if (!settings) {\n      return Promise.resolve(false);\n    }\n\n    return checkPersonalAccessTokenIsValid(settings.key).catch(() => false);\n  };\n\n  handleError = () => {\n    if (this.mounted) {\n      this.setState({ tokenIsValid: false });\n    }\n\n    return undefined;\n  };\n\n  fetchProjects = async (pageIndex = 1, query?: string) => {\n    const { settings } = this.state;\n\n    if (!settings) {\n      return Promise.resolve(undefined);\n    }\n\n    try {\n      return await getGitlabProjects({\n        almSetting: settings.key,\n        page: pageIndex,\n        pageSize: GITLAB_PROJECTS_PAGESIZE,\n        query\n      });\n    } catch (_) {\n      return this.handleError();\n    }\n  };\n\n  doImport = async (gitlabProjectId: string) => {\n    const { settings } = this.state;\n\n    if (!settings) {\n      return Promise.resolve(undefined);\n    }\n\n    try {\n      return await importGitlabProject({\n        almSetting: settings.key,\n        gitlabProjectId\n      });\n    } catch (_) {\n      return this.handleError();\n    }\n  };\n\n  handleImport = async (gitlabProjectId: string) => {\n    this.setState({ importingGitlabProjectId: gitlabProjectId });\n\n    const result = await this.doImport(gitlabProjectId);\n\n    if (this.mounted) {\n      this.setState({ importingGitlabProjectId: undefined });\n\n      if (result) {\n        this.props.onProjectCreate([result.project.key]);\n      }\n    }\n  };\n\n  handleLoadMore = async () => {\n    this.setState({ loadingMore: true });\n\n    const {\n      projectsPaging: { pageIndex },\n      searchQuery\n    } = this.state;\n\n    const result = await this.fetchProjects(pageIndex + 1, searchQuery);\n\n    if (this.mounted) {\n      this.setState(({ projects = [], projectsPaging }) => ({\n        loadingMore: false,\n        projects: result ? [...projects, ...result.projects] : projects,\n        projectsPaging: result ? result.projectsPaging : projectsPaging\n      }));\n    }\n  };\n\n  handleSearch = async (searchQuery: string) => {\n    this.setState({ searching: true, searchQuery });\n\n    const result = await this.fetchProjects(1, searchQuery);\n\n    if (this.mounted) {\n      this.setState(({ projects, projectsPaging }) => ({\n        searching: false,\n        projects: result ? result.projects : projects,\n        projectsPaging: result ? result.projectsPaging : projectsPaging\n      }));\n    }\n  };\n\n  cleanUrl = () => {\n    const { location, router } = this.props;\n    delete location.query.resetPat;\n    router.replace(location);\n  };\n\n  handlePersonalAccessTokenCreate = async (token: string) => {\n    const { settings } = this.state;\n\n    if (!settings || token.length < 1) {\n      return;\n    }\n\n    this.setState({ submittingToken: true, tokenValidationFailed: false });\n\n    try {\n      await setAlmPersonalAccessToken(settings.key, token);\n\n      const patIsValid = await this.checkPersonalAccessToken();\n\n      if (this.mounted) {\n        this.setState({\n          submittingToken: false,\n          tokenIsValid: patIsValid,\n          tokenValidationFailed: !patIsValid\n        });\n\n        if (patIsValid) {\n          this.cleanUrl();\n          await this.fetchInitialData();\n        }\n      }\n    } catch (e) {\n      if (this.mounted) {\n        this.setState({ submittingToken: false });\n      }\n    }\n  };\n\n  render() {\n    const { canAdmin, loadingBindings, location } = this.props;\n    const {\n      importingGitlabProjectId,\n      loading,\n      loadingMore,\n      projects,\n      projectsPaging,\n      tokenIsValid,\n      searching,\n      searchQuery,\n      settings,\n      submittingToken,\n      tokenValidationFailed\n    } = this.state;\n\n    return (\n      <GitlabProjectCreateRenderer\n        settings={settings}\n        canAdmin={canAdmin}\n        importingGitlabProjectId={importingGitlabProjectId}\n        loading={loading || loadingBindings}\n        loadingMore={loadingMore}\n        onImport={this.handleImport}\n        onLoadMore={this.handleLoadMore}\n        onPersonalAccessTokenCreate={this.handlePersonalAccessTokenCreate}\n        onSearch={this.handleSearch}\n        projects={projects}\n        projectsPaging={projectsPaging}\n        searching={searching}\n        searchQuery={searchQuery}\n        showPersonalAccessTokenForm={!tokenIsValid || Boolean(location.query.resetPat)}\n        submittingToken={submittingToken}\n        tokenValidationFailed={tokenValidationFailed}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport { debounce } from 'lodash';\nimport * as React from 'react';\nimport { SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport ValidationInput from 'sonar-ui-common/components/controls/ValidationInput';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { createProject, doesComponentExists } from '../../../api/components';\nimport ProjectKeyInput from '../../../components/common/ProjectKeyInput';\nimport { validateProjectKey } from '../../../helpers/projects';\nimport { ProjectKeyValidationResult } from '../../../types/component';\nimport { PROJECT_NAME_MAX_LEN } from './constants';\nimport CreateProjectPageHeader from './CreateProjectPageHeader';\nimport './ManualProjectCreate.css';\n\ninterface Props {\n  onProjectCreate: (projectKeys: string[]) => void;\n}\n\ninterface State {\n  projectName: string;\n  projectNameChanged: boolean;\n  projectNameError?: string;\n  projectKey: string;\n  projectKeyError?: string;\n  submitting: boolean;\n  touched: boolean;\n  validating: boolean;\n}\n\ntype ValidState = State & Required<Pick<State, 'projectKey' | 'projectName'>>;\n\nexport default class ManualProjectCreate extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      projectKey: '',\n      projectName: '',\n      projectNameChanged: false,\n      submitting: false,\n      touched: false,\n      validating: false\n    };\n    this.checkFreeKey = debounce(this.checkFreeKey, 250);\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  checkFreeKey = (key: string) => {\n    return doesComponentExists({ component: key })\n      .then(alreadyExist => {\n        if (this.mounted && key === this.state.projectKey) {\n          if (!alreadyExist) {\n            this.setState({ projectKeyError: undefined, validating: false });\n          } else {\n            this.setState({\n              projectKeyError: translate('onboarding.create_project.project_key.taken'),\n              touched: true,\n              validating: false\n            });\n          }\n        }\n      })\n      .catch(() => {\n        if (this.mounted && key === this.state.projectKey) {\n          this.setState({ projectKeyError: undefined, validating: false });\n        }\n      });\n  };\n\n  canSubmit(state: State): state is ValidState {\n    const { projectKey, projectKeyError, projectName, projectNameError } = state;\n    return Boolean(\n      projectKeyError === undefined &&\n        projectNameError === undefined &&\n        projectKey.length > 0 &&\n        projectName.length > 0\n    );\n  }\n\n  handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const { state } = this;\n    if (this.canSubmit(state)) {\n      this.setState({ submitting: true });\n      createProject({\n        project: state.projectKey,\n        name: (state.projectName || state.projectKey).trim()\n      }).then(\n        ({ project }) => this.props.onProjectCreate([project.key]),\n        () => {\n          if (this.mounted) {\n            this.setState({ submitting: false });\n          }\n        }\n      );\n    }\n  };\n\n  handleProjectKeyChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const projectKey = event.currentTarget.value || '';\n    const projectKeyError = this.validateKey(projectKey);\n\n    this.setState(prevState => {\n      const projectName = prevState.projectNameChanged ? prevState.projectName : projectKey;\n      return {\n        projectKey,\n        projectKeyError,\n        projectName,\n        projectNameError: this.validateName(projectName),\n        touched: true,\n        validating: projectKeyError === undefined\n      };\n    });\n\n    if (projectKeyError === undefined) {\n      this.checkFreeKey(projectKey);\n    }\n  };\n\n  handleProjectNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const projectName = event.currentTarget.value;\n    this.setState({\n      projectName,\n      projectNameChanged: true,\n      projectNameError: this.validateName(projectName)\n    });\n  };\n\n  validateKey = (projectKey: string) => {\n    const result = validateProjectKey(projectKey);\n    return result === ProjectKeyValidationResult.Valid\n      ? undefined\n      : translate('onboarding.create_project.project_key.error', result);\n  };\n\n  validateName = (projectName: string) => {\n    if (projectName.length === 0) {\n      return translate('onboarding.create_project.display_name.error.empty');\n    } else if (projectName.length > PROJECT_NAME_MAX_LEN) {\n      return translate('onboarding.create_project.display_name.error.too_long');\n    }\n    return undefined;\n  };\n\n  render() {\n    const {\n      projectKey,\n      projectKeyError,\n      projectName,\n      projectNameError,\n      submitting,\n      touched,\n      validating\n    } = this.state;\n    const projectNameIsInvalid = touched && projectNameError !== undefined;\n    const projectNameIsValid = touched && projectNameError === undefined;\n\n    return (\n      <>\n        <CreateProjectPageHeader title={translate('onboarding.create_project.setup_manually')} />\n\n        <div className=\"create-project-manual\">\n          <div className=\"flex-1 huge-spacer-right\">\n            <form className=\"manual-project-create\" onSubmit={this.handleFormSubmit}>\n              <ProjectKeyInput\n                error={projectKeyError}\n                help={translate('onboarding.create_project.project_key.help')}\n                label={translate('onboarding.create_project.project_key')}\n                onProjectKeyChange={this.handleProjectKeyChange}\n                projectKey={projectKey}\n                touched={touched}\n                validating={validating}\n              />\n\n              <ValidationInput\n                className=\"form-field\"\n                description={translate('onboarding.create_project.display_name.description')}\n                error={projectNameError}\n                help={translate('onboarding.create_project.display_name.help')}\n                id=\"project-name\"\n                isInvalid={projectNameIsInvalid}\n                isValid={projectNameIsValid}\n                label={translate('onboarding.create_project.display_name')}\n                required={true}>\n                <input\n                  className={classNames('input-super-large', {\n                    'is-invalid': projectNameIsInvalid,\n                    'is-valid': projectNameIsValid\n                  })}\n                  id=\"project-name\"\n                  maxLength={PROJECT_NAME_MAX_LEN}\n                  minLength={1}\n                  onChange={this.handleProjectNameChange}\n                  type=\"text\"\n                  value={projectName}\n                />\n              </ValidationInput>\n\n              <SubmitButton disabled={!this.canSubmit(this.state) || submitting}>\n                {translate('set_up')}\n              </SubmitButton>\n              <DeferredSpinner className=\"spacer-left\" loading={submitting} />\n            </form>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { WithRouterProps } from 'react-router';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getAlmSettings } from '../../../api/alm-settings';\nimport A11ySkipTarget from '../../../app/components/a11y/A11ySkipTarget';\nimport { whenLoggedIn } from '../../../components/hoc/whenLoggedIn';\nimport { withAppState } from '../../../components/hoc/withAppState';\nimport { getProjectUrl } from '../../../helpers/urls';\nimport { AlmKeys, AlmSettingsInstance } from '../../../types/alm-settings';\nimport BitbucketProjectCreate from './BitbucketProjectCreate';\nimport CreateProjectModeSelection from './CreateProjectModeSelection';\nimport GitHubProjectCreate from './GitHubProjectCreate';\nimport GitlabProjectCreate from './GitlabProjectCreate';\nimport ManualProjectCreate from './ManualProjectCreate';\nimport './style.css';\nimport { CreateProjectModes } from './types';\n\ninterface Props extends Pick<WithRouterProps, 'router' | 'location'> {\n  appState: Pick<T.AppState, 'branchesEnabled' | 'canAdmin'>;\n  currentUser: T.LoggedInUser;\n}\n\ninterface State {\n  bitbucketSettings: AlmSettingsInstance[];\n  githubSettings: AlmSettingsInstance[];\n  gitlabSettings: AlmSettingsInstance[];\n  loading: boolean;\n}\n\nexport class CreateProjectPage extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { bitbucketSettings: [], githubSettings: [], gitlabSettings: [], loading: true };\n\n  componentDidMount() {\n    const {\n      appState: { branchesEnabled }\n    } = this.props;\n    this.mounted = true;\n    if (branchesEnabled) {\n      this.fetchAlmBindings();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchAlmBindings = () => {\n    this.setState({ loading: true });\n    getAlmSettings()\n      .then(almSettings => {\n        if (this.mounted) {\n          this.setState({\n            bitbucketSettings: almSettings.filter(s => s.alm === AlmKeys.Bitbucket),\n            githubSettings: almSettings.filter(s => s.alm === AlmKeys.GitHub),\n            gitlabSettings: almSettings.filter(s => s.alm === AlmKeys.GitLab),\n            loading: false\n          });\n        }\n      })\n      .catch(() => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      });\n  };\n\n  handleModeSelect = (mode: CreateProjectModes) => {\n    const { router, location } = this.props;\n    router.push({\n      pathname: location.pathname,\n      query: { mode }\n    });\n  };\n\n  handleProjectCreate = (projectKeys: string[]) => {\n    if (projectKeys.length === 1) {\n      this.props.router.push(getProjectUrl(projectKeys[0]));\n    }\n  };\n\n  renderForm(mode?: CreateProjectModes) {\n    const {\n      appState: { canAdmin },\n      location,\n      router\n    } = this.props;\n    const { bitbucketSettings, githubSettings, gitlabSettings, loading } = this.state;\n\n    switch (mode) {\n      case CreateProjectModes.BitbucketServer: {\n        return (\n          <BitbucketProjectCreate\n            canAdmin={!!canAdmin}\n            bitbucketSettings={bitbucketSettings}\n            loadingBindings={loading}\n            location={location}\n            onProjectCreate={this.handleProjectCreate}\n          />\n        );\n      }\n      case CreateProjectModes.GitHub: {\n        return (\n          <GitHubProjectCreate\n            canAdmin={!!canAdmin}\n            loadingBindings={loading}\n            location={location}\n            onProjectCreate={this.handleProjectCreate}\n            router={router}\n            settings={githubSettings}\n          />\n        );\n      }\n      case CreateProjectModes.GitLab: {\n        return (\n          <GitlabProjectCreate\n            canAdmin={!!canAdmin}\n            loadingBindings={loading}\n            location={location}\n            onProjectCreate={this.handleProjectCreate}\n            router={router}\n            settings={gitlabSettings}\n          />\n        );\n      }\n      case CreateProjectModes.Manual: {\n        return <ManualProjectCreate onProjectCreate={this.handleProjectCreate} />;\n      }\n      default: {\n        const almCounts = {\n          [AlmKeys.Azure]: 0,\n          [AlmKeys.Bitbucket]: bitbucketSettings.length,\n          [AlmKeys.GitHub]: githubSettings.length,\n          [AlmKeys.GitLab]: gitlabSettings.length\n        };\n        return (\n          <CreateProjectModeSelection\n            almCounts={almCounts}\n            loadingBindings={loading}\n            onSelectMode={this.handleModeSelect}\n          />\n        );\n      }\n    }\n  }\n\n  render() {\n    const {\n      appState: { branchesEnabled },\n      location\n    } = this.props;\n    const mode: CreateProjectModes | undefined = location.query?.mode;\n\n    return (\n      <>\n        <Helmet title={translate('my_account.create_new.TRK')} titleTemplate=\"%s\" />\n        <A11ySkipTarget anchor=\"create_project_main\" />\n        <div className=\"page page-limited huge-spacer-bottom position-relative\" id=\"create-project\">\n          {this.renderForm(branchesEnabled ? mode : CreateProjectModes.Manual)}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default whenLoggedIn(withAppState(CreateProjectPage));\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { A11yContext } from './A11yContext';\n\ninterface Props {\n  anchor: string;\n  label?: string;\n  weight?: number;\n}\n\nexport default function A11ySkipTarget(props: Props) {\n  return (\n    <A11yContext.Consumer>\n      {({ addA11ySkipLink, removeA11ySkipLink }) => (\n        <A11ySkipTargetInner\n          addA11ySkipLink={addA11ySkipLink}\n          removeA11ySkipLink={removeA11ySkipLink}\n          {...props}\n        />\n      )}\n    </A11yContext.Consumer>\n  );\n}\n\ninterface InnerProps {\n  addA11ySkipLink: (link: T.A11ySkipLink) => void;\n  removeA11ySkipLink: (link: T.A11ySkipLink) => void;\n}\n\nexport class A11ySkipTargetInner extends React.PureComponent<Props & InnerProps> {\n  componentDidMount() {\n    this.props.addA11ySkipLink(this.getLink());\n  }\n\n  componentWillUnmount() {\n    this.props.removeA11ySkipLink(this.getLink());\n  }\n\n  getLink = (): T.A11ySkipLink => {\n    const { anchor: key, label = translate('skip_to_content'), weight } = this.props;\n    return { key, label, weight };\n  };\n\n  render() {\n    const { anchor } = this.props;\n    return <span id={`a11y_target__${anchor}`} />;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport const enum AlmKeys {\n  Azure = 'azure',\n  Bitbucket = 'bitbucket',\n  GitHub = 'github',\n  GitLab = 'gitlab'\n}\n\nexport interface AlmBindingDefinition {\n  key: string;\n}\n\nexport interface AzureBindingDefinition extends AlmBindingDefinition {\n  personalAccessToken: string;\n}\n\nexport interface BitbucketBindingDefinition extends AlmBindingDefinition {\n  personalAccessToken: string;\n  url: string;\n}\n\nexport interface GithubBindingDefinition extends AlmBindingDefinition {\n  appId: string;\n  clientId: string;\n  clientSecret: string;\n  privateKey: string;\n  url: string;\n}\n\nexport interface GitlabBindingDefinition extends AlmBindingDefinition {\n  personalAccessToken: string;\n  url?: string;\n}\n\nexport interface ProjectAlmBindingResponse {\n  alm: AlmKeys;\n  key: string;\n  repository?: string;\n  slug?: string;\n  summaryCommentEnabled?: boolean;\n}\n\nexport interface ProjectBitbucketBindingResponse extends ProjectAlmBindingResponse {\n  alm: AlmKeys.Bitbucket;\n  repository: string;\n  slug: string;\n}\n\nexport interface ProjectGitHubBindingResponse extends ProjectAlmBindingResponse {\n  alm: AlmKeys.GitHub;\n  repository: string;\n}\n\nexport interface ProjectGitLabBindingResponse extends ProjectAlmBindingResponse {\n  alm: AlmKeys.GitLab;\n  repository: string;\n  url: string;\n}\n\nexport interface ProjectAlmBindingParams {\n  almSetting: string;\n  project: string;\n}\n\nexport interface AzureProjectAlmBindingParams extends ProjectAlmBindingParams {}\n\nexport interface BitbucketProjectAlmBindingParams extends ProjectAlmBindingParams {\n  repository: string;\n  slug: string;\n}\n\nexport interface GithubProjectAlmBindingParams extends ProjectAlmBindingParams {\n  repository: string;\n  summaryCommentEnabled: boolean;\n}\n\nexport interface GitlabProjectAlmBindingParams extends ProjectAlmBindingParams {\n  repository?: string;\n}\n\nexport interface AlmSettingsInstance {\n  alm: AlmKeys;\n  key: string;\n  url?: string;\n}\n\nexport interface AlmSettingsBindingDefinitions {\n  [AlmKeys.Azure]: AzureBindingDefinition[];\n  [AlmKeys.Bitbucket]: BitbucketBindingDefinition[];\n  [AlmKeys.GitHub]: GithubBindingDefinition[];\n  [AlmKeys.GitLab]: GitlabBindingDefinition[];\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport {\n  AlmSettingsBindingDefinitions,\n  AlmSettingsInstance,\n  AzureBindingDefinition,\n  AzureProjectAlmBindingParams,\n  BitbucketBindingDefinition,\n  BitbucketProjectAlmBindingParams,\n  GithubBindingDefinition,\n  GithubProjectAlmBindingParams,\n  GitlabBindingDefinition,\n  GitlabProjectAlmBindingParams,\n  ProjectAlmBindingResponse\n} from '../types/alm-settings';\n\nexport function getAlmDefinitions(): Promise<AlmSettingsBindingDefinitions> {\n  return getAlmDefinitionsNoCatch().catch(throwGlobalError);\n}\n\nexport function getAlmDefinitionsNoCatch(): Promise<AlmSettingsBindingDefinitions> {\n  return getJSON('/api/alm_settings/list_definitions');\n}\n\nexport function getAlmSettings(project?: string): Promise<AlmSettingsInstance[]> {\n  return getJSON('/api/alm_settings/list', { project })\n    .then(({ almSettings }) => almSettings)\n    .catch(throwGlobalError);\n}\n\nexport function createGithubConfiguration(data: GithubBindingDefinition) {\n  return post('/api/alm_settings/create_github', data).catch(throwGlobalError);\n}\n\nexport function updateGithubConfiguration(data: GithubBindingDefinition & { newKey: string }) {\n  return post('/api/alm_settings/update_github', data).catch(throwGlobalError);\n}\n\nexport function createAzureConfiguration(data: AzureBindingDefinition) {\n  return post('/api/alm_settings/create_azure', data).catch(throwGlobalError);\n}\n\nexport function updateAzureConfiguration(data: AzureBindingDefinition & { newKey: string }) {\n  return post('/api/alm_settings/update_azure', data).catch(throwGlobalError);\n}\n\nexport function createBitbucketConfiguration(data: BitbucketBindingDefinition) {\n  return post('/api/alm_settings/create_bitbucket', data).catch(throwGlobalError);\n}\n\nexport function updateBitbucketConfiguration(\n  data: BitbucketBindingDefinition & { newKey: string }\n) {\n  return post('/api/alm_settings/update_bitbucket', data).catch(throwGlobalError);\n}\n\nexport function createGitlabConfiguration(data: GitlabBindingDefinition) {\n  return post('/api/alm_settings/create_gitlab', data).catch(throwGlobalError);\n}\n\nexport function updateGitlabConfiguration(data: GitlabBindingDefinition & { newKey: string }) {\n  return post('/api/alm_settings/update_gitlab', data).catch(throwGlobalError);\n}\n\nexport function deleteConfiguration(key: string) {\n  return post('/api/alm_settings/delete', { key }).catch(throwGlobalError);\n}\n\nexport function countBindedProjects(almSetting: string) {\n  return getJSON('/api/alm_settings/count_binding', { almSetting })\n    .then(({ projects }) => projects)\n    .catch(throwGlobalError);\n}\n\nexport function getProjectAlmBinding(project: string): Promise<ProjectAlmBindingResponse> {\n  return getJSON('/api/alm_settings/get_binding', { project });\n}\n\nexport function deleteProjectAlmBinding(project: string): Promise<void> {\n  return post('/api/alm_settings/delete_binding', { project }).catch(throwGlobalError);\n}\n\nexport function setProjectAzureBinding(data: AzureProjectAlmBindingParams) {\n  return post('/api/alm_settings/set_azure_binding', data).catch(throwGlobalError);\n}\n\nexport function setProjectBitbucketBinding(data: BitbucketProjectAlmBindingParams) {\n  return post('/api/alm_settings/set_bitbucket_binding', data).catch(throwGlobalError);\n}\n\nexport function setProjectGithubBinding(data: GithubProjectAlmBindingParams) {\n  return post('/api/alm_settings/set_github_binding', data).catch(throwGlobalError);\n}\n\nexport function setProjectGitlabBinding(data: GitlabProjectAlmBindingParams) {\n  return post('/api/alm_settings/set_gitlab_binding', data).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport const ALM_INTEGRATION = 'almintegration';\nexport const ANALYSIS_SCOPE_CATEGORY = 'exclusions';\nexport const LANGUAGES_CATEGORY = 'languages';\nexport const NEW_CODE_PERIOD_CATEGORY = 'new_code_period';\nexport const PULL_REQUEST_DECORATION_BINDING_CATEGORY = 'pull_request_decoration_binding';\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport ValidationInput from 'sonar-ui-common/components/controls/ValidationInput';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { PROJECT_KEY_MAX_LEN } from '../../helpers/constants';\n\nexport interface ProjectKeyInputProps {\n  error?: string;\n  help?: string;\n  label?: string;\n  onProjectKeyChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  projectKey?: string;\n  touched: boolean;\n  validating?: boolean;\n}\n\nexport default function ProjectKeyInput(props: ProjectKeyInputProps) {\n  const { error, help, label, placeholder, projectKey, touched, validating } = props;\n\n  const isInvalid = touched && error !== undefined;\n  const isValid = touched && !validating && error === undefined;\n\n  return (\n    <ValidationInput\n      className=\"form-field\"\n      description={translate('onboarding.create_project.project_key.description')}\n      error={error}\n      help={help}\n      id=\"project-key\"\n      isInvalid={isInvalid}\n      isValid={isValid}\n      label={label}\n      required={label !== undefined}>\n      <input\n        autoFocus={true}\n        className={classNames('input-super-large', {\n          'is-invalid': isInvalid,\n          'is-valid': isValid\n        })}\n        id=\"project-key\"\n        maxLength={PROJECT_KEY_MAX_LEN}\n        minLength={1}\n        onChange={props.onProjectKeyChange}\n        placeholder={placeholder}\n        type=\"text\"\n        value={projectKey}\n      />\n    </ValidationInput>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { ProjectKeyValidationResult } from '../types/component';\nimport { PROJECT_KEY_MAX_LEN } from './constants';\n\nexport function validateProjectKey(projectKey: string): ProjectKeyValidationResult {\n  // This is the regex used on the backend:\n  //   [\\p{Alnum}\\-_.:]*[\\p{Alpha}\\-_.:]+[\\p{Alnum}\\-_.:]*\n  // See sonar-core/src/main/java/org/sonar/core/component/ComponentKeys.java\n  const regex = /^[\\w\\-.:]*[a-z\\-_.:]+[\\w\\-.:]*$/i;\n  if (projectKey.length === 0) {\n    return ProjectKeyValidationResult.Empty;\n  } else if (projectKey.length > PROJECT_KEY_MAX_LEN) {\n    return ProjectKeyValidationResult.TooLong;\n  } else if (regex.test(projectKey)) {\n    return ProjectKeyValidationResult.Valid;\n  } else {\n    return /^[0-9]+$/.test(projectKey)\n      ? ProjectKeyValidationResult.OnlyDigits\n      : ProjectKeyValidationResult.InvalidChar;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport handleRequiredAuthentication from 'sonar-ui-common/helpers/handleRequiredAuthentication';\nimport { isLoggedIn } from '../../helpers/users';\nimport { getWrappedDisplayName } from './utils';\nimport { withCurrentUser } from './withCurrentUser';\n\nexport function whenLoggedIn<P>(WrappedComponent: React.ComponentType<P>) {\n  class Wrapper extends React.Component<P & { currentUser: T.CurrentUser }> {\n    static displayName = getWrappedDisplayName(WrappedComponent, 'whenLoggedIn');\n\n    componentDidMount() {\n      if (!isLoggedIn(this.props.currentUser)) {\n        handleRequiredAuthentication();\n      }\n    }\n\n    render() {\n      if (isLoggedIn(this.props.currentUser)) {\n        return <WrappedComponent {...this.props} />;\n      } else {\n        return null;\n      }\n    }\n  }\n\n  return withCurrentUser(Wrapper);\n}\n"],"sourceRoot":""}